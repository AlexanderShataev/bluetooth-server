
BluetoothServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a228  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800a364  0800a364  0001a364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a468  0800a468  0001a468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a46c  0800a46c  0001a46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000018c  20000004  0800a470  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000190  0800a5fc  00020190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001af0  2000022c  0800a695  0002022c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001d1c  0800a695  00021d1c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY
 10 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 11 MB_MEM1       000000ac  20030028  20030028  00030000  2**2
                  ALLOC
 12 .debug_info   0001ae6d  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004929  00000000  00000000  0003b0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be0  00000000  00000000  0003f9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e8  00000000  00000000  000415d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000095c1  00000000  00000000  00042fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7a6  00000000  00000000  0004c579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed1be  00000000  00000000  00068d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00155edd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007088  00000000  00000000  00155f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000022c 	.word	0x2000022c
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a34c 	.word	0x0800a34c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000230 	.word	0x20000230
 8000178:	0800a34c 	.word	0x0800a34c

0800017c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	4a0a      	ldr	r2, [pc, #40]	; (80001b4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800018a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800018e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000192:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000196:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	021b      	lsls	r3, r3, #8
 800019e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001a2:	4313      	orrs	r3, r2
 80001a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80001a8:	bf00      	nop
 80001aa:	370c      	adds	r7, #12
 80001ac:	46bd      	mov	sp, r7
 80001ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001b2:	4770      	bx	lr
 80001b4:	cafecafe 	.word	0xcafecafe

080001b8 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80001bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80001c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80001c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80001d0:	bf00      	nop
 80001d2:	46bd      	mov	sp, r7
 80001d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d8:	4770      	bx	lr

080001da <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80001da:	b480      	push	{r7}
 80001dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80001de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80001e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80001ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr

080001fc <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000208:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800020c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000210:	d101      	bne.n	8000216 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000212:	2301      	movs	r3, #1
 8000214:	e000      	b.n	8000218 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000216:	2300      	movs	r3, #0
}
 8000218:	4618      	mov	r0, r3
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr

08000222 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800022e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000236:	d101      	bne.n	800023c <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000238:	2301      	movs	r3, #1
 800023a:	e000      	b.n	800023e <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 800023c:	2300      	movs	r3, #0
}
 800023e:	4618      	mov	r0, r3
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr

08000248 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000248:	b480      	push	{r7}
 800024a:	b085      	sub	sp, #20
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000254:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000256:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4313      	orrs	r3, r2
 800025e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4013      	ands	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800026c:	68fb      	ldr	r3, [r7, #12]
}
 800026e:	bf00      	nop
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr

0800027a <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800027a:	b480      	push	{r7}
 800027c:	b083      	sub	sp, #12
 800027e:	af00      	add	r7, sp, #0
 8000280:	6078      	str	r0, [r7, #4]
 8000282:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	685a      	ldr	r2, [r3, #4]
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	041b      	lsls	r3, r3, #16
 800028c:	431a      	orrs	r2, r3
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	605a      	str	r2, [r3, #4]
}
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800029e:	b480      	push	{r7}
 80002a0:	b083      	sub	sp, #12
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	6078      	str	r0, [r7, #4]
 80002a6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	685a      	ldr	r2, [r3, #4]
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	431a      	orrs	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	605a      	str	r2, [r3, #4]
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	695a      	ldr	r2, [r3, #20]
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	041b      	lsls	r3, r3, #16
 80002d2:	431a      	orrs	r2, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	615a      	str	r2, [r3, #20]
}
 80002d8:	bf00      	nop
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	695a      	ldr	r2, [r3, #20]
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	431a      	orrs	r2, r3
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	615a      	str	r2, [r3, #20]
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
 800030e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	683a      	ldr	r2, [r7, #0]
 8000314:	609a      	str	r2, [r3, #8]
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr

08000322 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000322:	b480      	push	{r7}
 8000324:	b083      	sub	sp, #12
 8000326:	af00      	add	r7, sp, #0
 8000328:	6078      	str	r0, [r7, #4]
 800032a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	683a      	ldr	r2, [r7, #0]
 8000330:	619a      	str	r2, [r3, #24]
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
	...

08000340 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <MX_APPE_Config+0x18>)
 8000346:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800034a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 800034c:	f000 f806 	bl	800035c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000350:	f000 f846 	bl	80003e0 <Config_HSE>

  return;
 8000354:	bf00      	nop
}
 8000356:	bd80      	pop	{r7, pc}
 8000358:	58004000 	.word	0x58004000

0800035c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8000360:	f000 f804 	bl	800036c <Reset_BackupDomain>

  Reset_IPCC();
 8000364:	f000 f81a 	bl	800039c <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 8000368:	bf00      	nop
}
 800036a:	bd80      	pop	{r7, pc}

0800036c <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000370:	f7ff ff44 	bl	80001fc <LL_RCC_IsActiveFlag_PINRST>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d00d      	beq.n	8000396 <Reset_BackupDomain+0x2a>
 800037a:	f7ff ff52 	bl	8000222 <LL_RCC_IsActiveFlag_SFTRST>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d108      	bne.n	8000396 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000384:	f003 f906 	bl	8003594 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000388:	f003 f904 	bl	8003594 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800038c:	f7ff ff14 	bl	80001b8 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000390:	f7ff ff23 	bl	80001da <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000394:	bf00      	nop
 8000396:	bf00      	nop
}
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <Reset_IPCC>:

static void Reset_IPCC( void )
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80003a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80003a4:	f7ff ff50 	bl	8000248 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80003a8:	213f      	movs	r1, #63	; 0x3f
 80003aa:	480c      	ldr	r0, [pc, #48]	; (80003dc <Reset_IPCC+0x40>)
 80003ac:	f7ff ffab 	bl	8000306 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80003b0:	213f      	movs	r1, #63	; 0x3f
 80003b2:	480a      	ldr	r0, [pc, #40]	; (80003dc <Reset_IPCC+0x40>)
 80003b4:	f7ff ffb5 	bl	8000322 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80003b8:	213f      	movs	r1, #63	; 0x3f
 80003ba:	4808      	ldr	r0, [pc, #32]	; (80003dc <Reset_IPCC+0x40>)
 80003bc:	f7ff ff5d 	bl	800027a <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80003c0:	213f      	movs	r1, #63	; 0x3f
 80003c2:	4806      	ldr	r0, [pc, #24]	; (80003dc <Reset_IPCC+0x40>)
 80003c4:	f7ff ff7c 	bl	80002c0 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80003c8:	213f      	movs	r1, #63	; 0x3f
 80003ca:	4804      	ldr	r0, [pc, #16]	; (80003dc <Reset_IPCC+0x40>)
 80003cc:	f7ff ff67 	bl	800029e <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80003d0:	213f      	movs	r1, #63	; 0x3f
 80003d2:	4802      	ldr	r0, [pc, #8]	; (80003dc <Reset_IPCC+0x40>)
 80003d4:	f7ff ff86 	bl	80002e4 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80003d8:	bf00      	nop
}
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	58000c00 	.word	0x58000c00

080003e0 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80003e6:	2000      	movs	r0, #0
 80003e8:	f008 ff48 	bl	800927c <OTP_Read>
 80003ec:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d005      	beq.n	8000400 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	799b      	ldrb	r3, [r3, #6]
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff febf 	bl	800017c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
}
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <UTIL_SEQ_Idle>:

  /* USER CODE END MX_APPE_Process_2 */
}

void UTIL_SEQ_Idle( void )
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800040c:	bf00      	nop
}
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
	...

08000418 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <ReadRtcSsrValue+0x3c>)
 8000420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000422:	b29b      	uxth	r3, r3
 8000424:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <ReadRtcSsrValue+0x3c>)
 8000428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800042a:	b29b      	uxth	r3, r3
 800042c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800042e:	e005      	b.n	800043c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000434:	4b07      	ldr	r3, [pc, #28]	; (8000454 <ReadRtcSsrValue+0x3c>)
 8000436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000438:	b29b      	uxth	r3, r3
 800043a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	429a      	cmp	r2, r3
 8000442:	d1f5      	bne.n	8000430 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000444:	683b      	ldr	r3, [r7, #0]
}
 8000446:	4618      	mov	r0, r3
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40002800 	.word	0x40002800

08000458 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	460a      	mov	r2, r1
 8000462:	71fb      	strb	r3, [r7, #7]
 8000464:	4613      	mov	r3, r2
 8000466:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000468:	79ba      	ldrb	r2, [r7, #6]
 800046a:	491d      	ldr	r1, [pc, #116]	; (80004e0 <LinkTimerAfter+0x88>)
 800046c:	4613      	mov	r3, r2
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	4413      	add	r3, r2
 8000472:	00db      	lsls	r3, r3, #3
 8000474:	440b      	add	r3, r1
 8000476:	3315      	adds	r3, #21
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	2b06      	cmp	r3, #6
 8000480:	d009      	beq.n	8000496 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000482:	7bfa      	ldrb	r2, [r7, #15]
 8000484:	4916      	ldr	r1, [pc, #88]	; (80004e0 <LinkTimerAfter+0x88>)
 8000486:	4613      	mov	r3, r2
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	4413      	add	r3, r2
 800048c:	00db      	lsls	r3, r3, #3
 800048e:	440b      	add	r3, r1
 8000490:	3314      	adds	r3, #20
 8000492:	79fa      	ldrb	r2, [r7, #7]
 8000494:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000496:	79fa      	ldrb	r2, [r7, #7]
 8000498:	4911      	ldr	r1, [pc, #68]	; (80004e0 <LinkTimerAfter+0x88>)
 800049a:	4613      	mov	r3, r2
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	4413      	add	r3, r2
 80004a0:	00db      	lsls	r3, r3, #3
 80004a2:	440b      	add	r3, r1
 80004a4:	3315      	adds	r3, #21
 80004a6:	7bfa      	ldrb	r2, [r7, #15]
 80004a8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80004aa:	79fa      	ldrb	r2, [r7, #7]
 80004ac:	490c      	ldr	r1, [pc, #48]	; (80004e0 <LinkTimerAfter+0x88>)
 80004ae:	4613      	mov	r3, r2
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	4413      	add	r3, r2
 80004b4:	00db      	lsls	r3, r3, #3
 80004b6:	440b      	add	r3, r1
 80004b8:	3314      	adds	r3, #20
 80004ba:	79ba      	ldrb	r2, [r7, #6]
 80004bc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80004be:	79ba      	ldrb	r2, [r7, #6]
 80004c0:	4907      	ldr	r1, [pc, #28]	; (80004e0 <LinkTimerAfter+0x88>)
 80004c2:	4613      	mov	r3, r2
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	4413      	add	r3, r2
 80004c8:	00db      	lsls	r3, r3, #3
 80004ca:	440b      	add	r3, r1
 80004cc:	3315      	adds	r3, #21
 80004ce:	79fa      	ldrb	r2, [r7, #7]
 80004d0:	701a      	strb	r2, [r3, #0]

  return;
 80004d2:	bf00      	nop
}
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	20000190 	.word	0x20000190

080004e4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	460a      	mov	r2, r1
 80004ee:	71fb      	strb	r3, [r7, #7]
 80004f0:	4613      	mov	r3, r2
 80004f2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80004f4:	4b29      	ldr	r3, [pc, #164]	; (800059c <LinkTimerBefore+0xb8>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	79ba      	ldrb	r2, [r7, #6]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d032      	beq.n	8000566 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000500:	79ba      	ldrb	r2, [r7, #6]
 8000502:	4927      	ldr	r1, [pc, #156]	; (80005a0 <LinkTimerBefore+0xbc>)
 8000504:	4613      	mov	r3, r2
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	4413      	add	r3, r2
 800050a:	00db      	lsls	r3, r3, #3
 800050c:	440b      	add	r3, r1
 800050e:	3314      	adds	r3, #20
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000514:	7bfa      	ldrb	r2, [r7, #15]
 8000516:	4922      	ldr	r1, [pc, #136]	; (80005a0 <LinkTimerBefore+0xbc>)
 8000518:	4613      	mov	r3, r2
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	4413      	add	r3, r2
 800051e:	00db      	lsls	r3, r3, #3
 8000520:	440b      	add	r3, r1
 8000522:	3315      	adds	r3, #21
 8000524:	79fa      	ldrb	r2, [r7, #7]
 8000526:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000528:	79fa      	ldrb	r2, [r7, #7]
 800052a:	491d      	ldr	r1, [pc, #116]	; (80005a0 <LinkTimerBefore+0xbc>)
 800052c:	4613      	mov	r3, r2
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	4413      	add	r3, r2
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	440b      	add	r3, r1
 8000536:	3315      	adds	r3, #21
 8000538:	79ba      	ldrb	r2, [r7, #6]
 800053a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800053c:	79fa      	ldrb	r2, [r7, #7]
 800053e:	4918      	ldr	r1, [pc, #96]	; (80005a0 <LinkTimerBefore+0xbc>)
 8000540:	4613      	mov	r3, r2
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	4413      	add	r3, r2
 8000546:	00db      	lsls	r3, r3, #3
 8000548:	440b      	add	r3, r1
 800054a:	3314      	adds	r3, #20
 800054c:	7bfa      	ldrb	r2, [r7, #15]
 800054e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000550:	79ba      	ldrb	r2, [r7, #6]
 8000552:	4913      	ldr	r1, [pc, #76]	; (80005a0 <LinkTimerBefore+0xbc>)
 8000554:	4613      	mov	r3, r2
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	4413      	add	r3, r2
 800055a:	00db      	lsls	r3, r3, #3
 800055c:	440b      	add	r3, r1
 800055e:	3314      	adds	r3, #20
 8000560:	79fa      	ldrb	r2, [r7, #7]
 8000562:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000564:	e014      	b.n	8000590 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000566:	79fa      	ldrb	r2, [r7, #7]
 8000568:	490d      	ldr	r1, [pc, #52]	; (80005a0 <LinkTimerBefore+0xbc>)
 800056a:	4613      	mov	r3, r2
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	4413      	add	r3, r2
 8000570:	00db      	lsls	r3, r3, #3
 8000572:	440b      	add	r3, r1
 8000574:	3315      	adds	r3, #21
 8000576:	79ba      	ldrb	r2, [r7, #6]
 8000578:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800057a:	79ba      	ldrb	r2, [r7, #6]
 800057c:	4908      	ldr	r1, [pc, #32]	; (80005a0 <LinkTimerBefore+0xbc>)
 800057e:	4613      	mov	r3, r2
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	4413      	add	r3, r2
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	440b      	add	r3, r1
 8000588:	3314      	adds	r3, #20
 800058a:	79fa      	ldrb	r2, [r7, #7]
 800058c:	701a      	strb	r2, [r3, #0]
  return;
 800058e:	bf00      	nop
}
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000220 	.word	0x20000220
 80005a0:	20000190 	.word	0x20000190

080005a4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80005ae:	4b4e      	ldr	r3, [pc, #312]	; (80006e8 <linkTimer+0x144>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	2b06      	cmp	r3, #6
 80005b6:	d118      	bne.n	80005ea <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80005b8:	4b4b      	ldr	r3, [pc, #300]	; (80006e8 <linkTimer+0x144>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b4b      	ldr	r3, [pc, #300]	; (80006ec <linkTimer+0x148>)
 80005c0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80005c2:	4a49      	ldr	r2, [pc, #292]	; (80006e8 <linkTimer+0x144>)
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80005c8:	79fa      	ldrb	r2, [r7, #7]
 80005ca:	4949      	ldr	r1, [pc, #292]	; (80006f0 <linkTimer+0x14c>)
 80005cc:	4613      	mov	r3, r2
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	4413      	add	r3, r2
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	440b      	add	r3, r1
 80005d6:	3315      	adds	r3, #21
 80005d8:	2206      	movs	r2, #6
 80005da:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80005dc:	4b45      	ldr	r3, [pc, #276]	; (80006f4 <linkTimer+0x150>)
 80005de:	f04f 32ff 	mov.w	r2, #4294967295
 80005e2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	81fb      	strh	r3, [r7, #14]
 80005e8:	e078      	b.n	80006dc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80005ea:	f000 f909 	bl	8000800 <ReturnTimeElapsed>
 80005ee:	4603      	mov	r3, r0
 80005f0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80005f2:	79fa      	ldrb	r2, [r7, #7]
 80005f4:	493e      	ldr	r1, [pc, #248]	; (80006f0 <linkTimer+0x14c>)
 80005f6:	4613      	mov	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	4413      	add	r3, r2
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	440b      	add	r3, r1
 8000600:	3308      	adds	r3, #8
 8000602:	6819      	ldr	r1, [r3, #0]
 8000604:	89fb      	ldrh	r3, [r7, #14]
 8000606:	79fa      	ldrb	r2, [r7, #7]
 8000608:	4419      	add	r1, r3
 800060a:	4839      	ldr	r0, [pc, #228]	; (80006f0 <linkTimer+0x14c>)
 800060c:	4613      	mov	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	4413      	add	r3, r2
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	4403      	add	r3, r0
 8000616:	3308      	adds	r3, #8
 8000618:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800061a:	79fa      	ldrb	r2, [r7, #7]
 800061c:	4934      	ldr	r1, [pc, #208]	; (80006f0 <linkTimer+0x14c>)
 800061e:	4613      	mov	r3, r2
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	4413      	add	r3, r2
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	440b      	add	r3, r1
 8000628:	3308      	adds	r3, #8
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800062e:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <linkTimer+0x144>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4619      	mov	r1, r3
 8000636:	4a2e      	ldr	r2, [pc, #184]	; (80006f0 <linkTimer+0x14c>)
 8000638:	460b      	mov	r3, r1
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	440b      	add	r3, r1
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	4413      	add	r3, r2
 8000642:	3308      	adds	r3, #8
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	429a      	cmp	r2, r3
 800064a:	d337      	bcc.n	80006bc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <linkTimer+0x144>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000652:	7b7a      	ldrb	r2, [r7, #13]
 8000654:	4926      	ldr	r1, [pc, #152]	; (80006f0 <linkTimer+0x14c>)
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	440b      	add	r3, r1
 8000660:	3315      	adds	r3, #21
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000666:	e013      	b.n	8000690 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000668:	7b7a      	ldrb	r2, [r7, #13]
 800066a:	4921      	ldr	r1, [pc, #132]	; (80006f0 <linkTimer+0x14c>)
 800066c:	4613      	mov	r3, r2
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	4413      	add	r3, r2
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	440b      	add	r3, r1
 8000676:	3315      	adds	r3, #21
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800067c:	7b7a      	ldrb	r2, [r7, #13]
 800067e:	491c      	ldr	r1, [pc, #112]	; (80006f0 <linkTimer+0x14c>)
 8000680:	4613      	mov	r3, r2
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	4413      	add	r3, r2
 8000686:	00db      	lsls	r3, r3, #3
 8000688:	440b      	add	r3, r1
 800068a:	3315      	adds	r3, #21
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000690:	7b3b      	ldrb	r3, [r7, #12]
 8000692:	2b06      	cmp	r3, #6
 8000694:	d00b      	beq.n	80006ae <linkTimer+0x10a>
 8000696:	7b3a      	ldrb	r2, [r7, #12]
 8000698:	4915      	ldr	r1, [pc, #84]	; (80006f0 <linkTimer+0x14c>)
 800069a:	4613      	mov	r3, r2
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	4413      	add	r3, r2
 80006a0:	00db      	lsls	r3, r3, #3
 80006a2:	440b      	add	r3, r1
 80006a4:	3308      	adds	r3, #8
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d2dc      	bcs.n	8000668 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80006ae:	7b7a      	ldrb	r2, [r7, #13]
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	4611      	mov	r1, r2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fecf 	bl	8000458 <LinkTimerAfter>
 80006ba:	e00f      	b.n	80006dc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <linkTimer+0x144>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff0c 	bl	80004e4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <linkTimer+0x144>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <linkTimer+0x148>)
 80006d4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <linkTimer+0x144>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80006dc:	89fb      	ldrh	r3, [r7, #14]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000220 	.word	0x20000220
 80006ec:	20000221 	.word	0x20000221
 80006f0:	20000190 	.word	0x20000190
 80006f4:	20000224 	.word	0x20000224

080006f8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	460a      	mov	r2, r1
 8000702:	71fb      	strb	r3, [r7, #7]
 8000704:	4613      	mov	r3, r2
 8000706:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000708:	4b39      	ldr	r3, [pc, #228]	; (80007f0 <UnlinkTimer+0xf8>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	79fa      	ldrb	r2, [r7, #7]
 8000710:	429a      	cmp	r2, r3
 8000712:	d111      	bne.n	8000738 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000714:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <UnlinkTimer+0xf8>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b36      	ldr	r3, [pc, #216]	; (80007f4 <UnlinkTimer+0xfc>)
 800071c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800071e:	79fa      	ldrb	r2, [r7, #7]
 8000720:	4935      	ldr	r1, [pc, #212]	; (80007f8 <UnlinkTimer+0x100>)
 8000722:	4613      	mov	r3, r2
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	4413      	add	r3, r2
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	440b      	add	r3, r1
 800072c:	3315      	adds	r3, #21
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <UnlinkTimer+0xf8>)
 8000734:	701a      	strb	r2, [r3, #0]
 8000736:	e03e      	b.n	80007b6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000738:	79fa      	ldrb	r2, [r7, #7]
 800073a:	492f      	ldr	r1, [pc, #188]	; (80007f8 <UnlinkTimer+0x100>)
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	440b      	add	r3, r1
 8000746:	3314      	adds	r3, #20
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800074c:	79fa      	ldrb	r2, [r7, #7]
 800074e:	492a      	ldr	r1, [pc, #168]	; (80007f8 <UnlinkTimer+0x100>)
 8000750:	4613      	mov	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	4413      	add	r3, r2
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	440b      	add	r3, r1
 800075a:	3315      	adds	r3, #21
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000760:	79f9      	ldrb	r1, [r7, #7]
 8000762:	7bfa      	ldrb	r2, [r7, #15]
 8000764:	4824      	ldr	r0, [pc, #144]	; (80007f8 <UnlinkTimer+0x100>)
 8000766:	460b      	mov	r3, r1
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	440b      	add	r3, r1
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	4403      	add	r3, r0
 8000770:	3315      	adds	r3, #21
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b2d8      	uxtb	r0, r3
 8000776:	4920      	ldr	r1, [pc, #128]	; (80007f8 <UnlinkTimer+0x100>)
 8000778:	4613      	mov	r3, r2
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	4413      	add	r3, r2
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	440b      	add	r3, r1
 8000782:	3315      	adds	r3, #21
 8000784:	4602      	mov	r2, r0
 8000786:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000788:	7bbb      	ldrb	r3, [r7, #14]
 800078a:	2b06      	cmp	r3, #6
 800078c:	d013      	beq.n	80007b6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800078e:	79f9      	ldrb	r1, [r7, #7]
 8000790:	7bba      	ldrb	r2, [r7, #14]
 8000792:	4819      	ldr	r0, [pc, #100]	; (80007f8 <UnlinkTimer+0x100>)
 8000794:	460b      	mov	r3, r1
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	440b      	add	r3, r1
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	4403      	add	r3, r0
 800079e:	3314      	adds	r3, #20
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b2d8      	uxtb	r0, r3
 80007a4:	4914      	ldr	r1, [pc, #80]	; (80007f8 <UnlinkTimer+0x100>)
 80007a6:	4613      	mov	r3, r2
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	4413      	add	r3, r2
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	440b      	add	r3, r1
 80007b0:	3314      	adds	r3, #20
 80007b2:	4602      	mov	r2, r0
 80007b4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80007b6:	79fa      	ldrb	r2, [r7, #7]
 80007b8:	490f      	ldr	r1, [pc, #60]	; (80007f8 <UnlinkTimer+0x100>)
 80007ba:	4613      	mov	r3, r2
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	4413      	add	r3, r2
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	440b      	add	r3, r1
 80007c4:	330c      	adds	r3, #12
 80007c6:	2201      	movs	r2, #1
 80007c8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <UnlinkTimer+0xf8>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b06      	cmp	r3, #6
 80007d2:	d107      	bne.n	80007e4 <UnlinkTimer+0xec>
 80007d4:	79bb      	ldrb	r3, [r7, #6]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d104      	bne.n	80007e4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <UnlinkTimer+0x104>)
 80007dc:	f04f 32ff 	mov.w	r2, #4294967295
 80007e0:	601a      	str	r2, [r3, #0]
  }

  return;
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
}
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	20000220 	.word	0x20000220
 80007f4:	20000221 	.word	0x20000221
 80007f8:	20000190 	.word	0x20000190
 80007fc:	20000224 	.word	0x20000224

08000800 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <ReturnTimeElapsed+0x70>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800080e:	d026      	beq.n	800085e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000810:	f7ff fe02 	bl	8000418 <ReadRtcSsrValue>
 8000814:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <ReturnTimeElapsed+0x70>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	429a      	cmp	r2, r3
 800081e:	d805      	bhi.n	800082c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <ReturnTimeElapsed+0x70>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	e00a      	b.n	8000842 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <ReturnTimeElapsed+0x74>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <ReturnTimeElapsed+0x70>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	683a      	ldr	r2, [r7, #0]
 800083e:	4413      	add	r3, r2
 8000840:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <ReturnTimeElapsed+0x78>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	fb02 f303 	mul.w	r3, r2, r3
 800084e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <ReturnTimeElapsed+0x7c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	40d3      	lsrs	r3, r2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	e001      	b.n	8000862 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	b29b      	uxth	r3, r3
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000224 	.word	0x20000224
 8000874:	2000024e 	.word	0x2000024e
 8000878:	2000024d 	.word	0x2000024d
 800087c:	2000024c 	.word	0x2000024c

08000880 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 800088a:	88fb      	ldrh	r3, [r7, #6]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d108      	bne.n	80008a2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000890:	f7ff fdc2 	bl	8000418 <ReadRtcSsrValue>
 8000894:	4603      	mov	r3, r0
 8000896:	4a24      	ldr	r2, [pc, #144]	; (8000928 <RestartWakeupCounter+0xa8>)
 8000898:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800089a:	2003      	movs	r0, #3
 800089c:	f000 ff7d 	bl	800179a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80008a0:	e03e      	b.n	8000920 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d803      	bhi.n	80008b0 <RestartWakeupCounter+0x30>
 80008a8:	4b20      	ldr	r3, [pc, #128]	; (800092c <RestartWakeupCounter+0xac>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d002      	beq.n	80008b6 <RestartWakeupCounter+0x36>
      Value -= 1;
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80008b6:	bf00      	nop
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <RestartWakeupCounter+0xb0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d0f7      	beq.n	80008b8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <RestartWakeupCounter+0xb0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <RestartWakeupCounter+0xb0>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80008dc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <RestartWakeupCounter+0xb4>)
 80008e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80008e4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80008e6:	2003      	movs	r0, #3
 80008e8:	f000 ff65 	bl	80017b6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <RestartWakeupCounter+0xb8>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	0c1b      	lsrs	r3, r3, #16
 80008f2:	041b      	lsls	r3, r3, #16
 80008f4:	88fa      	ldrh	r2, [r7, #6]
 80008f6:	4910      	ldr	r1, [pc, #64]	; (8000938 <RestartWakeupCounter+0xb8>)
 80008f8:	4313      	orrs	r3, r2
 80008fa:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80008fc:	f7ff fd8c 	bl	8000418 <ReadRtcSsrValue>
 8000900:	4603      	mov	r3, r0
 8000902:	4a09      	ldr	r2, [pc, #36]	; (8000928 <RestartWakeupCounter+0xa8>)
 8000904:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <RestartWakeupCounter+0xb0>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <RestartWakeupCounter+0xb0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000918:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800091a:	f3af 8000 	nop.w
  return ;
 800091e:	bf00      	nop
}
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000224 	.word	0x20000224
 800092c:	2000024c 	.word	0x2000024c
 8000930:	20000248 	.word	0x20000248
 8000934:	58000800 	.word	0x58000800
 8000938:	40002800 	.word	0x40002800

0800093c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000942:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <RescheduleTimerList+0x124>)
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800094a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800094e:	d108      	bne.n	8000962 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000950:	bf00      	nop
 8000952:	4b44      	ldr	r3, [pc, #272]	; (8000a64 <RescheduleTimerList+0x128>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1f7      	bne.n	8000952 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000962:	4b40      	ldr	r3, [pc, #256]	; (8000a64 <RescheduleTimerList+0x128>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	689a      	ldr	r2, [r3, #8]
 800096a:	4b3e      	ldr	r3, [pc, #248]	; (8000a64 <RescheduleTimerList+0x128>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000974:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000976:	4b3c      	ldr	r3, [pc, #240]	; (8000a68 <RescheduleTimerList+0x12c>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800097c:	7bfa      	ldrb	r2, [r7, #15]
 800097e:	493b      	ldr	r1, [pc, #236]	; (8000a6c <RescheduleTimerList+0x130>)
 8000980:	4613      	mov	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	440b      	add	r3, r1
 800098a:	3308      	adds	r3, #8
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000990:	f7ff ff36 	bl	8000800 <ReturnTimeElapsed>
 8000994:	4603      	mov	r3, r0
 8000996:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	429a      	cmp	r2, r3
 800099e:	d205      	bcs.n	80009ac <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80009a4:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <RescheduleTimerList+0x134>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	701a      	strb	r2, [r3, #0]
 80009aa:	e04d      	b.n	8000a48 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	4a31      	ldr	r2, [pc, #196]	; (8000a74 <RescheduleTimerList+0x138>)
 80009b0:	8812      	ldrh	r2, [r2, #0]
 80009b2:	b292      	uxth	r2, r2
 80009b4:	4413      	add	r3, r2
 80009b6:	461a      	mov	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d906      	bls.n	80009cc <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80009be:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <RescheduleTimerList+0x138>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <RescheduleTimerList+0x134>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
 80009ca:	e03d      	b.n	8000a48 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <RescheduleTimerList+0x134>)
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009dc:	e034      	b.n	8000a48 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80009de:	7bfa      	ldrb	r2, [r7, #15]
 80009e0:	4922      	ldr	r1, [pc, #136]	; (8000a6c <RescheduleTimerList+0x130>)
 80009e2:	4613      	mov	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	440b      	add	r3, r1
 80009ec:	3308      	adds	r3, #8
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	88fb      	ldrh	r3, [r7, #6]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d20a      	bcs.n	8000a0c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80009f6:	7bfa      	ldrb	r2, [r7, #15]
 80009f8:	491c      	ldr	r1, [pc, #112]	; (8000a6c <RescheduleTimerList+0x130>)
 80009fa:	4613      	mov	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	440b      	add	r3, r1
 8000a04:	3308      	adds	r3, #8
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	e013      	b.n	8000a34 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000a0c:	7bfa      	ldrb	r2, [r7, #15]
 8000a0e:	4917      	ldr	r1, [pc, #92]	; (8000a6c <RescheduleTimerList+0x130>)
 8000a10:	4613      	mov	r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	4413      	add	r3, r2
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	440b      	add	r3, r1
 8000a1a:	3308      	adds	r3, #8
 8000a1c:	6819      	ldr	r1, [r3, #0]
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	7bfa      	ldrb	r2, [r7, #15]
 8000a22:	1ac9      	subs	r1, r1, r3
 8000a24:	4811      	ldr	r0, [pc, #68]	; (8000a6c <RescheduleTimerList+0x130>)
 8000a26:	4613      	mov	r3, r2
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	4413      	add	r3, r2
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	4403      	add	r3, r0
 8000a30:	3308      	adds	r3, #8
 8000a32:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000a34:	7bfa      	ldrb	r2, [r7, #15]
 8000a36:	490d      	ldr	r1, [pc, #52]	; (8000a6c <RescheduleTimerList+0x130>)
 8000a38:	4613      	mov	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	440b      	add	r3, r1
 8000a42:	3315      	adds	r3, #21
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	2b06      	cmp	r3, #6
 8000a4c:	d1c7      	bne.n	80009de <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000a4e:	89bb      	ldrh	r3, [r7, #12]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff15 	bl	8000880 <RestartWakeupCounter>

  return ;
 8000a56:	bf00      	nop
}
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40002800 	.word	0x40002800
 8000a64:	20000248 	.word	0x20000248
 8000a68:	20000220 	.word	0x20000220
 8000a6c:	20000190 	.word	0x20000190
 8000a70:	20000228 	.word	0x20000228
 8000a74:	20000250 	.word	0x20000250

08000a78 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8000a82:	617b      	str	r3, [r7, #20]
  return(result);
 8000a84:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000a8c:	4b5f      	ldr	r3, [pc, #380]	; (8000c0c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	22ca      	movs	r2, #202	; 0xca
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
 8000a96:	4b5d      	ldr	r3, [pc, #372]	; (8000c0c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2253      	movs	r2, #83	; 0x53
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000aa0:	4b5a      	ldr	r3, [pc, #360]	; (8000c0c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	689a      	ldr	r2, [r3, #8]
 8000aa8:	4b58      	ldr	r3, [pc, #352]	; (8000c0c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ab2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000ab4:	4b56      	ldr	r3, [pc, #344]	; (8000c10 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000abc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ac0:	4954      	ldr	r1, [pc, #336]	; (8000c14 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	440b      	add	r3, r1
 8000acc:	330c      	adds	r3, #12
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d172      	bne.n	8000bbc <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000ad6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ada:	494e      	ldr	r1, [pc, #312]	; (8000c14 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000adc:	4613      	mov	r3, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	4413      	add	r3, r2
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	440b      	add	r3, r1
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000aea:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000aee:	4949      	ldr	r1, [pc, #292]	; (8000c14 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000af0:	4613      	mov	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4413      	add	r3, r2
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	440b      	add	r3, r1
 8000afa:	3310      	adds	r3, #16
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000b00:	4b45      	ldr	r3, [pc, #276]	; (8000c18 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d050      	beq.n	8000bac <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000b0a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000b0e:	4941      	ldr	r1, [pc, #260]	; (8000c14 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000b10:	4613      	mov	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	440b      	add	r3, r1
 8000b1a:	330d      	adds	r3, #13
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d126      	bne.n	8000b72 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000b24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b28:	2101      	movs	r1, #1
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fde4 	bl	80006f8 <UnlinkTimer>
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	f383 8810 	msr	PRIMASK, r3
}
 8000b3a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000b3c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000b40:	4934      	ldr	r1, [pc, #208]	; (8000c14 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000b42:	4613      	mov	r3, r2
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	4413      	add	r3, r2
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	440b      	add	r3, r1
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f8ee 	bl	8000d38 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000b5c:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	22ca      	movs	r2, #202	; 0xca
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
 8000b66:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2253      	movs	r2, #83	; 0x53
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
 8000b70:	e014      	b.n	8000b9c <HW_TS_RTC_Wakeup_Handler+0x124>
 8000b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f383 8810 	msr	PRIMASK, r3
}
 8000b7c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f84c 	bl	8000c20 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000b88:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	22ca      	movs	r2, #202	; 0xca
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
 8000b92:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2253      	movs	r2, #83	; 0x53
 8000b9a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ba0:	69fa      	ldr	r2, [r7, #28]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	69b8      	ldr	r0, [r7, #24]
 8000ba6:	f000 f94f 	bl	8000e48 <HW_TS_RTC_Int_AppNot>
 8000baa:	e025      	b.n	8000bf8 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8000bac:	f7ff fec6 	bl	800093c <RescheduleTimerList>
 8000bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	f383 8810 	msr	PRIMASK, r3
}
 8000bba:	e01d      	b.n	8000bf8 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000bbc:	bf00      	nop
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f7      	beq.n	8000bbe <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000be2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8000be6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f383 8810 	msr	PRIMASK, r3
}
 8000bf6:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	22ff      	movs	r2, #255	; 0xff
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000c02:	bf00      	nop
}
 8000c04:	3728      	adds	r7, #40	; 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000248 	.word	0x20000248
 8000c10:	20000220 	.word	0x20000220
 8000c14:	20000190 	.word	0x20000190
 8000c18:	20000228 	.word	0x20000228
 8000c1c:	58000800 	.word	0x58000800

08000c20 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8000c2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8000c30:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000c32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 fd94 	bl	8001766 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c3e:	4b38      	ldr	r3, [pc, #224]	; (8000d20 <HW_TS_Stop+0x100>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	22ca      	movs	r2, #202	; 0xca
 8000c46:	625a      	str	r2, [r3, #36]	; 0x24
 8000c48:	4b35      	ldr	r3, [pc, #212]	; (8000d20 <HW_TS_Stop+0x100>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2253      	movs	r2, #83	; 0x53
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000c52:	79fa      	ldrb	r2, [r7, #7]
 8000c54:	4933      	ldr	r1, [pc, #204]	; (8000d24 <HW_TS_Stop+0x104>)
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	330c      	adds	r3, #12
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d148      	bne.n	8000cfc <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fd42 	bl	80006f8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000c74:	4b2c      	ldr	r3, [pc, #176]	; (8000d28 <HW_TS_Stop+0x108>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c7a:	7cfb      	ldrb	r3, [r7, #19]
 8000c7c:	2b06      	cmp	r3, #6
 8000c7e:	d135      	bne.n	8000cec <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000c80:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <HW_TS_Stop+0x10c>)
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c8c:	d108      	bne.n	8000ca0 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000c8e:	bf00      	nop
 8000c90:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <HW_TS_Stop+0x100>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d1f7      	bne.n	8000c90 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <HW_TS_Stop+0x100>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <HW_TS_Stop+0x100>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cb2:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000cb4:	bf00      	nop
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <HW_TS_Stop+0x100>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0f7      	beq.n	8000cb6 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HW_TS_Stop+0x100>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <HW_TS_Stop+0x100>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000cda:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <HW_TS_Stop+0x110>)
 8000cde:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ce2:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 fd66 	bl	80017b6 <HAL_NVIC_ClearPendingIRQ>
 8000cea:	e007      	b.n	8000cfc <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HW_TS_Stop+0x114>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	7cfa      	ldrb	r2, [r7, #19]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d001      	beq.n	8000cfc <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8000cf8:	f7ff fe20 	bl	800093c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HW_TS_Stop+0x100>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	22ff      	movs	r2, #255	; 0xff
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000d06:	2003      	movs	r0, #3
 8000d08:	f000 fd1f 	bl	800174a <HAL_NVIC_EnableIRQ>
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	f383 8810 	msr	PRIMASK, r3
}
 8000d16:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8000d18:	bf00      	nop
}
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000248 	.word	0x20000248
 8000d24:	20000190 	.word	0x20000190
 8000d28:	20000220 	.word	0x20000220
 8000d2c:	40002800 	.word	0x40002800
 8000d30:	58000800 	.word	0x58000800
 8000d34:	20000221 	.word	0x20000221

08000d38 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000d44:	79fa      	ldrb	r2, [r7, #7]
 8000d46:	493c      	ldr	r1, [pc, #240]	; (8000e38 <HW_TS_Start+0x100>)
 8000d48:	4613      	mov	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4413      	add	r3, r2
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	440b      	add	r3, r1
 8000d52:	330c      	adds	r3, #12
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d103      	bne.n	8000d64 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff5e 	bl	8000c20 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d64:	f3ef 8310 	mrs	r3, PRIMASK
 8000d68:	60fb      	str	r3, [r7, #12]
  return(result);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000d6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6e:	b672      	cpsid	i
}
 8000d70:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000d72:	2003      	movs	r0, #3
 8000d74:	f000 fcf7 	bl	8001766 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d78:	4b30      	ldr	r3, [pc, #192]	; (8000e3c <HW_TS_Start+0x104>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	22ca      	movs	r2, #202	; 0xca
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
 8000d82:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <HW_TS_Start+0x104>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2253      	movs	r2, #83	; 0x53
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000d8c:	79fa      	ldrb	r2, [r7, #7]
 8000d8e:	492a      	ldr	r1, [pc, #168]	; (8000e38 <HW_TS_Start+0x100>)
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	440b      	add	r3, r1
 8000d9a:	330c      	adds	r3, #12
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8000da0:	79fa      	ldrb	r2, [r7, #7]
 8000da2:	4925      	ldr	r1, [pc, #148]	; (8000e38 <HW_TS_Start+0x100>)
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	440b      	add	r3, r1
 8000dae:	3308      	adds	r3, #8
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8000db4:	79fa      	ldrb	r2, [r7, #7]
 8000db6:	4920      	ldr	r1, [pc, #128]	; (8000e38 <HW_TS_Start+0x100>)
 8000db8:	4613      	mov	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	440b      	add	r3, r1
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fbea 	bl	80005a4 <linkTimer>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <HW_TS_Start+0x108>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HW_TS_Start+0x10c>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	7c7a      	ldrb	r2, [r7, #17]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d002      	beq.n	8000dec <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8000de6:	f7ff fda9 	bl	800093c <RescheduleTimerList>
 8000dea:	e013      	b.n	8000e14 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8000dec:	79fa      	ldrb	r2, [r7, #7]
 8000dee:	4912      	ldr	r1, [pc, #72]	; (8000e38 <HW_TS_Start+0x100>)
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	440b      	add	r3, r1
 8000dfa:	3308      	adds	r3, #8
 8000dfc:	6819      	ldr	r1, [r3, #0]
 8000dfe:	8a7b      	ldrh	r3, [r7, #18]
 8000e00:	79fa      	ldrb	r2, [r7, #7]
 8000e02:	1ac9      	subs	r1, r1, r3
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <HW_TS_Start+0x100>)
 8000e06:	4613      	mov	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4413      	add	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	4403      	add	r3, r0
 8000e10:	3308      	adds	r3, #8
 8000e12:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HW_TS_Start+0x104>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	22ff      	movs	r2, #255	; 0xff
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000e1e:	2003      	movs	r0, #3
 8000e20:	f000 fc93 	bl	800174a <HAL_NVIC_EnableIRQ>
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	f383 8810 	msr	PRIMASK, r3
}
 8000e2e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8000e30:	bf00      	nop
}
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000190 	.word	0x20000190
 8000e3c:	20000248 	.word	0x20000248
 8000e40:	20000220 	.word	0x20000220
 8000e44:	20000221 	.word	0x20000221

08000e48 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	460b      	mov	r3, r1
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4798      	blx	r3

  return;
 8000e5a:	bf00      	nop
}
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <LL_RCC_LSE_SetDriveCapability>:
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e72:	f023 0218 	bic.w	r2, r3, #24
 8000e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <LL_AHB2_GRP1_EnableClock>:
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b085      	sub	sp, #20
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec4:	f000 fa66 	bl	8001394 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8000ec8:	f7ff fa3a 	bl	8000340 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ecc:	f000 f810 	bl	8000ef0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ed0:	f000 f86c 	bl	8000fac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed4:	f000 f8bc 	bl	8001050 <MX_GPIO_Init>
  MX_RF_Init();
 8000ed8:	f000 f888 	bl	8000fec <MX_RF_Init>
  MX_RTC_Init();
 8000edc:	f000 f88e 	bl	8000ffc <MX_RTC_Init>
  MX_USB_Device_Init();
 8000ee0:	f008 fb72 	bl	80095c8 <MX_USB_Device_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    //MX_APPE_Process();
    UTIL_SEQ_Run (UTIL_SEQ_DEFAULT);
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f009 f8a6 	bl	800a038 <UTIL_SEQ_Run>
 8000eec:	e7fa      	b.n	8000ee4 <main+0x24>
	...

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09a      	sub	sp, #104	; 0x68
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0320 	add.w	r3, r7, #32
 8000efa:	2248      	movs	r2, #72	; 0x48
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f009 fa1c 	bl	800a33c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]
 8000f12:	615a      	str	r2, [r3, #20]
 8000f14:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f16:	f002 fb3d 	bl	8003594 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff ffa1 	bl	8000e62 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <SystemClock_Config+0xb8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f28:	4a1f      	ldr	r2, [pc, #124]	; (8000fa8 <SystemClock_Config+0xb8>)
 8000f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <SystemClock_Config+0xb8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000f3c:	2347      	movs	r3, #71	; 0x47
 8000f3e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f46:	2301      	movs	r3, #1
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f50:	2301      	movs	r3, #1
 8000f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f54:	2340      	movs	r3, #64	; 0x40
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5c:	f107 0320 	add.w	r3, r7, #32
 8000f60:	4618      	mov	r0, r3
 8000f62:	f002 fea3 	bl	8003cac <HAL_RCC_OscConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f6c:	f000 f8b8 	bl	80010e0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000f70:	236f      	movs	r3, #111	; 0x6f
 8000f72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000f74:	2302      	movs	r3, #2
 8000f76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 fa19 	bl	80043c8 <HAL_RCC_ClockConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000f9c:	f000 f8a0 	bl	80010e0 <Error_Handler>
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	3768      	adds	r7, #104	; 0x68
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	58000400 	.word	0x58000400

08000fac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	; 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2250      	movs	r2, #80	; 0x50
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f009 f9bf 	bl	800a33c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8000fbe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fc2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8000fc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fc8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f003 fe08 	bl	8004bea <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000fe0:	f000 f87e 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000fe4:	bf00      	nop
 8000fe6:	3750      	adds	r7, #80	; 0x50
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_RTC_Init+0x4c>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <MX_RTC_Init+0x50>)
 8001004:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <MX_RTC_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_RTC_Init+0x4c>)
 800100e:	220f      	movs	r2, #15
 8001010:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <MX_RTC_Init+0x4c>)
 8001014:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001018:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_RTC_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_RTC_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_RTC_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_RTC_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_RTC_Init+0x4c>)
 8001034:	f004 f860 	bl	80050f8 <HAL_RTC_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800103e:	f000 f84f 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000254 	.word	0x20000254
 800104c:	40002800 	.word	0x40002800

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001064:	2004      	movs	r0, #4
 8001066:	f7ff ff12 	bl	8000e8e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	2002      	movs	r0, #2
 800106c:	f7ff ff0f 	bl	8000e8e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	2001      	movs	r0, #1
 8001072:	f7ff ff0c 	bl	8000e8e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001076:	2008      	movs	r0, #8
 8001078:	f7ff ff09 	bl	8000e8e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2123      	movs	r1, #35	; 0x23
 8001080:	4814      	ldr	r0, [pc, #80]	; (80010d4 <MX_GPIO_Init+0x84>)
 8001082:	f000 fd17 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001086:	2310      	movs	r3, #16
 8001088:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	4619      	mov	r1, r3
 8001096:	4810      	ldr	r0, [pc, #64]	; (80010d8 <MX_GPIO_Init+0x88>)
 8001098:	f000 fb9c 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800109c:	2323      	movs	r3, #35	; 0x23
 800109e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	4619      	mov	r1, r3
 80010b0:	4808      	ldr	r0, [pc, #32]	; (80010d4 <MX_GPIO_Init+0x84>)
 80010b2:	f000 fb8f 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80010b6:	2303      	movs	r3, #3
 80010b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4619      	mov	r1, r3
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_GPIO_Init+0x8c>)
 80010c8:	f000 fb84 	bl	80017d4 <HAL_GPIO_Init>

}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	48000400 	.word	0x48000400
 80010d8:	48000800 	.word	0x48000800
 80010dc:	48000c00 	.word	0x48000c00

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <Error_Handler+0x8>

080010ea <LL_RCC_EnableRTC>:
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80010ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_AHB3_GRP1_EnableClock>:
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001118:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800111a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4313      	orrs	r3, r2
 8001122:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001128:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4013      	ands	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001130:	68fb      	ldr	r3, [r7, #12]
}
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800113e:	b480      	push	{r7}
 8001140:	b085      	sub	sp, #20
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800114c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4313      	orrs	r3, r2
 8001154:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4013      	ands	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001174:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001178:	f7ff ffc8 	bl	800110c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	202e      	movs	r0, #46	; 0x2e
 8001182:	f000 fac8 	bl	8001716 <HAL_NVIC_SetPriority>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001186:	202e      	movs	r0, #46	; 0x2e
 8001188:	f000 fadf 	bl	800174a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b096      	sub	sp, #88	; 0x58
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	2250      	movs	r2, #80	; 0x50
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f009 f8cb 	bl	800a33c <memset>
  if(hrtc->Instance==RTC)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <HAL_RTC_MspInit+0x54>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d115      	bne.n	80011dc <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011b4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ba:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	4618      	mov	r0, r3
 80011c2:	f003 fd12 	bl	8004bea <HAL_RCCEx_PeriphCLKConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80011cc:	f7ff ff88 	bl	80010e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011d0:	f7ff ff8b 	bl	80010ea <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80011d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011d8:	f7ff ffb1 	bl	800113e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011dc:	bf00      	nop
 80011de:	3758      	adds	r7, #88	; 0x58
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40002800 	.word	0x40002800

080011e8 <RTC_WKUP_IRQHandler>:
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */
void RTC_WKUP_IRQHandler(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 80011ec:	f7ff fc44 	bl	8000a78 <HW_TS_RTC_Wakeup_Handler>
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	HW_IPCC_Rx_Handler();
 80011f8:	f008 f924 	bl	8009444 <HW_IPCC_Rx_Handler>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	HW_IPCC_Tx_Handler();
 8001204:	f008 f956 	bl	80094b4 <HW_IPCC_Tx_Handler>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 f8f6 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <USB_LP_IRQHandler+0x10>)
 8001266:	f000 fd68 	bl	8001d3a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20001768 	.word	0x20001768

08001274 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001278:	f000 fc34 	bl	8001ae4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001284:	4b24      	ldr	r3, [pc, #144]	; (8001318 <SystemInit+0x98>)
 8001286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128a:	4a23      	ldr	r2, [pc, #140]	; (8001318 <SystemInit+0x98>)
 800128c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80012a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80012ac:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80012ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <SystemInit+0x9c>)
 80012ba:	4013      	ands	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80012be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012ca:	f023 0305 	bic.w	r3, r3, #5
 80012ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80012d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012de:	f023 0301 	bic.w	r3, r3, #1
 80012e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80012e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ea:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <SystemInit+0xa0>)
 80012ec:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80012ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f2:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <SystemInit+0xa0>)
 80012f4:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001304:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00
 800131c:	faf6fefb 	.word	0xfaf6fefb
 8001320:	22041000 	.word	0x22041000

08001324 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001324:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001326:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001328:	3304      	adds	r3, #4

0800132a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800132a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800132e:	d3f9      	bcc.n	8001324 <CopyDataInit>
  bx lr
 8001330:	4770      	bx	lr

08001332 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001332:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001334:	3004      	adds	r0, #4

08001336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001336:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001338:	d3fb      	bcc.n	8001332 <FillZerobss>
  bx lr
 800133a:	4770      	bx	lr

0800133c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800133e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001340:	f7ff ff9e 	bl	8001280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001344:	480b      	ldr	r0, [pc, #44]	; (8001374 <LoopForever+0x8>)
 8001346:	490c      	ldr	r1, [pc, #48]	; (8001378 <LoopForever+0xc>)
 8001348:	4a0c      	ldr	r2, [pc, #48]	; (800137c <LoopForever+0x10>)
 800134a:	2300      	movs	r3, #0
 800134c:	f7ff ffed 	bl	800132a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001350:	480b      	ldr	r0, [pc, #44]	; (8001380 <LoopForever+0x14>)
 8001352:	490c      	ldr	r1, [pc, #48]	; (8001384 <LoopForever+0x18>)
 8001354:	2300      	movs	r3, #0
 8001356:	f7ff ffee 	bl	8001336 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800135a:	480b      	ldr	r0, [pc, #44]	; (8001388 <LoopForever+0x1c>)
 800135c:	490b      	ldr	r1, [pc, #44]	; (800138c <LoopForever+0x20>)
 800135e:	2300      	movs	r3, #0
 8001360:	f7ff ffe9 	bl	8001336 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001364:	f008 ffc6 	bl	800a2f4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001368:	f7ff fdaa 	bl	8000ec0 <main>

0800136c <LoopForever>:

LoopForever:
  b LoopForever
 800136c:	e7fe      	b.n	800136c <LoopForever>
 800136e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001370:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001374:	20000004 	.word	0x20000004
 8001378:	20000190 	.word	0x20000190
 800137c:	0800a470 	.word	0x0800a470
  INIT_BSS _sbss, _ebss
 8001380:	2000022c 	.word	0x2000022c
 8001384:	20001d1c 	.word	0x20001d1c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001388:	200300d4 	.word	0x200300d4
 800138c:	200300d4 	.word	0x200300d4

08001390 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_IRQHandler>
	...

08001394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <HAL_Init+0x3c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <HAL_Init+0x3c>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013aa:	2003      	movs	r0, #3
 80013ac:	f000 f9a8 	bl	8001700 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013b0:	2000      	movs	r0, #0
 80013b2:	f000 f80f 	bl	80013d4 <HAL_InitTick>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	71fb      	strb	r3, [r7, #7]
 80013c0:	e001      	b.n	80013c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013c2:	f7ff fed5 	bl	8001170 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c6:	79fb      	ldrb	r3, [r7, #7]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	58004000 	.word	0x58004000

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_InitTick+0x6c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d024      	beq.n	8001432 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013e8:	f003 f99a 	bl	8004720 <HAL_RCC_GetHCLKFreq>
 80013ec:	4602      	mov	r2, r0
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <HAL_InitTick+0x6c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4619      	mov	r1, r3
 80013f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f9be 	bl	8001782 <HAL_SYSTICK_Config>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10f      	bne.n	800142c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	d809      	bhi.n	8001426 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001412:	2200      	movs	r2, #0
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	f04f 30ff 	mov.w	r0, #4294967295
 800141a:	f000 f97c 	bl	8001716 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800141e:	4a09      	ldr	r2, [pc, #36]	; (8001444 <HAL_InitTick+0x70>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	e007      	b.n	8001436 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	73fb      	strb	r3, [r7, #15]
 800142a:	e004      	b.n	8001436 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	73fb      	strb	r3, [r7, #15]
 8001430:	e001      	b.n	8001436 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001436:	7bfb      	ldrb	r3, [r7, #15]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	2000000c 	.word	0x2000000c
 8001444:	20000008 	.word	0x20000008

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	2000000c 	.word	0x2000000c
 800146c:	2000027c 	.word	0x2000027c

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	2000027c 	.word	0x2000027c

08001488 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_GetTickPrio+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000008 	.word	0x20000008

080014a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	db0b      	blt.n	800152e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	4907      	ldr	r1, [pc, #28]	; (800153c <__NVIC_EnableIRQ+0x38>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	2001      	movs	r0, #1
 8001526:	fa00 f202 	lsl.w	r2, r0, r2
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e100 	.word	0xe000e100

08001540 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db12      	blt.n	8001578 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	490a      	ldr	r1, [pc, #40]	; (8001584 <__NVIC_DisableIRQ+0x44>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	3320      	adds	r3, #32
 8001568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800156c:	f3bf 8f4f 	dsb	sy
}
 8001570:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001572:	f3bf 8f6f 	isb	sy
}
 8001576:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db0c      	blt.n	80015b4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f003 021f 	and.w	r2, r3, #31
 80015a0:	4907      	ldr	r1, [pc, #28]	; (80015c0 <__NVIC_SetPendingIRQ+0x38>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2001      	movs	r0, #1
 80015aa:	fa00 f202 	lsl.w	r2, r0, r2
 80015ae:	3340      	adds	r3, #64	; 0x40
 80015b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0c      	blt.n	80015f0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4907      	ldr	r1, [pc, #28]	; (80015fc <__NVIC_ClearPendingIRQ+0x38>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	3360      	adds	r3, #96	; 0x60
 80015ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db0a      	blt.n	800162a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	490c      	ldr	r1, [pc, #48]	; (800164c <__NVIC_SetPriority+0x4c>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001628:	e00a      	b.n	8001640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4908      	ldr	r1, [pc, #32]	; (8001650 <__NVIC_SetPriority+0x50>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3b04      	subs	r3, #4
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	440b      	add	r3, r1
 800163e:	761a      	strb	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f1c3 0307 	rsb	r3, r3, #7
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf28      	it	cs
 8001672:	2304      	movcs	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	2b06      	cmp	r3, #6
 800167c:	d902      	bls.n	8001684 <NVIC_EncodePriority+0x30>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b03      	subs	r3, #3
 8001682:	e000      	b.n	8001686 <NVIC_EncodePriority+0x32>
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	401a      	ands	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	4313      	orrs	r3, r2
         );
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	; 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016cc:	d301      	bcc.n	80016d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00f      	b.n	80016f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <SysTick_Config+0x40>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016da:	210f      	movs	r1, #15
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f7ff ff8e 	bl	8001600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <SysTick_Config+0x40>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <SysTick_Config+0x40>)
 80016ec:	2207      	movs	r2, #7
 80016ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	e000e010 	.word	0xe000e010

08001700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fec9 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001724:	f7ff fee0 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 8001728:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	6978      	ldr	r0, [r7, #20]
 8001730:	f7ff ff90 	bl	8001654 <NVIC_EncodePriority>
 8001734:	4602      	mov	r2, r0
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff5f 	bl	8001600 <__NVIC_SetPriority>
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fed3 	bl	8001504 <__NVIC_EnableIRQ>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fee3 	bl	8001540 <__NVIC_DisableIRQ>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ff96 	bl	80016bc <SysTick_Config>
 8001790:	4603      	mov	r3, r0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff feed 	bl	8001588 <__NVIC_SetPendingIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80017c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fefd 	bl	80015c4 <__NVIC_ClearPendingIRQ>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e2:	e14c      	b.n	8001a7e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 813e 	beq.w	8001a78 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b01      	cmp	r3, #1
 8001806:	d005      	beq.n	8001814 <HAL_GPIO_Init+0x40>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d130      	bne.n	8001876 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	2203      	movs	r2, #3
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800184a:	2201      	movs	r2, #1
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	091b      	lsrs	r3, r3, #4
 8001860:	f003 0201 	and.w	r2, r3, #1
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b03      	cmp	r3, #3
 8001880:	d017      	beq.n	80018b2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	2203      	movs	r2, #3
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d123      	bne.n	8001906 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	6939      	ldr	r1, [r7, #16]
 8001902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0203 	and.w	r2, r3, #3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8098 	beq.w	8001a78 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001948:	4a54      	ldr	r2, [pc, #336]	; (8001a9c <HAL_GPIO_Init+0x2c8>)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001972:	d019      	beq.n	80019a8 <HAL_GPIO_Init+0x1d4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a4a      	ldr	r2, [pc, #296]	; (8001aa0 <HAL_GPIO_Init+0x2cc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d013      	beq.n	80019a4 <HAL_GPIO_Init+0x1d0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a49      	ldr	r2, [pc, #292]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d00d      	beq.n	80019a0 <HAL_GPIO_Init+0x1cc>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a48      	ldr	r2, [pc, #288]	; (8001aa8 <HAL_GPIO_Init+0x2d4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d007      	beq.n	800199c <HAL_GPIO_Init+0x1c8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a47      	ldr	r2, [pc, #284]	; (8001aac <HAL_GPIO_Init+0x2d8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_GPIO_Init+0x1c4>
 8001994:	2304      	movs	r3, #4
 8001996:	e008      	b.n	80019aa <HAL_GPIO_Init+0x1d6>
 8001998:	2307      	movs	r3, #7
 800199a:	e006      	b.n	80019aa <HAL_GPIO_Init+0x1d6>
 800199c:	2303      	movs	r3, #3
 800199e:	e004      	b.n	80019aa <HAL_GPIO_Init+0x1d6>
 80019a0:	2302      	movs	r3, #2
 80019a2:	e002      	b.n	80019aa <HAL_GPIO_Init+0x1d6>
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <HAL_GPIO_Init+0x1d6>
 80019a8:	2300      	movs	r3, #0
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	f002 0203 	and.w	r2, r2, #3
 80019b0:	0092      	lsls	r2, r2, #2
 80019b2:	4093      	lsls	r3, r2
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ba:	4938      	ldr	r1, [pc, #224]	; (8001a9c <HAL_GPIO_Init+0x2c8>)
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	089b      	lsrs	r3, r3, #2
 80019c0:	3302      	adds	r3, #2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019c8:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <HAL_GPIO_Init+0x2dc>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019ec:	4a30      	ldr	r2, [pc, #192]	; (8001ab0 <HAL_GPIO_Init+0x2dc>)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019f2:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <HAL_GPIO_Init+0x2dc>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a16:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <HAL_GPIO_Init+0x2dc>)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <HAL_GPIO_Init+0x2dc>)
 8001a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a42:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <HAL_GPIO_Init+0x2dc>)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_GPIO_Init+0x2dc>)
 8001a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a70:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <HAL_GPIO_Init+0x2dc>)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f47f aeab 	bne.w	80017e4 <HAL_GPIO_Init+0x10>
  }
}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	48000400 	.word	0x48000400
 8001aa4:	48000800 	.word	0x48000800
 8001aa8:	48000c00 	.word	0x48000c00
 8001aac:	48001000 	.word	0x48001000
 8001ab0:	58000800 	.word	0x58000800

08001ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ac4:	787b      	ldrb	r3, [r7, #1]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_HSEM_IRQHandler+0x30>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <HAL_HSEM_IRQHandler+0x30>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	4906      	ldr	r1, [pc, #24]	; (8001b14 <HAL_HSEM_IRQHandler+0x30>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <HAL_HSEM_IRQHandler+0x30>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f807 	bl	8001b18 <HAL_HSEM_FreeCallback>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	58001500 	.word	0x58001500

08001b18 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b2e:	b08b      	sub	sp, #44	; 0x2c
 8001b30:	af06      	add	r7, sp, #24
 8001b32:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e0d7      	b.n	8001cee <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d106      	bne.n	8001b58 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f007 ff56 	bl	8009a04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 fbcc 	bl	8005302 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
 8001b6e:	e04c      	b.n	8001c0a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	440b      	add	r3, r1
 8001b80:	3301      	adds	r3, #1
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b9a:	7bfa      	ldrb	r2, [r7, #15]
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	b298      	uxth	r0, r3
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	440b      	add	r3, r1
 8001bac:	3336      	adds	r3, #54	; 0x36
 8001bae:	4602      	mov	r2, r0
 8001bb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3303      	adds	r3, #3
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3338      	adds	r3, #56	; 0x38
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	440b      	add	r3, r1
 8001bea:	333c      	adds	r3, #60	; 0x3c
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3340      	adds	r3, #64	; 0x40
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	3301      	adds	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	7bfa      	ldrb	r2, [r7, #15]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d3ad      	bcc.n	8001b70 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e044      	b.n	8001ca4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	440b      	add	r3, r1
 8001c28:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	440b      	add	r3, r1
 8001c3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c46:	7bfa      	ldrb	r2, [r7, #15]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	440b      	add	r3, r1
 8001c54:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	440b      	add	r3, r1
 8001c6a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	440b      	add	r3, r1
 8001c96:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d3b5      	bcc.n	8001c1a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	687e      	ldr	r6, [r7, #4]
 8001cb6:	466d      	mov	r5, sp
 8001cb8:	f106 0410 	add.w	r4, r6, #16
 8001cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cc0:	6823      	ldr	r3, [r4, #0]
 8001cc2:	602b      	str	r3, [r5, #0]
 8001cc4:	1d33      	adds	r3, r6, #4
 8001cc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc8:	6838      	ldr	r0, [r7, #0]
 8001cca:	f003 fb35 	bl	8005338 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d102      	bne.n	8001cec <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f001 fc29 	bl	800353e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cf6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_PCD_Start+0x16>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e012      	b.n	8001d32 <HAL_PCD_Start+0x3c>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 fadb 	bl	80052d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f005 fcf4 	bl	8007710 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f005 fcf9 	bl	800773e <USB_ReadInterrupts>
 8001d4c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 fb26 	bl	80023aa <PCD_EP_ISR_Handler>

    return;
 8001d5e:	e110      	b.n	8001f82 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d013      	beq.n	8001d92 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7c:	b292      	uxth	r2, r2
 8001d7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f007 fee1 	bl	8009b4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d88:	2100      	movs	r1, #0
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f8fc 	bl	8001f88 <HAL_PCD_SetAddress>

    return;
 8001d90:	e0f7      	b.n	8001f82 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00c      	beq.n	8001db6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dae:	b292      	uxth	r2, r2
 8001db0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001db4:	e0e5      	b.n	8001f82 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00c      	beq.n	8001dda <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dd2:	b292      	uxth	r2, r2
 8001dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001dd8:	e0d3      	b.n	8001f82 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d034      	beq.n	8001e4e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0204 	bic.w	r2, r2, #4
 8001df6:	b292      	uxth	r2, r2
 8001df8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0208 	bic.w	r2, r2, #8
 8001e0e:	b292      	uxth	r2, r2
 8001e10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d107      	bne.n	8001e2e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e26:	2100      	movs	r1, #0
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f008 f885 	bl	8009f38 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f007 fec4 	bl	8009bbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e46:	b292      	uxth	r2, r2
 8001e48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e4c:	e099      	b.n	8001f82 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d027      	beq.n	8001ea8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0208 	orr.w	r2, r2, #8
 8001e6a:	b292      	uxth	r2, r2
 8001e6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e82:	b292      	uxth	r2, r2
 8001e84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0204 	orr.w	r2, r2, #4
 8001e9a:	b292      	uxth	r2, r2
 8001e9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f007 fe71 	bl	8009b88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001ea6:	e06c      	b.n	8001f82 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d040      	beq.n	8001f34 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec4:	b292      	uxth	r2, r2
 8001ec6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d12b      	bne.n	8001f2c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0204 	orr.w	r2, r2, #4
 8001ee6:	b292      	uxth	r2, r2
 8001ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0208 	orr.w	r2, r2, #8
 8001efe:	b292      	uxth	r2, r2
 8001f00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f22:	2101      	movs	r1, #1
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f008 f807 	bl	8009f38 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001f2a:	e02a      	b.n	8001f82 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f007 fe2b 	bl	8009b88 <HAL_PCD_SuspendCallback>
    return;
 8001f32:	e026      	b.n	8001f82 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00f      	beq.n	8001f5e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f50:	b292      	uxth	r2, r2
 8001f52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f007 fde9 	bl	8009b2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f5c:	e011      	b.n	8001f82 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00c      	beq.n	8001f82 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f7a:	b292      	uxth	r2, r2
 8001f7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f80:	bf00      	nop
  }
}
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_PCD_SetAddress+0x1a>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e013      	b.n	8001fca <HAL_PCD_SetAddress+0x42>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f005 fb94 	bl	80076e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	4608      	mov	r0, r1
 8001fdc:	4611      	mov	r1, r2
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	70fb      	strb	r3, [r7, #3]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	803b      	strh	r3, [r7, #0]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	da0e      	bge.n	8002016 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	705a      	strb	r2, [r3, #1]
 8002014:	e00e      	b.n	8002034 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	f003 0207 	and.w	r2, r3, #7
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	4413      	add	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	b2da      	uxtb	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002040:	883a      	ldrh	r2, [r7, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	78ba      	ldrb	r2, [r7, #2]
 800204a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	785b      	ldrb	r3, [r3, #1]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d004      	beq.n	800205e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800205e:	78bb      	ldrb	r3, [r7, #2]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d102      	bne.n	800206a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_PCD_EP_Open+0xa6>
 8002074:	2302      	movs	r3, #2
 8002076:	e00e      	b.n	8002096 <HAL_PCD_EP_Open+0xc4>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68f9      	ldr	r1, [r7, #12]
 8002086:	4618      	mov	r0, r3
 8002088:	f003 f978 	bl	800537c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002094:	7afb      	ldrb	r3, [r7, #11]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	da0e      	bge.n	80020d0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2201      	movs	r2, #1
 80020cc:	705a      	strb	r2, [r3, #1]
 80020ce:	e00e      	b.n	80020ee <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	f003 0207 	and.w	r2, r3, #7
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_PCD_EP_Close+0x6a>
 8002104:	2302      	movs	r3, #2
 8002106:	e00e      	b.n	8002126 <HAL_PCD_EP_Close+0x88>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68f9      	ldr	r1, [r7, #12]
 8002116:	4618      	mov	r0, r3
 8002118:	f003 fcc4 	bl	8005aa4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	460b      	mov	r3, r1
 800213c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800213e:	7afb      	ldrb	r3, [r7, #11]
 8002140:	f003 0207 	and.w	r2, r3, #7
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2200      	movs	r2, #0
 8002166:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2200      	movs	r2, #0
 800216c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800216e:	7afb      	ldrb	r3, [r7, #11]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	b2da      	uxtb	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800217a:	7afb      	ldrb	r3, [r7, #11]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	2b00      	cmp	r3, #0
 8002182:	d106      	bne.n	8002192 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6979      	ldr	r1, [r7, #20]
 800218a:	4618      	mov	r0, r3
 800218c:	f003 fe77 	bl	8005e7e <USB_EPStartXfer>
 8002190:	e005      	b.n	800219e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6979      	ldr	r1, [r7, #20]
 8002198:	4618      	mov	r0, r3
 800219a:	f003 fe70 	bl	8005e7e <USB_EPStartXfer>
  }

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	f003 0207 	and.w	r2, r3, #7
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	460b      	mov	r3, r1
 80021e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021e8:	7afb      	ldrb	r3, [r7, #11]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2201      	movs	r2, #1
 8002222:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002224:	7afb      	ldrb	r3, [r7, #11]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	b2da      	uxtb	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002230:	7afb      	ldrb	r3, [r7, #11]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6979      	ldr	r1, [r7, #20]
 8002240:	4618      	mov	r0, r3
 8002242:	f003 fe1c 	bl	8005e7e <USB_EPStartXfer>
 8002246:	e005      	b.n	8002254 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6979      	ldr	r1, [r7, #20]
 800224e:	4618      	mov	r0, r3
 8002250:	f003 fe15 	bl	8005e7e <USB_EPStartXfer>
  }

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800226a:	78fb      	ldrb	r3, [r7, #3]
 800226c:	f003 0207 	and.w	r2, r3, #7
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	429a      	cmp	r2, r3
 8002276:	d901      	bls.n	800227c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e03e      	b.n	80022fa <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800227c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002280:	2b00      	cmp	r3, #0
 8002282:	da0e      	bge.n	80022a2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2201      	movs	r2, #1
 800229e:	705a      	strb	r2, [r3, #1]
 80022a0:	e00c      	b.n	80022bc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2201      	movs	r2, #1
 80022c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_PCD_EP_SetStall+0x7e>
 80022d8:	2302      	movs	r3, #2
 80022da:	e00e      	b.n	80022fa <HAL_PCD_EP_SetStall+0x9c>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68f9      	ldr	r1, [r7, #12]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f005 f8fd 	bl	80074ea <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	f003 020f 	and.w	r2, r3, #15
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	d901      	bls.n	8002320 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e040      	b.n	80023a2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002320:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002324:	2b00      	cmp	r3, #0
 8002326:	da0e      	bge.n	8002346 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	4413      	add	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2201      	movs	r2, #1
 8002342:	705a      	strb	r2, [r3, #1]
 8002344:	e00e      	b.n	8002364 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	f003 0207 	and.w	r2, r3, #7
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	4413      	add	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	b2da      	uxtb	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_PCD_EP_ClrStall+0x82>
 8002380:	2302      	movs	r3, #2
 8002382:	e00e      	b.n	80023a2 <HAL_PCD_EP_ClrStall+0xa0>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68f9      	ldr	r1, [r7, #12]
 8002392:	4618      	mov	r0, r3
 8002394:	f005 f8fa 	bl	800758c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b096      	sub	sp, #88	; 0x58
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023b2:	e39c      	b.n	8002aee <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80023c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80023ce:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f040 815e 	bne.w	8002694 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80023d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d150      	bne.n	8002486 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f4:	81fb      	strh	r3, [r7, #14]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	89fb      	ldrh	r3, [r7, #14]
 80023fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002404:	b29b      	uxth	r3, r3
 8002406:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3328      	adds	r3, #40	; 0x28
 800240c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002416:	b29b      	uxth	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	4413      	add	r3, r2
 8002428:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002434:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	441a      	add	r2, r3
 8002440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002442:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002444:	2100      	movs	r1, #0
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f007 fb57 	bl	8009afa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 834a 	beq.w	8002aee <PCD_EP_ISR_Handler+0x744>
 800245a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f040 8345 	bne.w	8002aee <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002470:	b2da      	uxtb	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	b292      	uxth	r2, r2
 8002478:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002484:	e333      	b.n	8002aee <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800248c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002498:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800249c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d032      	beq.n	800250a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	4413      	add	r3, r2
 80024be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ca:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80024d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80024da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024dc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f005 f97f 	bl	80077e2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024f0:	4013      	ands	r3, r2
 80024f2:	823b      	strh	r3, [r7, #16]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	8a3a      	ldrh	r2, [r7, #16]
 80024fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024fe:	b292      	uxth	r2, r2
 8002500:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f007 facc 	bl	8009aa0 <HAL_PCD_SetupStageCallback>
 8002508:	e2f1      	b.n	8002aee <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800250a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800250e:	2b00      	cmp	r3, #0
 8002510:	f280 82ed 	bge.w	8002aee <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	b29a      	uxth	r2, r3
 800251c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002520:	4013      	ands	r3, r2
 8002522:	83fb      	strh	r3, [r7, #30]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	8bfa      	ldrh	r2, [r7, #30]
 800252a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800252e:	b292      	uxth	r2, r2
 8002530:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253a:	b29b      	uxth	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	4413      	add	r3, r2
 800254c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002558:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800255a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d019      	beq.n	8002596 <PCD_EP_ISR_Handler+0x1ec>
 8002562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d015      	beq.n	8002596 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002570:	6959      	ldr	r1, [r3, #20]
 8002572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002574:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002578:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800257a:	b29b      	uxth	r3, r3
 800257c:	f005 f931 	bl	80077e2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	441a      	add	r2, r3
 800258a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800258e:	2100      	movs	r1, #0
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f007 fa97 	bl	8009ac4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f040 82a3 	bne.w	8002aee <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	61bb      	str	r3, [r7, #24]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	4413      	add	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	2b3e      	cmp	r3, #62	; 0x3e
 80025ce:	d918      	bls.n	8002602 <PCD_EP_ISR_Handler+0x258>
 80025d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	647b      	str	r3, [r7, #68]	; 0x44
 80025d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <PCD_EP_ISR_Handler+0x240>
 80025e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e6:	3b01      	subs	r3, #1
 80025e8:	647b      	str	r3, [r7, #68]	; 0x44
 80025ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	029b      	lsls	r3, r3, #10
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	801a      	strh	r2, [r3, #0]
 8002600:	e029      	b.n	8002656 <PCD_EP_ISR_Handler+0x2ac>
 8002602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d112      	bne.n	8002630 <PCD_EP_ISR_Handler+0x286>
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002614:	b29a      	uxth	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	801a      	strh	r2, [r3, #0]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	b29b      	uxth	r3, r3
 8002620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002628:	b29a      	uxth	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	801a      	strh	r2, [r3, #0]
 800262e:	e012      	b.n	8002656 <PCD_EP_ISR_Handler+0x2ac>
 8002630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	085b      	lsrs	r3, r3, #1
 8002636:	647b      	str	r3, [r7, #68]	; 0x44
 8002638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <PCD_EP_ISR_Handler+0x2a0>
 8002644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002646:	3301      	adds	r3, #1
 8002648:	647b      	str	r3, [r7, #68]	; 0x44
 800264a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800264c:	b29b      	uxth	r3, r3
 800264e:	029b      	lsls	r3, r3, #10
 8002650:	b29a      	uxth	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	b29b      	uxth	r3, r3
 800265e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002666:	827b      	strh	r3, [r7, #18]
 8002668:	8a7b      	ldrh	r3, [r7, #18]
 800266a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800266e:	827b      	strh	r3, [r7, #18]
 8002670:	8a7b      	ldrh	r3, [r7, #18]
 8002672:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002676:	827b      	strh	r3, [r7, #18]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	8a7b      	ldrh	r3, [r7, #18]
 800267e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800268a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268e:	b29b      	uxth	r3, r3
 8002690:	8013      	strh	r3, [r2, #0]
 8002692:	e22c      	b.n	8002aee <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026a8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f280 80f6 	bge.w	800289e <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026c8:	4013      	ands	r3, r2
 80026ca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80026e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026e4:	b292      	uxth	r2, r2
 80026e6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80026e8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4413      	add	r3, r2
 80026fc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80026fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002700:	7b1b      	ldrb	r3, [r3, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d123      	bne.n	800274e <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800270e:	b29b      	uxth	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	4413      	add	r3, r2
 8002720:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800272a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800272e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 808e 	beq.w	8002854 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800273e:	6959      	ldr	r1, [r3, #20]
 8002740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002742:	88da      	ldrh	r2, [r3, #6]
 8002744:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002748:	f005 f84b 	bl	80077e2 <USB_ReadPMA>
 800274c:	e082      	b.n	8002854 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800274e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002750:	78db      	ldrb	r3, [r3, #3]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d10a      	bne.n	800276c <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002756:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800275a:	461a      	mov	r2, r3
 800275c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f9d3 	bl	8002b0a <HAL_PCD_EP_DB_Receive>
 8002764:	4603      	mov	r3, r0
 8002766:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800276a:	e073      	b.n	8002854 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	b29b      	uxth	r3, r3
 800277e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002786:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	441a      	add	r2, r3
 8002798:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800279c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d022      	beq.n	8002810 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80027f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d02c      	beq.n	8002854 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002800:	6959      	ldr	r1, [r3, #20]
 8002802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002804:	891a      	ldrh	r2, [r3, #8]
 8002806:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800280a:	f004 ffea 	bl	80077e2 <USB_ReadPMA>
 800280e:	e021      	b.n	8002854 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002818:	b29b      	uxth	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	4413      	add	r3, r2
 800282a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002834:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002838:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800283c:	2b00      	cmp	r3, #0
 800283e:	d009      	beq.n	8002854 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002846:	6959      	ldr	r1, [r3, #20]
 8002848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284a:	895a      	ldrh	r2, [r3, #10]
 800284c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002850:	f004 ffc7 	bl	80077e2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002856:	69da      	ldr	r2, [r3, #28]
 8002858:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800285c:	441a      	add	r2, r3
 800285e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002860:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800286a:	441a      	add	r2, r3
 800286c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <PCD_EP_ISR_Handler+0x4da>
 8002878:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800287c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	429a      	cmp	r2, r3
 8002882:	d206      	bcs.n	8002892 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	4619      	mov	r1, r3
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f007 f91a 	bl	8009ac4 <HAL_PCD_DataOutStageCallback>
 8002890:	e005      	b.n	800289e <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002898:	4618      	mov	r0, r3
 800289a:	f003 faf0 	bl	8005e7e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800289e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 8121 	beq.w	8002aee <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80028ac:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	441a      	add	r2, r3
 80028ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80028f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80028fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028fe:	78db      	ldrb	r3, [r3, #3]
 8002900:	2b02      	cmp	r3, #2
 8002902:	f000 80a2 	beq.w	8002a4a <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8002906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800290c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290e:	7b1b      	ldrb	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8093 	beq.w	8002a3c <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002916:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d046      	beq.n	80029b0 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002924:	785b      	ldrb	r3, [r3, #1]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d126      	bne.n	8002978 <PCD_EP_ISR_Handler+0x5ce>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002938:	b29b      	uxth	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	4413      	add	r3, r2
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
 8002942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	00da      	lsls	r2, r3, #3
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	4413      	add	r3, r2
 800294c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002950:	623b      	str	r3, [r7, #32]
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800295c:	b29a      	uxth	r2, r3
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	801a      	strh	r2, [r3, #0]
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800296c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002970:	b29a      	uxth	r2, r3
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	801a      	strh	r2, [r3, #0]
 8002976:	e061      	b.n	8002a3c <PCD_EP_ISR_Handler+0x692>
 8002978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800297a:	785b      	ldrb	r3, [r3, #1]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d15d      	bne.n	8002a3c <PCD_EP_ISR_Handler+0x692>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800298e:	b29b      	uxth	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002994:	4413      	add	r3, r2
 8002996:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	00da      	lsls	r2, r3, #3
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	4413      	add	r3, r2
 80029a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029aa:	2200      	movs	r2, #0
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	e045      	b.n	8002a3c <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b8:	785b      	ldrb	r3, [r3, #1]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d126      	bne.n	8002a0c <PCD_EP_ISR_Handler+0x662>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	637b      	str	r3, [r7, #52]	; 0x34
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d2:	4413      	add	r3, r2
 80029d4:	637b      	str	r3, [r7, #52]	; 0x34
 80029d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	00da      	lsls	r2, r3, #3
 80029dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029de:	4413      	add	r3, r2
 80029e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029e4:	633b      	str	r3, [r7, #48]	; 0x30
 80029e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	801a      	strh	r2, [r3, #0]
 80029f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a08:	801a      	strh	r2, [r3, #0]
 8002a0a:	e017      	b.n	8002a3c <PCD_EP_ISR_Handler+0x692>
 8002a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a0e:	785b      	ldrb	r3, [r3, #1]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d113      	bne.n	8002a3c <PCD_EP_ISR_Handler+0x692>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a22:	4413      	add	r3, r2
 8002a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	00da      	lsls	r2, r3, #3
 8002a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2e:	4413      	add	r3, r2
 8002a30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a34:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a38:	2200      	movs	r2, #0
 8002a3a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	4619      	mov	r1, r3
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f007 f859 	bl	8009afa <HAL_PCD_DataInStageCallback>
 8002a48:	e051      	b.n	8002aee <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002a4a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d144      	bne.n	8002ae0 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d907      	bls.n	8002a9a <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a92:	1ad2      	subs	r2, r2, r3
 8002a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a96:	619a      	str	r2, [r3, #24]
 8002a98:	e002      	b.n	8002aa0 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	4619      	mov	r1, r3
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f007 f823 	bl	8009afa <HAL_PCD_DataInStageCallback>
 8002ab4:	e01b      	b.n	8002aee <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002abe:	441a      	add	r2, r3
 8002ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac6:	69da      	ldr	r2, [r3, #28]
 8002ac8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002acc:	441a      	add	r2, r3
 8002ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 f9d0 	bl	8005e7e <USB_EPStartXfer>
 8002ade:	e006      	b.n	8002aee <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ae0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f917 	bl	8002d1c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	b21b      	sxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f6ff ac5a 	blt.w	80023b4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3758      	adds	r7, #88	; 0x58
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b088      	sub	sp, #32
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	4613      	mov	r3, r2
 8002b16:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d07c      	beq.n	8002c1c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b46:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	699a      	ldr	r2, [r3, #24]
 8002b4c:	8b7b      	ldrh	r3, [r7, #26]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d306      	bcc.n	8002b60 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	8b7b      	ldrh	r3, [r7, #26]
 8002b58:	1ad2      	subs	r2, r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	619a      	str	r2, [r3, #24]
 8002b5e:	e002      	b.n	8002b66 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2200      	movs	r2, #0
 8002b64:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d123      	bne.n	8002bb6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b88:	833b      	strh	r3, [r7, #24]
 8002b8a:	8b3b      	ldrh	r3, [r7, #24]
 8002b8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b90:	833b      	strh	r3, [r7, #24]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	441a      	add	r2, r3
 8002ba0:	8b3b      	ldrh	r3, [r7, #24]
 8002ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bb6:	88fb      	ldrh	r3, [r7, #6]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d01f      	beq.n	8002c00 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bda:	82fb      	strh	r3, [r7, #22]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	441a      	add	r2, r3
 8002bea:	8afb      	ldrh	r3, [r7, #22]
 8002bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c00:	8b7b      	ldrh	r3, [r7, #26]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 8085 	beq.w	8002d12 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	6959      	ldr	r1, [r3, #20]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	891a      	ldrh	r2, [r3, #8]
 8002c14:	8b7b      	ldrh	r3, [r7, #26]
 8002c16:	f004 fde4 	bl	80077e2 <USB_ReadPMA>
 8002c1a:	e07a      	b.n	8002d12 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4413      	add	r3, r2
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	4413      	add	r3, r2
 8002c36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c40:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	8b7b      	ldrh	r3, [r7, #26]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d306      	bcc.n	8002c5a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	699a      	ldr	r2, [r3, #24]
 8002c50:	8b7b      	ldrh	r3, [r7, #26]
 8002c52:	1ad2      	subs	r2, r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	619a      	str	r2, [r3, #24]
 8002c58:	e002      	b.n	8002c60 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d123      	bne.n	8002cb0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c82:	83fb      	strh	r3, [r7, #30]
 8002c84:	8bfb      	ldrh	r3, [r7, #30]
 8002c86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c8a:	83fb      	strh	r3, [r7, #30]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	441a      	add	r2, r3
 8002c9a:	8bfb      	ldrh	r3, [r7, #30]
 8002c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d11f      	bne.n	8002cfa <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd4:	83bb      	strh	r3, [r7, #28]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	441a      	add	r2, r3
 8002ce4:	8bbb      	ldrh	r3, [r7, #28]
 8002ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002cfa:	8b7b      	ldrh	r3, [r7, #26]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	6959      	ldr	r1, [r3, #20]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	895a      	ldrh	r2, [r3, #10]
 8002d0c:	8b7b      	ldrh	r3, [r7, #26]
 8002d0e:	f004 fd68 	bl	80077e2 <USB_ReadPMA>
    }
  }

  return count;
 8002d12:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3720      	adds	r7, #32
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b0a2      	sub	sp, #136	; 0x88
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	4613      	mov	r3, r2
 8002d28:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 81c5 	beq.w	80030c0 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d907      	bls.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d72:	1ad2      	subs	r2, r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	619a      	str	r2, [r3, #24]
 8002d78:	e002      	b.n	8002d80 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f040 80b9 	bne.w	8002efc <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	785b      	ldrb	r3, [r3, #1]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d126      	bne.n	8002de0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	4413      	add	r3, r2
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	00da      	lsls	r2, r3, #3
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	4413      	add	r3, r2
 8002db4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	801a      	strh	r2, [r3, #0]
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	801a      	strh	r2, [r3, #0]
 8002dde:	e01a      	b.n	8002e16 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	785b      	ldrb	r3, [r3, #1]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d116      	bne.n	8002e16 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	633b      	str	r3, [r7, #48]	; 0x30
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	4413      	add	r3, r2
 8002dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	00da      	lsls	r2, r3, #3
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	4413      	add	r3, r2
 8002e0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e12:	2200      	movs	r2, #0
 8002e14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	623b      	str	r3, [r7, #32]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	785b      	ldrb	r3, [r3, #1]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d126      	bne.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x156>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	4413      	add	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	00da      	lsls	r2, r3, #3
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	4413      	add	r3, r2
 8002e46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	801a      	strh	r2, [r3, #0]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	801a      	strh	r2, [r3, #0]
 8002e70:	e017      	b.n	8002ea2 <HAL_PCD_EP_DB_Transmit+0x186>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	785b      	ldrb	r3, [r3, #1]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d113      	bne.n	8002ea2 <HAL_PCD_EP_DB_Transmit+0x186>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	4413      	add	r3, r2
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	00da      	lsls	r2, r3, #3
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	4413      	add	r3, r2
 8002e96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f006 fe26 	bl	8009afa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 82d2 	beq.w	800345e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed4:	827b      	strh	r3, [r7, #18]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	441a      	add	r2, r3
 8002ee4:	8a7b      	ldrh	r3, [r7, #18]
 8002ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	8013      	strh	r3, [r2, #0]
 8002efa:	e2b0      	b.n	800345e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d021      	beq.n	8002f4a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	441a      	add	r2, r3
 8002f32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	f040 8284 	bne.w	800345e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f5e:	441a      	add	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f6c:	441a      	add	r2, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	6a1a      	ldr	r2, [r3, #32]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d309      	bcc.n	8002f92 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	6a1a      	ldr	r2, [r3, #32]
 8002f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f8a:	1ad2      	subs	r2, r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	621a      	str	r2, [r3, #32]
 8002f90:	e015      	b.n	8002fbe <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d107      	bne.n	8002faa <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002f9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f9e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fa8:	e009      	b.n	8002fbe <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	785b      	ldrb	r3, [r3, #1]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d155      	bne.n	8003072 <HAL_PCD_EP_DB_Transmit+0x356>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fda:	4413      	add	r3, r2
 8002fdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	00da      	lsls	r2, r3, #3
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fec:	637b      	str	r3, [r7, #52]	; 0x34
 8002fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff0:	2b3e      	cmp	r3, #62	; 0x3e
 8002ff2:	d916      	bls.n	8003022 <HAL_PCD_EP_DB_Transmit+0x306>
 8002ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003006:	3b01      	subs	r3, #1
 8003008:	64bb      	str	r3, [r7, #72]	; 0x48
 800300a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800300c:	b29b      	uxth	r3, r3
 800300e:	029b      	lsls	r3, r3, #10
 8003010:	b29b      	uxth	r3, r3
 8003012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800301a:	b29a      	uxth	r2, r3
 800301c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301e:	801a      	strh	r2, [r3, #0]
 8003020:	e043      	b.n	80030aa <HAL_PCD_EP_DB_Transmit+0x38e>
 8003022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003024:	2b00      	cmp	r3, #0
 8003026:	d112      	bne.n	800304e <HAL_PCD_EP_DB_Transmit+0x332>
 8003028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	b29b      	uxth	r3, r3
 800302e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003032:	b29a      	uxth	r2, r3
 8003034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003036:	801a      	strh	r2, [r3, #0]
 8003038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	b29b      	uxth	r3, r3
 800303e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003046:	b29a      	uxth	r2, r3
 8003048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304a:	801a      	strh	r2, [r3, #0]
 800304c:	e02d      	b.n	80030aa <HAL_PCD_EP_DB_Transmit+0x38e>
 800304e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003050:	085b      	lsrs	r3, r3, #1
 8003052:	64bb      	str	r3, [r7, #72]	; 0x48
 8003054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_PCD_EP_DB_Transmit+0x348>
 800305e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003060:	3301      	adds	r3, #1
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48
 8003064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003066:	b29b      	uxth	r3, r3
 8003068:	029b      	lsls	r3, r3, #10
 800306a:	b29a      	uxth	r2, r3
 800306c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306e:	801a      	strh	r2, [r3, #0]
 8003070:	e01b      	b.n	80030aa <HAL_PCD_EP_DB_Transmit+0x38e>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	785b      	ldrb	r3, [r3, #1]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d117      	bne.n	80030aa <HAL_PCD_EP_DB_Transmit+0x38e>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	643b      	str	r3, [r7, #64]	; 0x40
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003088:	b29b      	uxth	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308e:	4413      	add	r3, r2
 8003090:	643b      	str	r3, [r7, #64]	; 0x40
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	00da      	lsls	r2, r3, #3
 8003098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800309a:	4413      	add	r3, r2
 800309c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	6959      	ldr	r1, [r3, #20]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	891a      	ldrh	r2, [r3, #8]
 80030b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f004 fb50 	bl	800775e <USB_WritePMA>
 80030be:	e1ce      	b.n	800345e <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	4413      	add	r3, r2
 80030da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	699a      	ldr	r2, [r3, #24]
 80030ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d307      	bcc.n	8003104 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	699a      	ldr	r2, [r3, #24]
 80030f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030fc:	1ad2      	subs	r2, r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	619a      	str	r2, [r3, #24]
 8003102:	e002      	b.n	800310a <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2200      	movs	r2, #0
 8003108:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f040 80c4 	bne.w	800329c <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	785b      	ldrb	r3, [r3, #1]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d126      	bne.n	800316a <HAL_PCD_EP_DB_Transmit+0x44e>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	66bb      	str	r3, [r7, #104]	; 0x68
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800312a:	b29b      	uxth	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003130:	4413      	add	r3, r2
 8003132:	66bb      	str	r3, [r7, #104]	; 0x68
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	00da      	lsls	r2, r3, #3
 800313a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800313c:	4413      	add	r3, r2
 800313e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003142:	667b      	str	r3, [r7, #100]	; 0x64
 8003144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	b29b      	uxth	r3, r3
 800314a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800314e:	b29a      	uxth	r2, r3
 8003150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003152:	801a      	strh	r2, [r3, #0]
 8003154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	b29b      	uxth	r3, r3
 800315a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800315e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003162:	b29a      	uxth	r2, r3
 8003164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003166:	801a      	strh	r2, [r3, #0]
 8003168:	e01a      	b.n	80031a0 <HAL_PCD_EP_DB_Transmit+0x484>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	785b      	ldrb	r3, [r3, #1]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d116      	bne.n	80031a0 <HAL_PCD_EP_DB_Transmit+0x484>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	673b      	str	r3, [r7, #112]	; 0x70
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003180:	b29b      	uxth	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003186:	4413      	add	r3, r2
 8003188:	673b      	str	r3, [r7, #112]	; 0x70
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	00da      	lsls	r2, r3, #3
 8003190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003192:	4413      	add	r3, r2
 8003194:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003198:	66fb      	str	r3, [r7, #108]	; 0x6c
 800319a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800319c:	2200      	movs	r2, #0
 800319e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	785b      	ldrb	r3, [r3, #1]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d12f      	bne.n	800320e <HAL_PCD_EP_DB_Transmit+0x4f2>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031be:	b29b      	uxth	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031c6:	4413      	add	r3, r2
 80031c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	00da      	lsls	r2, r3, #3
 80031d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031d6:	4413      	add	r3, r2
 80031d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f2:	801a      	strh	r2, [r3, #0]
 80031f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003204:	b29a      	uxth	r2, r3
 8003206:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800320a:	801a      	strh	r2, [r3, #0]
 800320c:	e017      	b.n	800323e <HAL_PCD_EP_DB_Transmit+0x522>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	785b      	ldrb	r3, [r3, #1]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d113      	bne.n	800323e <HAL_PCD_EP_DB_Transmit+0x522>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800321e:	b29b      	uxth	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003224:	4413      	add	r3, r2
 8003226:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	00da      	lsls	r2, r3, #3
 800322e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003230:	4413      	add	r3, r2
 8003232:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003236:	67bb      	str	r3, [r7, #120]	; 0x78
 8003238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800323a:	2200      	movs	r2, #0
 800323c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	4619      	mov	r1, r3
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f006 fc58 	bl	8009afa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003250:	2b00      	cmp	r3, #0
 8003252:	f040 8104 	bne.w	800345e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003270:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	441a      	add	r2, r3
 8003282:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800328a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800328e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003296:	b29b      	uxth	r3, r3
 8003298:	8013      	strh	r3, [r2, #0]
 800329a:	e0e0      	b.n	800345e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d121      	bne.n	80032ea <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	441a      	add	r2, r3
 80032d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80032d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	f040 80b4 	bne.w	800345e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032fe:	441a      	add	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	69da      	ldr	r2, [r3, #28]
 8003308:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800330c:	441a      	add	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	6a1a      	ldr	r2, [r3, #32]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	429a      	cmp	r2, r3
 800331c:	d309      	bcc.n	8003332 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	6a1a      	ldr	r2, [r3, #32]
 8003328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800332a:	1ad2      	subs	r2, r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	621a      	str	r2, [r3, #32]
 8003330:	e015      	b.n	800335e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d107      	bne.n	800334a <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800333a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800333e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003348:	e009      	b.n	800335e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2200      	movs	r2, #0
 8003354:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	663b      	str	r3, [r7, #96]	; 0x60
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	785b      	ldrb	r3, [r3, #1]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d155      	bne.n	8003418 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	65bb      	str	r3, [r7, #88]	; 0x58
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800337a:	b29b      	uxth	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003380:	4413      	add	r3, r2
 8003382:	65bb      	str	r3, [r7, #88]	; 0x58
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	00da      	lsls	r2, r3, #3
 800338a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800338c:	4413      	add	r3, r2
 800338e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003392:	657b      	str	r3, [r7, #84]	; 0x54
 8003394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003396:	2b3e      	cmp	r3, #62	; 0x3e
 8003398:	d916      	bls.n	80033c8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800339a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	677b      	str	r3, [r7, #116]	; 0x74
 80033a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d102      	bne.n	80033b0 <HAL_PCD_EP_DB_Transmit+0x694>
 80033aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ac:	3b01      	subs	r3, #1
 80033ae:	677b      	str	r3, [r7, #116]	; 0x74
 80033b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	029b      	lsls	r3, r3, #10
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c4:	801a      	strh	r2, [r3, #0]
 80033c6:	e040      	b.n	800344a <HAL_PCD_EP_DB_Transmit+0x72e>
 80033c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d112      	bne.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x6d8>
 80033ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033d8:	b29a      	uxth	r2, r3
 80033da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033dc:	801a      	strh	r2, [r3, #0]
 80033de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f0:	801a      	strh	r2, [r3, #0]
 80033f2:	e02a      	b.n	800344a <HAL_PCD_EP_DB_Transmit+0x72e>
 80033f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	677b      	str	r3, [r7, #116]	; 0x74
 80033fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003406:	3301      	adds	r3, #1
 8003408:	677b      	str	r3, [r7, #116]	; 0x74
 800340a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800340c:	b29b      	uxth	r3, r3
 800340e:	029b      	lsls	r3, r3, #10
 8003410:	b29a      	uxth	r2, r3
 8003412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003414:	801a      	strh	r2, [r3, #0]
 8003416:	e018      	b.n	800344a <HAL_PCD_EP_DB_Transmit+0x72e>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	785b      	ldrb	r3, [r3, #1]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d114      	bne.n	800344a <HAL_PCD_EP_DB_Transmit+0x72e>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003428:	b29b      	uxth	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800342e:	4413      	add	r3, r2
 8003430:	663b      	str	r3, [r7, #96]	; 0x60
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	00da      	lsls	r2, r3, #3
 8003438:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800343a:	4413      	add	r3, r2
 800343c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003440:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003444:	b29a      	uxth	r2, r3
 8003446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003448:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	6959      	ldr	r1, [r3, #20]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	895a      	ldrh	r2, [r3, #10]
 8003456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003458:	b29b      	uxth	r3, r3
 800345a:	f004 f980 	bl	800775e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	b29b      	uxth	r3, r3
 8003470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003478:	823b      	strh	r3, [r7, #16]
 800347a:	8a3b      	ldrh	r3, [r7, #16]
 800347c:	f083 0310 	eor.w	r3, r3, #16
 8003480:	823b      	strh	r3, [r7, #16]
 8003482:	8a3b      	ldrh	r3, [r7, #16]
 8003484:	f083 0320 	eor.w	r3, r3, #32
 8003488:	823b      	strh	r3, [r7, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	441a      	add	r2, r3
 8003498:	8a3b      	ldrh	r3, [r7, #16]
 800349a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800349e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3788      	adds	r7, #136	; 0x88
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	817b      	strh	r3, [r7, #10]
 80034c6:	4613      	mov	r3, r2
 80034c8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80034ca:	897b      	ldrh	r3, [r7, #10]
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034d6:	897b      	ldrh	r3, [r7, #10]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4413      	add	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	e009      	b.n	8003502 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034ee:	897a      	ldrh	r2, [r7, #10]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003502:	893b      	ldrh	r3, [r7, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d107      	bne.n	8003518 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2200      	movs	r2, #0
 800350c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	b29a      	uxth	r2, r3
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	80da      	strh	r2, [r3, #6]
 8003516:	e00b      	b.n	8003530 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2201      	movs	r2, #1
 800351c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	b29a      	uxth	r2, r3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	b29a      	uxth	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800353e:	b480      	push	{r7}
 8003540:	b085      	sub	sp, #20
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003562:	b29b      	uxth	r3, r3
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003576:	b29b      	uxth	r3, r3
 8003578:	f043 0302 	orr.w	r3, r3, #2
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800359e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a2:	6013      	str	r3, [r2, #0]
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	58000400 	.word	0x58000400

080035b4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035b8:	4b04      	ldr	r3, [pc, #16]	; (80035cc <HAL_PWREx_GetVoltageRange+0x18>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	58000400 	.word	0x58000400

080035d0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	4a04      	ldr	r2, [pc, #16]	; (80035ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80035da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035de:	6053      	str	r3, [r2, #4]
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	58000400 	.word	0x58000400

080035f0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80035f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003602:	d101      	bne.n	8003608 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <LL_RCC_HSE_Enable>:
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003626:	6013      	str	r3, [r2, #0]
}
 8003628:	bf00      	nop
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <LL_RCC_HSE_Disable>:
{
 8003632:	b480      	push	{r7}
 8003634:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003644:	6013      	str	r3, [r2, #0]
}
 8003646:	bf00      	nop
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <LL_RCC_HSE_IsReady>:
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003662:	d101      	bne.n	8003668 <LL_RCC_HSE_IsReady+0x18>
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <LL_RCC_HSE_IsReady+0x1a>
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <LL_RCC_HSI_Enable>:
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003686:	6013      	str	r3, [r2, #0]
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <LL_RCC_HSI_Disable>:
{
 8003692:	b480      	push	{r7}
 8003694:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a4:	6013      	str	r3, [r2, #0]
}
 80036a6:	bf00      	nop
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <LL_RCC_HSI_IsReady>:
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80036b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c2:	d101      	bne.n	80036c8 <LL_RCC_HSI_IsReady+0x18>
 80036c4:	2301      	movs	r3, #1
 80036c6:	e000      	b.n	80036ca <LL_RCC_HSI_IsReady+0x1a>
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80036dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	061b      	lsls	r3, r3, #24
 80036ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <LL_RCC_HSI48_Enable>:
{
 80036fe:	b480      	push	{r7}
 8003700:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800370a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003716:	bf00      	nop
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <LL_RCC_HSI48_Disable>:
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003728:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800372c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <LL_RCC_HSI48_IsReady>:
{
 8003742:	b480      	push	{r7}
 8003744:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b02      	cmp	r3, #2
 8003754:	d101      	bne.n	800375a <LL_RCC_HSI48_IsReady+0x18>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <LL_RCC_HSI48_IsReady+0x1a>
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <LL_RCC_LSE_Enable>:
{
 8003766:	b480      	push	{r7}
 8003768:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800376a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003772:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800377e:	bf00      	nop
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <LL_RCC_LSE_Disable>:
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800378c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003794:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <LL_RCC_LSE_EnableBypass>:
{
 80037aa:	b480      	push	{r7}
 80037ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037ba:	f043 0304 	orr.w	r3, r3, #4
 80037be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037c2:	bf00      	nop
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <LL_RCC_LSE_DisableBypass>:
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037dc:	f023 0304 	bic.w	r3, r3, #4
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037e4:	bf00      	nop
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <LL_RCC_LSE_IsReady>:
{
 80037ee:	b480      	push	{r7}
 80037f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80037f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d101      	bne.n	8003806 <LL_RCC_LSE_IsReady+0x18>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <LL_RCC_LSE_IsReady+0x1a>
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <LL_RCC_LSI1_Enable>:
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800382a:	bf00      	nop
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <LL_RCC_LSI1_Disable>:
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003840:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <LL_RCC_LSI1_IsReady>:
{
 8003856:	b480      	push	{r7}
 8003858:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800385a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b02      	cmp	r3, #2
 8003868:	d101      	bne.n	800386e <LL_RCC_LSI1_IsReady+0x18>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <LL_RCC_LSI1_IsReady+0x1a>
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <LL_RCC_LSI2_Enable>:
{
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800387e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003886:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800388a:	f043 0304 	orr.w	r3, r3, #4
 800388e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003892:	bf00      	nop
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <LL_RCC_LSI2_Disable>:
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80038a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ac:	f023 0304 	bic.w	r3, r3, #4
 80038b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <LL_RCC_LSI2_IsReady>:
{
 80038be:	b480      	push	{r7}
 80038c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80038c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d101      	bne.n	80038d6 <LL_RCC_LSI2_IsReady+0x18>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <LL_RCC_LSI2_IsReady+0x1a>
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <LL_RCC_LSI2_SetTrimming>:
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80038ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <LL_RCC_MSI_Enable>:
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	6013      	str	r3, [r2, #0]
}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <LL_RCC_MSI_Disable>:
{
 800392e:	b480      	push	{r7}
 8003930:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800393c:	f023 0301 	bic.w	r3, r3, #1
 8003940:	6013      	str	r3, [r2, #0]
}
 8003942:	bf00      	nop
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_RCC_MSI_IsReady>:
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b02      	cmp	r3, #2
 800395c:	d101      	bne.n	8003962 <LL_RCC_MSI_IsReady+0x16>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <LL_RCC_MSI_IsReady+0x18>
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <LL_RCC_MSI_SetRange>:
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <LL_RCC_MSI_GetRange>:
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800399c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2bb0      	cmp	r3, #176	; 0xb0
 80039ac:	d901      	bls.n	80039b2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80039ae:	23b0      	movs	r3, #176	; 0xb0
 80039b0:	607b      	str	r3, [r7, #4]
  return msiRange;
 80039b2:	687b      	ldr	r3, [r7, #4]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80039c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039da:	4313      	orrs	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <LL_RCC_SetSysClkSource>:
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80039f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f023 0203 	bic.w	r2, r3, #3
 80039fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <LL_RCC_GetSysClkSource>:
{
 8003a12:	b480      	push	{r7}
 8003a14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <LL_RCC_SetAHBPrescaler>:
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <LL_RCC_SetAHB4Prescaler>:
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a8e:	f023 020f 	bic.w	r2, r3, #15
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_RCC_SetAPB1Prescaler>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	608b      	str	r3, [r1, #8]
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_RCC_SetAPB2Prescaler>:
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ae6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	608b      	str	r3, [r1, #8]
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <LL_RCC_GetAHBPrescaler>:
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <LL_RCC_GetAHB4Prescaler>:
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <LL_RCC_PLL_Enable>:
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b42:	6013      	str	r3, [r2, #0]
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <LL_RCC_PLL_Disable>:
{
 8003b4e:	b480      	push	{r7}
 8003b50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b60:	6013      	str	r3, [r2, #0]
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <LL_RCC_PLL_IsReady>:
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b7e:	d101      	bne.n	8003b84 <LL_RCC_PLL_IsReady+0x18>
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <LL_RCC_PLL_IsReady+0x1a>
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <LL_RCC_PLL_GetN>:
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	0a1b      	lsrs	r3, r3, #8
 8003b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <LL_RCC_PLL_GetR>:
{
 8003baa:	b480      	push	{r7}
 8003bac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <LL_RCC_PLL_GetDivider>:
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <LL_RCC_PLL_GetMainSource>:
{
 8003bda:	b480      	push	{r7}
 8003bdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f003 0303 	and.w	r3, r3, #3
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <LL_RCC_IsActiveFlag_HPRE>:
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c04:	d101      	bne.n	8003c0a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8003c16:	b480      	push	{r7}
 8003c18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c2a:	d101      	bne.n	8003c30 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c44:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c50:	d101      	bne.n	8003c56 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8003c62:	b480      	push	{r7}
 8003c64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c74:	d101      	bne.n	8003c7a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8003c86:	b480      	push	{r7}
 8003c88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c98:	d101      	bne.n	8003c9e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cac:	b590      	push	{r4, r7, lr}
 8003cae:	b08d      	sub	sp, #52	; 0x34
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e37f      	b.n	80043be <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 8092 	beq.w	8003df0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ccc:	f7ff fea1 	bl	8003a12 <LL_RCC_GetSysClkSource>
 8003cd0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd2:	f7ff ff82 	bl	8003bda <LL_RCC_PLL_GetMainSource>
 8003cd6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_RCC_OscConfig+0x3e>
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	2b0c      	cmp	r3, #12
 8003ce2:	d14c      	bne.n	8003d7e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d149      	bne.n	8003d7e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cea:	f7ff fe2f 	bl	800394c <LL_RCC_MSI_IsReady>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_OscConfig+0x54>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e35e      	b.n	80043be <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003d04:	f7ff fe47 	bl	8003996 <LL_RCC_MSI_GetRange>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	429c      	cmp	r4, r3
 8003d0c:	d914      	bls.n	8003d38 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fd18 	bl	8004748 <RCC_SetFlashLatencyFromMSIRange>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e34d      	b.n	80043be <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff fe21 	bl	800396e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fe45 	bl	80039c0 <LL_RCC_MSI_SetCalibTrimming>
 8003d36:	e013      	b.n	8003d60 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fe16 	bl	800396e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff fe3a 	bl	80039c0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fcf9 	bl	8004748 <RCC_SetFlashLatencyFromMSIRange>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e32e      	b.n	80043be <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003d60:	f000 fcde 	bl	8004720 <HAL_RCC_GetHCLKFreq>
 8003d64:	4603      	mov	r3, r0
 8003d66:	4aa5      	ldr	r2, [pc, #660]	; (8003ffc <HAL_RCC_OscConfig+0x350>)
 8003d68:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d6a:	4ba5      	ldr	r3, [pc, #660]	; (8004000 <HAL_RCC_OscConfig+0x354>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fd fb30 	bl	80013d4 <HAL_InitTick>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d039      	beq.n	8003dee <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e31f      	b.n	80043be <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d01e      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d86:	f7ff fdc3 	bl	8003910 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d8a:	f7fd fb71 	bl	8001470 <HAL_GetTick>
 8003d8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d92:	f7fd fb6d 	bl	8001470 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e30c      	b.n	80043be <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003da4:	f7ff fdd2 	bl	800394c <LL_RCC_MSI_IsReady>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f1      	beq.n	8003d92 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fddb 	bl	800396e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fdff 	bl	80039c0 <LL_RCC_MSI_SetCalibTrimming>
 8003dc2:	e015      	b.n	8003df0 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dc4:	f7ff fdb3 	bl	800392e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dc8:	f7fd fb52 	bl	8001470 <HAL_GetTick>
 8003dcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dd0:	f7fd fb4e 	bl	8001470 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e2ed      	b.n	80043be <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003de2:	f7ff fdb3 	bl	800394c <LL_RCC_MSI_IsReady>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f1      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x124>
 8003dec:	e000      	b.n	8003df0 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dee:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d04e      	beq.n	8003e9a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dfc:	f7ff fe09 	bl	8003a12 <LL_RCC_GetSysClkSource>
 8003e00:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e02:	f7ff feea 	bl	8003bda <LL_RCC_PLL_GetMainSource>
 8003e06:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d005      	beq.n	8003e1a <HAL_RCC_OscConfig+0x16e>
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	2b0c      	cmp	r3, #12
 8003e12:	d10d      	bne.n	8003e30 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2b03      	cmp	r3, #3
 8003e18:	d10a      	bne.n	8003e30 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e1a:	f7ff fc19 	bl	8003650 <LL_RCC_HSE_IsReady>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d039      	beq.n	8003e98 <HAL_RCC_OscConfig+0x1ec>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d135      	bne.n	8003e98 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e2c6      	b.n	80043be <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e38:	d102      	bne.n	8003e40 <HAL_RCC_OscConfig+0x194>
 8003e3a:	f7ff fbeb 	bl	8003614 <LL_RCC_HSE_Enable>
 8003e3e:	e001      	b.n	8003e44 <HAL_RCC_OscConfig+0x198>
 8003e40:	f7ff fbf7 	bl	8003632 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d012      	beq.n	8003e72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fd fb10 	bl	8001470 <HAL_GetTick>
 8003e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e54:	f7fd fb0c 	bl	8001470 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	; 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e2ab      	b.n	80043be <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e66:	f7ff fbf3 	bl	8003650 <LL_RCC_HSE_IsReady>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f1      	beq.n	8003e54 <HAL_RCC_OscConfig+0x1a8>
 8003e70:	e013      	b.n	8003e9a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e72:	f7fd fafd 	bl	8001470 <HAL_GetTick>
 8003e76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e7a:	f7fd faf9 	bl	8001470 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b64      	cmp	r3, #100	; 0x64
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e298      	b.n	80043be <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003e8c:	f7ff fbe0 	bl	8003650 <LL_RCC_HSE_IsReady>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f1      	bne.n	8003e7a <HAL_RCC_OscConfig+0x1ce>
 8003e96:	e000      	b.n	8003e9a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e98:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d051      	beq.n	8003f4a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ea6:	f7ff fdb4 	bl	8003a12 <LL_RCC_GetSysClkSource>
 8003eaa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eac:	f7ff fe95 	bl	8003bda <LL_RCC_PLL_GetMainSource>
 8003eb0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x218>
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b0c      	cmp	r3, #12
 8003ebc:	d113      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d110      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ec4:	f7ff fbf4 	bl	80036b0 <LL_RCC_HSI_IsReady>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <HAL_RCC_OscConfig+0x22e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e271      	b.n	80043be <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff fbf8 	bl	80036d4 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ee4:	e031      	b.n	8003f4a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d019      	beq.n	8003f22 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eee:	f7ff fbc1 	bl	8003674 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fd fabd 	bl	8001470 <HAL_GetTick>
 8003ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003efa:	f7fd fab9 	bl	8001470 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e258      	b.n	80043be <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f0c:	f7ff fbd0 	bl	80036b0 <LL_RCC_HSI_IsReady>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f1      	beq.n	8003efa <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff fbda 	bl	80036d4 <LL_RCC_HSI_SetCalibTrimming>
 8003f20:	e013      	b.n	8003f4a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f22:	f7ff fbb6 	bl	8003692 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f26:	f7fd faa3 	bl	8001470 <HAL_GetTick>
 8003f2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f2e:	f7fd fa9f 	bl	8001470 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e23e      	b.n	80043be <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f40:	f7ff fbb6 	bl	80036b0 <LL_RCC_HSI_IsReady>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f1      	bne.n	8003f2e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80a4 	beq.w	80040ac <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d077      	beq.n	800405c <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d04b      	beq.n	8004010 <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003f78:	f7ff fc6d 	bl	8003856 <LL_RCC_LSI1_IsReady>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d113      	bne.n	8003faa <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003f82:	f7ff fc46 	bl	8003812 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f86:	f7fd fa73 	bl	8001470 <HAL_GetTick>
 8003f8a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003f8e:	f7fd fa6f 	bl	8001470 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e20e      	b.n	80043be <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003fa0:	f7ff fc59 	bl	8003856 <LL_RCC_LSI1_IsReady>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f1      	beq.n	8003f8e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003faa:	f7ff fc66 	bl	800387a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fae:	f7fd fa5f 	bl	8001470 <HAL_GetTick>
 8003fb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003fb6:	f7fd fa5b 	bl	8001470 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e1fa      	b.n	80043be <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003fc8:	f7ff fc79 	bl	80038be <LL_RCC_LSI2_IsReady>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f1      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fc83 	bl	80038e2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003fdc:	f7ff fc2a 	bl	8003834 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fd fa46 	bl	8001470 <HAL_GetTick>
 8003fe4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003fe6:	e00d      	b.n	8004004 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003fe8:	f7fd fa42 	bl	8001470 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d906      	bls.n	8004004 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e1e1      	b.n	80043be <HAL_RCC_OscConfig+0x712>
 8003ffa:	bf00      	nop
 8003ffc:	20000004 	.word	0x20000004
 8004000:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004004:	f7ff fc27 	bl	8003856 <LL_RCC_LSI1_IsReady>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1ec      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x33c>
 800400e:	e04d      	b.n	80040ac <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004010:	f7ff fbff 	bl	8003812 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fd fa2c 	bl	8001470 <HAL_GetTick>
 8004018:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800401c:	f7fd fa28 	bl	8001470 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e1c7      	b.n	80043be <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800402e:	f7ff fc12 	bl	8003856 <LL_RCC_LSI1_IsReady>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f1      	beq.n	800401c <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004038:	f7ff fc30 	bl	800389c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800403e:	f7fd fa17 	bl	8001470 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b03      	cmp	r3, #3
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e1b6      	b.n	80043be <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004050:	f7ff fc35 	bl	80038be <LL_RCC_LSI2_IsReady>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f1      	bne.n	800403e <HAL_RCC_OscConfig+0x392>
 800405a:	e027      	b.n	80040ac <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800405c:	f7ff fc1e 	bl	800389c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004060:	f7fd fa06 	bl	8001470 <HAL_GetTick>
 8004064:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004068:	f7fd fa02 	bl	8001470 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b03      	cmp	r3, #3
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e1a1      	b.n	80043be <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800407a:	f7ff fc20 	bl	80038be <LL_RCC_LSI2_IsReady>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f1      	bne.n	8004068 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004084:	f7ff fbd6 	bl	8003834 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004088:	f7fd f9f2 	bl	8001470 <HAL_GetTick>
 800408c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004090:	f7fd f9ee 	bl	8001470 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e18d      	b.n	80043be <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80040a2:	f7ff fbd8 	bl	8003856 <LL_RCC_LSI1_IsReady>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1f1      	bne.n	8004090 <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d05b      	beq.n	8004170 <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040b8:	4ba7      	ldr	r3, [pc, #668]	; (8004358 <HAL_RCC_OscConfig+0x6ac>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d114      	bne.n	80040ee <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80040c4:	f7ff fa66 	bl	8003594 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c8:	f7fd f9d2 	bl	8001470 <HAL_GetTick>
 80040cc:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d0:	f7fd f9ce 	bl	8001470 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e16d      	b.n	80043be <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e2:	4b9d      	ldr	r3, [pc, #628]	; (8004358 <HAL_RCC_OscConfig+0x6ac>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d102      	bne.n	80040fc <HAL_RCC_OscConfig+0x450>
 80040f6:	f7ff fb36 	bl	8003766 <LL_RCC_LSE_Enable>
 80040fa:	e00c      	b.n	8004116 <HAL_RCC_OscConfig+0x46a>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b05      	cmp	r3, #5
 8004102:	d104      	bne.n	800410e <HAL_RCC_OscConfig+0x462>
 8004104:	f7ff fb51 	bl	80037aa <LL_RCC_LSE_EnableBypass>
 8004108:	f7ff fb2d 	bl	8003766 <LL_RCC_LSE_Enable>
 800410c:	e003      	b.n	8004116 <HAL_RCC_OscConfig+0x46a>
 800410e:	f7ff fb3b 	bl	8003788 <LL_RCC_LSE_Disable>
 8004112:	f7ff fb5b 	bl	80037cc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d014      	beq.n	8004148 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411e:	f7fd f9a7 	bl	8001470 <HAL_GetTick>
 8004122:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004124:	e00a      	b.n	800413c <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004126:	f7fd f9a3 	bl	8001470 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	f241 3288 	movw	r2, #5000	; 0x1388
 8004134:	4293      	cmp	r3, r2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e140      	b.n	80043be <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 800413c:	f7ff fb57 	bl	80037ee <LL_RCC_LSE_IsReady>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0ef      	beq.n	8004126 <HAL_RCC_OscConfig+0x47a>
 8004146:	e013      	b.n	8004170 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004148:	f7fd f992 	bl	8001470 <HAL_GetTick>
 800414c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800414e:	e00a      	b.n	8004166 <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004150:	f7fd f98e 	bl	8001470 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	f241 3288 	movw	r2, #5000	; 0x1388
 800415e:	4293      	cmp	r3, r2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e12b      	b.n	80043be <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004166:	f7ff fb42 	bl	80037ee <LL_RCC_LSE_IsReady>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1ef      	bne.n	8004150 <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d02c      	beq.n	80041d6 <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	2b00      	cmp	r3, #0
 8004182:	d014      	beq.n	80041ae <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004184:	f7ff fabb 	bl	80036fe <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004188:	f7fd f972 	bl	8001470 <HAL_GetTick>
 800418c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004190:	f7fd f96e 	bl	8001470 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e10d      	b.n	80043be <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80041a2:	f7ff face 	bl	8003742 <LL_RCC_HSI48_IsReady>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f1      	beq.n	8004190 <HAL_RCC_OscConfig+0x4e4>
 80041ac:	e013      	b.n	80041d6 <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041ae:	f7ff fab7 	bl	8003720 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b2:	f7fd f95d 	bl	8001470 <HAL_GetTick>
 80041b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ba:	f7fd f959 	bl	8001470 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e0f8      	b.n	80043be <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80041cc:	f7ff fab9 	bl	8003742 <LL_RCC_HSI48_IsReady>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f1      	bne.n	80041ba <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80ee 	beq.w	80043bc <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041e0:	f7ff fc17 	bl	8003a12 <LL_RCC_GetSysClkSource>
 80041e4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80041e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	f040 80b4 	bne.w	8004360 <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 0203 	and.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	429a      	cmp	r2, r3
 8004204:	d123      	bne.n	800424e <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d11c      	bne.n	800424e <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d114      	bne.n	800424e <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800422e:	429a      	cmp	r2, r3
 8004230:	d10d      	bne.n	800424e <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800423c:	429a      	cmp	r2, r3
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800424a:	429a      	cmp	r2, r3
 800424c:	d05d      	beq.n	800430a <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b0c      	cmp	r3, #12
 8004252:	d058      	beq.n	8004306 <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e0ab      	b.n	80043be <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004266:	f7ff fc72 	bl	8003b4e <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800426a:	f7fd f901 	bl	8001470 <HAL_GetTick>
 800426e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004272:	f7fd f8fd 	bl	8001470 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e09c      	b.n	80043be <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1ef      	bne.n	8004272 <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	4b30      	ldr	r3, [pc, #192]	; (800435c <HAL_RCC_OscConfig+0x6b0>)
 800429a:	4013      	ands	r3, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042a4:	4311      	orrs	r1, r2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042aa:	0212      	lsls	r2, r2, #8
 80042ac:	4311      	orrs	r1, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042b2:	4311      	orrs	r1, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042b8:	4311      	orrs	r1, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80042be:	430a      	orrs	r2, r1
 80042c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042c8:	f7ff fc32 	bl	8003b30 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042da:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042dc:	f7fd f8c8 	bl	8001470 <HAL_GetTick>
 80042e0:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fd f8c4 	bl	8001470 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e063      	b.n	80043be <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ef      	beq.n	80042e4 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004304:	e05a      	b.n	80043bc <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e059      	b.n	80043be <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800430a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d151      	bne.n	80043bc <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004318:	f7ff fc0a 	bl	8003b30 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800431c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800432a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800432c:	f7fd f8a0 	bl	8001470 <HAL_GetTick>
 8004330:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004334:	f7fd f89c 	bl	8001470 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e03b      	b.n	80043be <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0ef      	beq.n	8004334 <HAL_RCC_OscConfig+0x688>
 8004354:	e032      	b.n	80043bc <HAL_RCC_OscConfig+0x710>
 8004356:	bf00      	nop
 8004358:	58000400 	.word	0x58000400
 800435c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d028      	beq.n	80043b8 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004366:	f7ff fbf2 	bl	8003b4e <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800436a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004374:	f023 0303 	bic.w	r3, r3, #3
 8004378:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800437a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004384:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800438c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438e:	f7fd f86f 	bl	8001470 <HAL_GetTick>
 8004392:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004396:	f7fd f86b 	bl	8001470 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e00a      	b.n	80043be <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1ef      	bne.n	8004396 <HAL_RCC_OscConfig+0x6ea>
 80043b6:	e001      	b.n	80043bc <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3734      	adds	r7, #52	; 0x34
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd90      	pop	{r4, r7, pc}
 80043c6:	bf00      	nop

080043c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e12d      	b.n	8004638 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043dc:	4b98      	ldr	r3, [pc, #608]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d91b      	bls.n	8004422 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ea:	4b95      	ldr	r3, [pc, #596]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f023 0207 	bic.w	r2, r3, #7
 80043f2:	4993      	ldr	r1, [pc, #588]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fa:	f7fd f839 	bl	8001470 <HAL_GetTick>
 80043fe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004400:	e008      	b.n	8004414 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004402:	f7fd f835 	bl	8001470 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e111      	b.n	8004638 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004414:	4b8a      	ldr	r3, [pc, #552]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d1ef      	bne.n	8004402 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d016      	beq.n	800445c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff faf9 	bl	8003a2a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004438:	f7fd f81a 	bl	8001470 <HAL_GetTick>
 800443c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004440:	f7fd f816 	bl	8001470 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e0f2      	b.n	8004638 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004452:	f7ff fbce 	bl	8003bf2 <LL_RCC_IsActiveFlag_HPRE>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f1      	beq.n	8004440 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d016      	beq.n	8004496 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff faf0 	bl	8003a52 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004472:	f7fc fffd 	bl	8001470 <HAL_GetTick>
 8004476:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004478:	e008      	b.n	800448c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800447a:	f7fc fff9 	bl	8001470 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e0d5      	b.n	8004638 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800448c:	f7ff fbc3 	bl	8003c16 <LL_RCC_IsActiveFlag_C2HPRE>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0f1      	beq.n	800447a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d016      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fae9 	bl	8003a7e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044ac:	f7fc ffe0 	bl	8001470 <HAL_GetTick>
 80044b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044b4:	f7fc ffdc 	bl	8001470 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e0b8      	b.n	8004638 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80044c6:	f7ff fbb9 	bl	8003c3c <LL_RCC_IsActiveFlag_SHDHPRE>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f1      	beq.n	80044b4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d016      	beq.n	800450a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff fae3 	bl	8003aac <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044e6:	f7fc ffc3 	bl	8001470 <HAL_GetTick>
 80044ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044ee:	f7fc ffbf 	bl	8001470 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e09b      	b.n	8004638 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004500:	f7ff fbaf 	bl	8003c62 <LL_RCC_IsActiveFlag_PPRE1>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f1      	beq.n	80044ee <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d017      	beq.n	8004546 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff fad9 	bl	8003ad4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004522:	f7fc ffa5 	bl	8001470 <HAL_GetTick>
 8004526:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004528:	e008      	b.n	800453c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800452a:	f7fc ffa1 	bl	8001470 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e07d      	b.n	8004638 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800453c:	f7ff fba3 	bl	8003c86 <LL_RCC_IsActiveFlag_PPRE2>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f1      	beq.n	800452a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d043      	beq.n	80045da <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d106      	bne.n	8004568 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800455a:	f7ff f879 	bl	8003650 <LL_RCC_HSE_IsReady>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d11e      	bne.n	80045a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e067      	b.n	8004638 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b03      	cmp	r3, #3
 800456e:	d106      	bne.n	800457e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004570:	f7ff fafc 	bl	8003b6c <LL_RCC_PLL_IsReady>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d113      	bne.n	80045a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e05c      	b.n	8004638 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004586:	f7ff f9e1 	bl	800394c <LL_RCC_MSI_IsReady>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d108      	bne.n	80045a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e051      	b.n	8004638 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004594:	f7ff f88c 	bl	80036b0 <LL_RCC_HSI_IsReady>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e04a      	b.n	8004638 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff fa1f 	bl	80039ea <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ac:	f7fc ff60 	bl	8001470 <HAL_GetTick>
 80045b0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b2:	e00a      	b.n	80045ca <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b4:	f7fc ff5c 	bl	8001470 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e036      	b.n	8004638 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ca:	f7ff fa22 	bl	8003a12 <LL_RCC_GetSysClkSource>
 80045ce:	4602      	mov	r2, r0
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d1ec      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045da:	4b19      	ldr	r3, [pc, #100]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d21b      	bcs.n	8004620 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e8:	4b15      	ldr	r3, [pc, #84]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f023 0207 	bic.w	r2, r3, #7
 80045f0:	4913      	ldr	r1, [pc, #76]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f8:	f7fc ff3a 	bl	8001470 <HAL_GetTick>
 80045fc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004600:	f7fc ff36 	bl	8001470 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e012      	b.n	8004638 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004612:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d1ef      	bne.n	8004600 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004620:	f000 f87e 	bl	8004720 <HAL_RCC_GetHCLKFreq>
 8004624:	4603      	mov	r3, r0
 8004626:	4a07      	ldr	r2, [pc, #28]	; (8004644 <HAL_RCC_ClockConfig+0x27c>)
 8004628:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800462a:	f7fc ff2d 	bl	8001488 <HAL_GetTickPrio>
 800462e:	4603      	mov	r3, r0
 8004630:	4618      	mov	r0, r3
 8004632:	f7fc fecf 	bl	80013d4 <HAL_InitTick>
 8004636:	4603      	mov	r3, r0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	58004000 	.word	0x58004000
 8004644:	20000004 	.word	0x20000004

08004648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004648:	b590      	push	{r4, r7, lr}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800464e:	f7ff f9e0 	bl	8003a12 <LL_RCC_GetSysClkSource>
 8004652:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10a      	bne.n	8004670 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800465a:	f7ff f99c 	bl	8003996 <LL_RCC_MSI_GetRange>
 800465e:	4603      	mov	r3, r0
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	4a2b      	ldr	r2, [pc, #172]	; (8004714 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	e04b      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b04      	cmp	r3, #4
 8004674:	d102      	bne.n	800467c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004676:	4b28      	ldr	r3, [pc, #160]	; (8004718 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	e045      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b08      	cmp	r3, #8
 8004680:	d10a      	bne.n	8004698 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004682:	f7fe ffb5 	bl	80035f0 <LL_RCC_HSE_IsEnabledDiv2>
 8004686:	4603      	mov	r3, r0
 8004688:	2b01      	cmp	r3, #1
 800468a:	d102      	bne.n	8004692 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800468c:	4b22      	ldr	r3, [pc, #136]	; (8004718 <HAL_RCC_GetSysClockFreq+0xd0>)
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	e03a      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004692:	4b22      	ldr	r3, [pc, #136]	; (800471c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e037      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004698:	f7ff fa9f 	bl	8003bda <LL_RCC_PLL_GetMainSource>
 800469c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d003      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x64>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d003      	beq.n	80046b2 <HAL_RCC_GetSysClockFreq+0x6a>
 80046aa:	e00d      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80046ac:	4b1a      	ldr	r3, [pc, #104]	; (8004718 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046ae:	60bb      	str	r3, [r7, #8]
        break;
 80046b0:	e015      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80046b2:	f7fe ff9d 	bl	80035f0 <LL_RCC_HSE_IsEnabledDiv2>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d102      	bne.n	80046c2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80046bc:	4b16      	ldr	r3, [pc, #88]	; (8004718 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046be:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80046c0:	e00d      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80046c2:	4b16      	ldr	r3, [pc, #88]	; (800471c <HAL_RCC_GetSysClockFreq+0xd4>)
 80046c4:	60bb      	str	r3, [r7, #8]
        break;
 80046c6:	e00a      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80046c8:	f7ff f965 	bl	8003996 <LL_RCC_MSI_GetRange>
 80046cc:	4603      	mov	r3, r0
 80046ce:	091b      	lsrs	r3, r3, #4
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	4a0f      	ldr	r2, [pc, #60]	; (8004714 <HAL_RCC_GetSysClockFreq+0xcc>)
 80046d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046da:	60bb      	str	r3, [r7, #8]
        break;
 80046dc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80046de:	f7ff fa57 	bl	8003b90 <LL_RCC_PLL_GetN>
 80046e2:	4602      	mov	r2, r0
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	fb03 f402 	mul.w	r4, r3, r2
 80046ea:	f7ff fa6a 	bl	8003bc2 <LL_RCC_PLL_GetDivider>
 80046ee:	4603      	mov	r3, r0
 80046f0:	091b      	lsrs	r3, r3, #4
 80046f2:	3301      	adds	r3, #1
 80046f4:	fbb4 f4f3 	udiv	r4, r4, r3
 80046f8:	f7ff fa57 	bl	8003baa <LL_RCC_PLL_GetR>
 80046fc:	4603      	mov	r3, r0
 80046fe:	0f5b      	lsrs	r3, r3, #29
 8004700:	3301      	adds	r3, #1
 8004702:	fbb4 f3f3 	udiv	r3, r4, r3
 8004706:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004708:	68fb      	ldr	r3, [r7, #12]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	bd90      	pop	{r4, r7, pc}
 8004712:	bf00      	nop
 8004714:	0800a418 	.word	0x0800a418
 8004718:	00f42400 	.word	0x00f42400
 800471c:	01e84800 	.word	0x01e84800

08004720 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004720:	b598      	push	{r3, r4, r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004724:	f7ff ff90 	bl	8004648 <HAL_RCC_GetSysClockFreq>
 8004728:	4604      	mov	r4, r0
 800472a:	f7ff f9e7 	bl	8003afc <LL_RCC_GetAHBPrescaler>
 800472e:	4603      	mov	r3, r0
 8004730:	091b      	lsrs	r3, r3, #4
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	4a03      	ldr	r2, [pc, #12]	; (8004744 <HAL_RCC_GetHCLKFreq+0x24>)
 8004738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800473c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004740:	4618      	mov	r0, r3
 8004742:	bd98      	pop	{r3, r4, r7, pc}
 8004744:	0800a3d8 	.word	0x0800a3d8

08004748 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2bb0      	cmp	r3, #176	; 0xb0
 8004754:	d903      	bls.n	800475e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004756:	4b15      	ldr	r3, [pc, #84]	; (80047ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	e007      	b.n	800476e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	4a11      	ldr	r2, [pc, #68]	; (80047ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800476c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800476e:	f7ff f9d1 	bl	8003b14 <LL_RCC_GetAHB4Prescaler>
 8004772:	4603      	mov	r3, r0
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	4a0d      	ldr	r2, [pc, #52]	; (80047b0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800477c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	fbb2 f3f3 	udiv	r3, r2, r3
 8004786:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4a0a      	ldr	r2, [pc, #40]	; (80047b4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	0c9c      	lsrs	r4, r3, #18
 8004792:	f7fe ff0f 	bl	80035b4 <HAL_PWREx_GetVoltageRange>
 8004796:	4603      	mov	r3, r0
 8004798:	4619      	mov	r1, r3
 800479a:	4620      	mov	r0, r4
 800479c:	f000 f80c 	bl	80047b8 <RCC_SetFlashLatency>
 80047a0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd90      	pop	{r4, r7, pc}
 80047aa:	bf00      	nop
 80047ac:	0800a418 	.word	0x0800a418
 80047b0:	0800a3d8 	.word	0x0800a3d8
 80047b4:	431bde83 	.word	0x431bde83

080047b8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80047b8:	b590      	push	{r4, r7, lr}
 80047ba:	b093      	sub	sp, #76	; 0x4c
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80047c2:	4b37      	ldr	r3, [pc, #220]	; (80048a0 <RCC_SetFlashLatency+0xe8>)
 80047c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80047c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80047ce:	4a35      	ldr	r2, [pc, #212]	; (80048a4 <RCC_SetFlashLatency+0xec>)
 80047d0:	f107 031c 	add.w	r3, r7, #28
 80047d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80047d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80047da:	4b33      	ldr	r3, [pc, #204]	; (80048a8 <RCC_SetFlashLatency+0xf0>)
 80047dc:	f107 040c 	add.w	r4, r7, #12
 80047e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80047e6:	2300      	movs	r3, #0
 80047e8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f0:	d11a      	bne.n	8004828 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80047f2:	2300      	movs	r3, #0
 80047f4:	643b      	str	r3, [r7, #64]	; 0x40
 80047f6:	e013      	b.n	8004820 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80047f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	3348      	adds	r3, #72	; 0x48
 80047fe:	443b      	add	r3, r7
 8004800:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d807      	bhi.n	800481a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800480a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	3348      	adds	r3, #72	; 0x48
 8004810:	443b      	add	r3, r7
 8004812:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004816:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004818:	e020      	b.n	800485c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800481a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800481c:	3301      	adds	r3, #1
 800481e:	643b      	str	r3, [r7, #64]	; 0x40
 8004820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004822:	2b03      	cmp	r3, #3
 8004824:	d9e8      	bls.n	80047f8 <RCC_SetFlashLatency+0x40>
 8004826:	e019      	b.n	800485c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004828:	2300      	movs	r3, #0
 800482a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800482c:	e013      	b.n	8004856 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800482e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	3348      	adds	r3, #72	; 0x48
 8004834:	443b      	add	r3, r7
 8004836:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	429a      	cmp	r2, r3
 800483e:	d807      	bhi.n	8004850 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	3348      	adds	r3, #72	; 0x48
 8004846:	443b      	add	r3, r7
 8004848:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800484c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800484e:	e005      	b.n	800485c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004852:	3301      	adds	r3, #1
 8004854:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004858:	2b02      	cmp	r3, #2
 800485a:	d9e8      	bls.n	800482e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800485c:	4b13      	ldr	r3, [pc, #76]	; (80048ac <RCC_SetFlashLatency+0xf4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f023 0207 	bic.w	r2, r3, #7
 8004864:	4911      	ldr	r1, [pc, #68]	; (80048ac <RCC_SetFlashLatency+0xf4>)
 8004866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004868:	4313      	orrs	r3, r2
 800486a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800486c:	f7fc fe00 	bl	8001470 <HAL_GetTick>
 8004870:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004872:	e008      	b.n	8004886 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004874:	f7fc fdfc 	bl	8001470 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e007      	b.n	8004896 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004886:	4b09      	ldr	r3, [pc, #36]	; (80048ac <RCC_SetFlashLatency+0xf4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004890:	429a      	cmp	r2, r3
 8004892:	d1ef      	bne.n	8004874 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	374c      	adds	r7, #76	; 0x4c
 800489a:	46bd      	mov	sp, r7
 800489c:	bd90      	pop	{r4, r7, pc}
 800489e:	bf00      	nop
 80048a0:	0800a364 	.word	0x0800a364
 80048a4:	0800a374 	.word	0x0800a374
 80048a8:	0800a380 	.word	0x0800a380
 80048ac:	58004000 	.word	0x58004000

080048b0 <LL_RCC_LSE_IsEnabled>:
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80048b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <LL_RCC_LSE_IsEnabled+0x18>
 80048c4:	2301      	movs	r3, #1
 80048c6:	e000      	b.n	80048ca <LL_RCC_LSE_IsEnabled+0x1a>
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <LL_RCC_LSE_IsReady>:
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80048d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d101      	bne.n	80048ec <LL_RCC_LSE_IsReady+0x18>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <LL_RCC_LSE_IsReady+0x1a>
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <LL_RCC_SetRFWKPClockSource>:
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004908:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800490c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <LL_RCC_SetSMPSClockSource>:
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800492c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	f023 0203 	bic.w	r2, r3, #3
 8004936:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4313      	orrs	r3, r2
 800493e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <LL_RCC_SetSMPSPrescaler>:
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800495e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4313      	orrs	r3, r2
 8004966:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <LL_RCC_SetUSARTClockSource>:
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800497c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004984:	f023 0203 	bic.w	r2, r3, #3
 8004988:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_RCC_SetLPUARTClockSource>:
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80049a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <LL_RCC_SetI2CClockSource>:
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80049d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	091b      	lsrs	r3, r3, #4
 80049e0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80049e4:	43db      	mvns	r3, r3
 80049e6:	401a      	ands	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80049f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <LL_RCC_SetLPTIMClockSource>:
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	0c1b      	lsrs	r3, r3, #16
 8004a1a:	041b      	lsls	r3, r3, #16
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	401a      	ands	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	041b      	lsls	r3, r3, #16
 8004a24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <LL_RCC_SetSAIClockSource>:
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <LL_RCC_SetRNGClockSource>:
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a76:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004a7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <LL_RCC_SetCLK48ClockSource>:
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <LL_RCC_SetUSBClockSource>:
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff ffe3 	bl	8004a92 <LL_RCC_SetCLK48ClockSource>
}
 8004acc:	bf00      	nop
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <LL_RCC_SetADCClockSource>:
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <LL_RCC_SetRTCClockSource>:
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <LL_RCC_GetRTCClockSource>:
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <LL_RCC_ForceBackupDomainReset>:
{
 8004b46:	b480      	push	{r7}
 8004b48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b5e:	bf00      	nop
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b80:	bf00      	nop
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <LL_RCC_PLLSAI1_Enable>:
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b9c:	6013      	str	r3, [r2, #0]
}
 8004b9e:	bf00      	nop
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <LL_RCC_PLLSAI1_Disable>:
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bba:	6013      	str	r3, [r2, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <LL_RCC_PLLSAI1_IsReady>:
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bd8:	d101      	bne.n	8004bde <LL_RCC_PLLSAI1_IsReady+0x18>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b088      	sub	sp, #32
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d034      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c0e:	d021      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004c10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c14:	d81b      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c1a:	d01d      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004c1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c20:	d815      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00b      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2a:	d110      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c3a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004c3c:	e00d      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3304      	adds	r3, #4
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 f947 	bl	8004ed6 <RCCEx_PLLSAI1_ConfigNP>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004c4c:	e005      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	77fb      	strb	r3, [r7, #31]
        break;
 8004c52:	e002      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004c54:	bf00      	nop
 8004c56:	e000      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c5a:	7ffb      	ldrb	r3, [r7, #31]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff fee8 	bl	8004a3a <LL_RCC_SetSAIClockSource>
 8004c6a:	e001      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6c:	7ffb      	ldrb	r3, [r7, #31]
 8004c6e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d046      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004c7c:	f7ff ff56 	bl	8004b2c <LL_RCC_GetRTCClockSource>
 8004c80:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d03c      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004c8c:	f7fe fc82 	bl	8003594 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d105      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff ff30 	bl	8004b00 <LL_RCC_SetRTCClockSource>
 8004ca0:	e02e      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004caa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004cac:	f7ff ff4b 	bl	8004b46 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004cb0:	f7ff ff5a 	bl	8004b68 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004cc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004ccc:	f7ff fdf0 	bl	80048b0 <LL_RCC_LSE_IsEnabled>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d114      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cd6:	f7fc fbcb 	bl	8001470 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004cdc:	e00b      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cde:	f7fc fbc7 	bl	8001470 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d902      	bls.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	77fb      	strb	r3, [r7, #31]
              break;
 8004cf4:	e004      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004cf6:	f7ff fded 	bl	80048d4 <LL_RCC_LSE_IsReady>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d1ee      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004d00:	7ffb      	ldrb	r3, [r7, #31]
 8004d02:	77bb      	strb	r3, [r7, #30]
 8004d04:	e001      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d06:	7ffb      	ldrb	r3, [r7, #31]
 8004d08:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d004      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff fe2a 	bl	8004974 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d004      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff fe35 	bl	80049a0 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0310 	and.w	r3, r3, #16
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d004      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff fe5d 	bl	8004a06 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d004      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fe52 	bl	8004a06 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0304 	and.w	r3, r3, #4
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d004      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fe2a 	bl	80049cc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0308 	and.w	r3, r3, #8
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d004      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fe1f 	bl	80049cc <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d022      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff fe8d 	bl	8004abe <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dac:	d107      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004db8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dbc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dc6:	d10b      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 f8dd 	bl	8004f8c <RCCEx_PLLSAI1_ConfigNQ>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004dd6:	7ffb      	ldrb	r3, [r7, #31]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8004ddc:	7ffb      	ldrb	r3, [r7, #31]
 8004dde:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d02b      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df4:	d008      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dfe:	d003      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d105      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff fe2a 	bl	8004a66 <LL_RCC_SetRNGClockSource>
 8004e12:	e00a      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	2000      	movs	r0, #0
 8004e20:	f7ff fe21 	bl	8004a66 <LL_RCC_SetRNGClockSource>
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f7ff fe34 	bl	8004a92 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004e32:	d107      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d022      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fe3d 	bl	8004ad4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e62:	d107      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e72:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e7c:	d10b      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3304      	adds	r3, #4
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 f8dd 	bl	8005042 <RCCEx_PLLSAI1_ConfigNR>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004e8c:	7ffb      	ldrb	r3, [r7, #31]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8004e92:	7ffb      	ldrb	r3, [r7, #31]
 8004e94:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d004      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff fd26 	bl	80048f8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d009      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff fd45 	bl	800494c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7ff fd2c 	bl	8004924 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8004ecc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3720      	adds	r7, #32
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004ee2:	f7ff fe61 	bl	8004ba8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ee6:	f7fc fac3 	bl	8001470 <HAL_GetTick>
 8004eea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004eec:	e009      	b.n	8004f02 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004eee:	f7fc fabf 	bl	8001470 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d902      	bls.n	8004f02 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	73fb      	strb	r3, [r7, #15]
      break;
 8004f00:	e004      	b.n	8004f0c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f02:	f7ff fe60 	bl	8004bc6 <LL_RCC_PLLSAI1_IsReady>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1f0      	bne.n	8004eee <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d137      	bne.n	8004f82 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f26:	4313      	orrs	r3, r2
 8004f28:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004f40:	f7ff fe23 	bl	8004b8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f44:	f7fc fa94 	bl	8001470 <HAL_GetTick>
 8004f48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004f4a:	e009      	b.n	8004f60 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f4c:	f7fc fa90 	bl	8001470 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d902      	bls.n	8004f60 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f5e:	e004      	b.n	8004f6a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004f60:	f7ff fe31 	bl	8004bc6 <LL_RCC_PLLSAI1_IsReady>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d1f0      	bne.n	8004f4c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d108      	bne.n	8004f82 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004f98:	f7ff fe06 	bl	8004ba8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f9c:	f7fc fa68 	bl	8001470 <HAL_GetTick>
 8004fa0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004fa2:	e009      	b.n	8004fb8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fa4:	f7fc fa64 	bl	8001470 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d902      	bls.n	8004fb8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb6:	e004      	b.n	8004fc2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004fb8:	f7ff fe05 	bl	8004bc6 <LL_RCC_PLLSAI1_IsReady>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d137      	bne.n	8005038 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004ff6:	f7ff fdc8 	bl	8004b8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffa:	f7fc fa39 	bl	8001470 <HAL_GetTick>
 8004ffe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005000:	e009      	b.n	8005016 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005002:	f7fc fa35 	bl	8001470 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d902      	bls.n	8005016 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	73fb      	strb	r3, [r7, #15]
        break;
 8005014:	e004      	b.n	8005020 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005016:	f7ff fdd6 	bl	8004bc6 <LL_RCC_PLLSAI1_IsReady>
 800501a:	4603      	mov	r3, r0
 800501c:	2b01      	cmp	r3, #1
 800501e:	d1f0      	bne.n	8005002 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d108      	bne.n	8005038 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005034:	4313      	orrs	r3, r2
 8005036:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800504e:	f7ff fdab 	bl	8004ba8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005052:	f7fc fa0d 	bl	8001470 <HAL_GetTick>
 8005056:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005058:	e009      	b.n	800506e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800505a:	f7fc fa09 	bl	8001470 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d902      	bls.n	800506e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	73fb      	strb	r3, [r7, #15]
      break;
 800506c:	e004      	b.n	8005078 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800506e:	f7ff fdaa 	bl	8004bc6 <LL_RCC_PLLSAI1_IsReady>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1f0      	bne.n	800505a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d137      	bne.n	80050ee <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800507e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	021b      	lsls	r3, r3, #8
 800508e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005092:	4313      	orrs	r3, r2
 8005094:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050a8:	4313      	orrs	r3, r2
 80050aa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80050ac:	f7ff fd6d 	bl	8004b8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b0:	f7fc f9de 	bl	8001470 <HAL_GetTick>
 80050b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80050b6:	e009      	b.n	80050cc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050b8:	f7fc f9da 	bl	8001470 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d902      	bls.n	80050cc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	73fb      	strb	r3, [r7, #15]
        break;
 80050ca:	e004      	b.n	80050d6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80050cc:	f7ff fd7b 	bl	8004bc6 <LL_RCC_PLLSAI1_IsReady>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d1f0      	bne.n	80050b8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80050d6:	7bfb      	ldrb	r3, [r7, #15]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d108      	bne.n	80050ee <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80050dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050ea:	4313      	orrs	r3, r2
 80050ec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e090      	b.n	800522c <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fc f836 	bl	8001190 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	22ca      	movs	r2, #202	; 0xca
 8005132:	625a      	str	r2, [r3, #36]	; 0x24
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2253      	movs	r2, #83	; 0x53
 800513a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f89f 	bl	8005280 <RTC_EnterInitMode>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d009      	beq.n	800515c <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	22ff      	movs	r2, #255	; 0xff
 800514e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2204      	movs	r2, #4
 8005154:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e067      	b.n	800522c <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800516a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800516e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6899      	ldr	r1, [r3, #8]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	68d2      	ldr	r2, [r2, #12]
 8005196:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6919      	ldr	r1, [r3, #16]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	041a      	lsls	r2, r3, #16
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051ba:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0203 	bic.w	r2, r2, #3
 80051ca:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69da      	ldr	r2, [r3, #28]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d113      	bne.n	800521a <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f81e 	bl	8005234 <HAL_RTC_WaitForSynchro>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00d      	beq.n	800521a <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	22ff      	movs	r2, #255	; 0xff
 8005204:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2204      	movs	r2, #4
 800520a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e008      	b.n	800522c <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	22ff      	movs	r2, #255	; 0xff
 8005220:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800522a:	2300      	movs	r3, #0
  }
}
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800524a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800524c:	f7fc f910 	bl	8001470 <HAL_GetTick>
 8005250:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005252:	e009      	b.n	8005268 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005254:	f7fc f90c 	bl	8001470 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005262:	d901      	bls.n	8005268 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e007      	b.n	8005278 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0ee      	beq.n	8005254 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005292:	2b00      	cmp	r3, #0
 8005294:	d119      	bne.n	80052ca <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f04f 32ff 	mov.w	r2, #4294967295
 800529e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80052a0:	f7fc f8e6 	bl	8001470 <HAL_GetTick>
 80052a4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80052a6:	e009      	b.n	80052bc <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80052a8:	f7fc f8e2 	bl	8001470 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052b6:	d901      	bls.n	80052bc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e007      	b.n	80052cc <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0ee      	beq.n	80052a8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80052e4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80052e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800530a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800530e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	b29b      	uxth	r3, r3
 800531c:	43db      	mvns	r3, r3
 800531e:	b29b      	uxth	r3, r3
 8005320:	4013      	ands	r3, r2
 8005322:	b29a      	uxth	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005338:	b084      	sub	sp, #16
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	f107 0014 	add.w	r0, r7, #20
 8005346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	b004      	add	sp, #16
 8005378:	4770      	bx	lr
	...

0800537c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800537c:	b480      	push	{r7}
 800537e:	b09d      	sub	sp, #116	; 0x74
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800539e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	78db      	ldrb	r3, [r3, #3]
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d81f      	bhi.n	80053ee <USB_ActivateEndpoint+0x72>
 80053ae:	a201      	add	r2, pc, #4	; (adr r2, 80053b4 <USB_ActivateEndpoint+0x38>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080053c5 	.word	0x080053c5
 80053b8:	080053e1 	.word	0x080053e1
 80053bc:	080053f7 	.word	0x080053f7
 80053c0:	080053d3 	.word	0x080053d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80053c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80053c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80053d0:	e012      	b.n	80053f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80053d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80053d6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80053da:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80053de:	e00b      	b.n	80053f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80053e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80053e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80053ec:	e004      	b.n	80053f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80053f4:	e000      	b.n	80053f8 <USB_ActivateEndpoint+0x7c>
      break;
 80053f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	441a      	add	r2, r3
 8005402:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800540a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800540e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005416:	b29b      	uxth	r3, r3
 8005418:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29b      	uxth	r3, r3
 8005428:	b21b      	sxth	r3, r3
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005432:	b21a      	sxth	r2, r3
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	b21b      	sxth	r3, r3
 800543a:	4313      	orrs	r3, r2
 800543c:	b21b      	sxth	r3, r3
 800543e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	441a      	add	r2, r3
 800544c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005460:	b29b      	uxth	r3, r3
 8005462:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	7b1b      	ldrb	r3, [r3, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	f040 8149 	bne.w	8005700 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	785b      	ldrb	r3, [r3, #1]
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 8084 	beq.w	8005580 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	61bb      	str	r3, [r7, #24]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005482:	b29b      	uxth	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	4413      	add	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	00da      	lsls	r2, r3, #3
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	88db      	ldrh	r3, [r3, #6]
 80054a0:	085b      	lsrs	r3, r3, #1
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	827b      	strh	r3, [r7, #18]
 80054ba:	8a7b      	ldrh	r3, [r7, #18]
 80054bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01b      	beq.n	80054fc <USB_ActivateEndpoint+0x180>
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054da:	823b      	strh	r3, [r7, #16]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	441a      	add	r2, r3
 80054e6:	8a3b      	ldrh	r3, [r7, #16]
 80054e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	78db      	ldrb	r3, [r3, #3]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d020      	beq.n	8005546 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551a:	81bb      	strh	r3, [r7, #12]
 800551c:	89bb      	ldrh	r3, [r7, #12]
 800551e:	f083 0320 	eor.w	r3, r3, #32
 8005522:	81bb      	strh	r3, [r7, #12]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	441a      	add	r2, r3
 800552e:	89bb      	ldrh	r3, [r7, #12]
 8005530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005540:	b29b      	uxth	r3, r3
 8005542:	8013      	strh	r3, [r2, #0]
 8005544:	e2a6      	b.n	8005a94 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555c:	81fb      	strh	r3, [r7, #14]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	441a      	add	r2, r3
 8005568:	89fb      	ldrh	r3, [r7, #14]
 800556a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800557a:	b29b      	uxth	r3, r3
 800557c:	8013      	strh	r3, [r2, #0]
 800557e:	e289      	b.n	8005a94 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	633b      	str	r3, [r7, #48]	; 0x30
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800558a:	b29b      	uxth	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	4413      	add	r3, r2
 8005592:	633b      	str	r3, [r7, #48]	; 0x30
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	00da      	lsls	r2, r3, #3
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	4413      	add	r3, r2
 800559e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	88db      	ldrh	r3, [r3, #6]
 80055a8:	085b      	lsrs	r3, r3, #1
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055be:	b29b      	uxth	r3, r3
 80055c0:	461a      	mov	r2, r3
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	4413      	add	r3, r2
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	00da      	lsls	r2, r3, #3
 80055ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d0:	4413      	add	r3, r2
 80055d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	2b3e      	cmp	r3, #62	; 0x3e
 80055de:	d918      	bls.n	8005612 <USB_ActivateEndpoint+0x296>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	095b      	lsrs	r3, r3, #5
 80055e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d102      	bne.n	80055fa <USB_ActivateEndpoint+0x27e>
 80055f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055f6:	3b01      	subs	r3, #1
 80055f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80055fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	029b      	lsls	r3, r3, #10
 8005600:	b29b      	uxth	r3, r3
 8005602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800560a:	b29a      	uxth	r2, r3
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	801a      	strh	r2, [r3, #0]
 8005610:	e029      	b.n	8005666 <USB_ActivateEndpoint+0x2ea>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d112      	bne.n	8005640 <USB_ActivateEndpoint+0x2c4>
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	b29b      	uxth	r3, r3
 8005620:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005624:	b29a      	uxth	r2, r3
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	b29b      	uxth	r3, r3
 8005630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005638:	b29a      	uxth	r2, r3
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	801a      	strh	r2, [r3, #0]
 800563e:	e012      	b.n	8005666 <USB_ActivateEndpoint+0x2ea>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	085b      	lsrs	r3, r3, #1
 8005646:	66bb      	str	r3, [r7, #104]	; 0x68
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <USB_ActivateEndpoint+0x2de>
 8005654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005656:	3301      	adds	r3, #1
 8005658:	66bb      	str	r3, [r7, #104]	; 0x68
 800565a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800565c:	b29b      	uxth	r3, r3
 800565e:	029b      	lsls	r3, r3, #10
 8005660:	b29a      	uxth	r2, r3
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	847b      	strh	r3, [r7, #34]	; 0x22
 8005674:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d01b      	beq.n	80056b6 <USB_ActivateEndpoint+0x33a>
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005694:	843b      	strh	r3, [r7, #32]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	441a      	add	r2, r3
 80056a0:	8c3b      	ldrh	r3, [r7, #32]
 80056a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056cc:	83fb      	strh	r3, [r7, #30]
 80056ce:	8bfb      	ldrh	r3, [r7, #30]
 80056d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056d4:	83fb      	strh	r3, [r7, #30]
 80056d6:	8bfb      	ldrh	r3, [r7, #30]
 80056d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056dc:	83fb      	strh	r3, [r7, #30]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	441a      	add	r2, r3
 80056e8:	8bfb      	ldrh	r3, [r7, #30]
 80056ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	8013      	strh	r3, [r2, #0]
 80056fe:	e1c9      	b.n	8005a94 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	78db      	ldrb	r3, [r3, #3]
 8005704:	2b02      	cmp	r3, #2
 8005706:	d11e      	bne.n	8005746 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	441a      	add	r2, r3
 800572c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005738:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800573c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005740:	b29b      	uxth	r3, r3
 8005742:	8013      	strh	r3, [r2, #0]
 8005744:	e01d      	b.n	8005782 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	b29b      	uxth	r3, r3
 8005754:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	441a      	add	r2, r3
 800576a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800576e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800577a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800577e:	b29b      	uxth	r3, r3
 8005780:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800578c:	b29b      	uxth	r3, r3
 800578e:	461a      	mov	r2, r3
 8005790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005792:	4413      	add	r3, r2
 8005794:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	00da      	lsls	r2, r3, #3
 800579c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	891b      	ldrh	r3, [r3, #8]
 80057aa:	085b      	lsrs	r3, r3, #1
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057b4:	801a      	strh	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	657b      	str	r3, [r7, #84]	; 0x54
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057c6:	4413      	add	r3, r2
 80057c8:	657b      	str	r3, [r7, #84]	; 0x54
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	00da      	lsls	r2, r3, #3
 80057d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057d2:	4413      	add	r3, r2
 80057d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057d8:	653b      	str	r3, [r7, #80]	; 0x50
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	895b      	ldrh	r3, [r3, #10]
 80057de:	085b      	lsrs	r3, r3, #1
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f040 8093 	bne.w	800591a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005804:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01b      	beq.n	8005848 <USB_ActivateEndpoint+0x4cc>
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005826:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800583c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005844:	b29b      	uxth	r3, r3
 8005846:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005856:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585c:	2b00      	cmp	r3, #0
 800585e:	d01b      	beq.n	8005898 <USB_ActivateEndpoint+0x51c>
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005876:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	441a      	add	r2, r3
 8005882:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800588c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005890:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005894:	b29b      	uxth	r3, r3
 8005896:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ae:	873b      	strh	r3, [r7, #56]	; 0x38
 80058b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80058b6:	873b      	strh	r3, [r7, #56]	; 0x38
 80058b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058be:	873b      	strh	r3, [r7, #56]	; 0x38
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	441a      	add	r2, r3
 80058ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058dc:	b29b      	uxth	r3, r3
 80058de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058f6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	441a      	add	r2, r3
 8005902:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800590c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005914:	b29b      	uxth	r3, r3
 8005916:	8013      	strh	r3, [r2, #0]
 8005918:	e0bc      	b.n	8005a94 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800592a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800592e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d01d      	beq.n	8005972 <USB_ActivateEndpoint+0x5f6>
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	b29b      	uxth	r3, r3
 8005944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	441a      	add	r2, r3
 800595a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800595e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005966:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800596a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800596e:	b29b      	uxth	r3, r3
 8005970:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005982:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	2b00      	cmp	r3, #0
 800598c:	d01d      	beq.n	80059ca <USB_ActivateEndpoint+0x64e>
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	441a      	add	r2, r3
 80059b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	78db      	ldrb	r3, [r3, #3]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d024      	beq.n	8005a1c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059e8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80059ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059f0:	f083 0320 	eor.w	r3, r3, #32
 80059f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	441a      	add	r2, r3
 8005a02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	8013      	strh	r3, [r2, #0]
 8005a1a:	e01d      	b.n	8005a58 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a32:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	441a      	add	r2, r3
 8005a40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	441a      	add	r2, r3
 8005a7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005a94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3774      	adds	r7, #116	; 0x74
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b08d      	sub	sp, #52	; 0x34
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	7b1b      	ldrb	r3, [r3, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f040 808e 	bne.w	8005bd4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d044      	beq.n	8005b4a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	81bb      	strh	r3, [r7, #12]
 8005ace:	89bb      	ldrh	r3, [r7, #12]
 8005ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01b      	beq.n	8005b10 <USB_DeactivateEndpoint+0x6c>
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aee:	817b      	strh	r3, [r7, #10]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	441a      	add	r2, r3
 8005afa:	897b      	ldrh	r3, [r7, #10]
 8005afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b26:	813b      	strh	r3, [r7, #8]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	441a      	add	r2, r3
 8005b32:	893b      	ldrh	r3, [r7, #8]
 8005b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	8013      	strh	r3, [r2, #0]
 8005b48:	e192      	b.n	8005e70 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	827b      	strh	r3, [r7, #18]
 8005b58:	8a7b      	ldrh	r3, [r7, #18]
 8005b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01b      	beq.n	8005b9a <USB_DeactivateEndpoint+0xf6>
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b78:	823b      	strh	r3, [r7, #16]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	441a      	add	r2, r3
 8005b84:	8a3b      	ldrh	r3, [r7, #16]
 8005b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb0:	81fb      	strh	r3, [r7, #14]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	441a      	add	r2, r3
 8005bbc:	89fb      	ldrh	r3, [r7, #14]
 8005bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	8013      	strh	r3, [r2, #0]
 8005bd2:	e14d      	b.n	8005e70 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	785b      	ldrb	r3, [r3, #1]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f040 80a5 	bne.w	8005d28 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	843b      	strh	r3, [r7, #32]
 8005bec:	8c3b      	ldrh	r3, [r7, #32]
 8005bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01b      	beq.n	8005c2e <USB_DeactivateEndpoint+0x18a>
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0c:	83fb      	strh	r3, [r7, #30]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	8bfb      	ldrh	r3, [r7, #30]
 8005c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	83bb      	strh	r3, [r7, #28]
 8005c3c:	8bbb      	ldrh	r3, [r7, #28]
 8005c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d01b      	beq.n	8005c7e <USB_DeactivateEndpoint+0x1da>
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5c:	837b      	strh	r3, [r7, #26]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	441a      	add	r2, r3
 8005c68:	8b7b      	ldrh	r3, [r7, #26]
 8005c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c94:	833b      	strh	r3, [r7, #24]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	441a      	add	r2, r3
 8005ca0:	8b3b      	ldrh	r3, [r7, #24]
 8005ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ccc:	82fb      	strh	r3, [r7, #22]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	441a      	add	r2, r3
 8005cd8:	8afb      	ldrh	r3, [r7, #22]
 8005cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d04:	82bb      	strh	r3, [r7, #20]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	441a      	add	r2, r3
 8005d10:	8abb      	ldrh	r3, [r7, #20]
 8005d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	8013      	strh	r3, [r2, #0]
 8005d26:	e0a3      	b.n	8005e70 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005d36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d01b      	beq.n	8005d78 <USB_DeactivateEndpoint+0x2d4>
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d56:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	441a      	add	r2, r3
 8005d62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005d86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01b      	beq.n	8005dc8 <USB_DeactivateEndpoint+0x324>
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da6:	853b      	strh	r3, [r7, #40]	; 0x28
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	441a      	add	r2, r3
 8005db2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	441a      	add	r2, r3
 8005dea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e16:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	441a      	add	r2, r3
 8005e22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	441a      	add	r2, r3
 8005e5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3734      	adds	r7, #52	; 0x34
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b0c2      	sub	sp, #264	; 0x108
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e8c:	6018      	str	r0, [r3, #0]
 8005e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e96:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	f040 867b 	bne.w	8006ba0 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d908      	bls.n	8005ed8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ed6:	e007      	b.n	8005ee8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	7b1b      	ldrb	r3, [r3, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d13a      	bne.n	8005f6e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6959      	ldr	r1, [r3, #20]
 8005f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	88da      	ldrh	r2, [r3, #6]
 8005f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f1a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f1e:	6800      	ldr	r0, [r0, #0]
 8005f20:	f001 fc1d 	bl	800775e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	461a      	mov	r2, r3
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4413      	add	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	00da      	lsls	r2, r3, #3
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	801a      	strh	r2, [r3, #0]
 8005f6a:	f000 bde3 	b.w	8006b34 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	78db      	ldrb	r3, [r3, #3]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	f040 843a 	bne.w	80067f4 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6a1a      	ldr	r2, [r3, #32]
 8005f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	f240 83b7 	bls.w	800670c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	441a      	add	r2, r3
 8005fe2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6a1a      	ldr	r2, [r3, #32]
 8006006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800600a:	1ad2      	subs	r2, r2, r3
 800600c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 81b3 	beq.w	80063a6 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	633b      	str	r3, [r7, #48]	; 0x30
 800604c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	785b      	ldrb	r3, [r3, #1]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d16d      	bne.n	8006138 <USB_EPStartXfer+0x2ba>
 800605c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006060:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	62bb      	str	r3, [r7, #40]	; 0x28
 8006068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006076:	b29b      	uxth	r3, r3
 8006078:	461a      	mov	r2, r3
 800607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607c:	4413      	add	r3, r2
 800607e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	00da      	lsls	r2, r3, #3
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	4413      	add	r3, r2
 8006092:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
 8006098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800609c:	2b3e      	cmp	r3, #62	; 0x3e
 800609e:	d91c      	bls.n	80060da <USB_EPStartXfer+0x25c>
 80060a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a4:	095b      	lsrs	r3, r3, #5
 80060a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ae:	f003 031f 	and.w	r3, r3, #31
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d104      	bne.n	80060c0 <USB_EPStartXfer+0x242>
 80060b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060ba:	3b01      	subs	r3, #1
 80060bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	029b      	lsls	r3, r3, #10
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	801a      	strh	r2, [r3, #0]
 80060d8:	e053      	b.n	8006182 <USB_EPStartXfer+0x304>
 80060da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d112      	bne.n	8006108 <USB_EPStartXfer+0x28a>
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	801a      	strh	r2, [r3, #0]
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006100:	b29a      	uxth	r2, r3
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	801a      	strh	r2, [r3, #0]
 8006106:	e03c      	b.n	8006182 <USB_EPStartXfer+0x304>
 8006108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d004      	beq.n	8006128 <USB_EPStartXfer+0x2aa>
 800611e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006122:	3301      	adds	r3, #1
 8006124:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006128:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800612c:	b29b      	uxth	r3, r3
 800612e:	029b      	lsls	r3, r3, #10
 8006130:	b29a      	uxth	r2, r3
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	801a      	strh	r2, [r3, #0]
 8006136:	e024      	b.n	8006182 <USB_EPStartXfer+0x304>
 8006138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800613c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	785b      	ldrb	r3, [r3, #1]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d11c      	bne.n	8006182 <USB_EPStartXfer+0x304>
 8006148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006156:	b29b      	uxth	r3, r3
 8006158:	461a      	mov	r2, r3
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	4413      	add	r3, r2
 800615e:	633b      	str	r3, [r7, #48]	; 0x30
 8006160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	00da      	lsls	r2, r3, #3
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	4413      	add	r3, r2
 8006172:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800617c:	b29a      	uxth	r2, r3
 800617e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006180:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	895b      	ldrh	r3, [r3, #10]
 800618e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6959      	ldr	r1, [r3, #20]
 800619e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80061a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80061ac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80061b0:	6800      	ldr	r0, [r0, #0]
 80061b2:	f001 fad4 	bl	800775e <USB_WritePMA>
            ep->xfer_buff += len;
 80061b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	695a      	ldr	r2, [r3, #20]
 80061c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c6:	441a      	add	r2, r3
 80061c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80061d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6a1a      	ldr	r2, [r3, #32]
 80061e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d90f      	bls.n	8006210 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80061f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6a1a      	ldr	r2, [r3, #32]
 80061fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006200:	1ad2      	subs	r2, r2, r3
 8006202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	621a      	str	r2, [r3, #32]
 800620e:	e00e      	b.n	800622e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2200      	movs	r2, #0
 800622c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800622e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	785b      	ldrb	r3, [r3, #1]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d16d      	bne.n	800631a <USB_EPStartXfer+0x49c>
 800623e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006242:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	61bb      	str	r3, [r7, #24]
 800624a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006258:	b29b      	uxth	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	4413      	add	r3, r2
 8006260:	61bb      	str	r3, [r7, #24]
 8006262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	00da      	lsls	r2, r3, #3
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	4413      	add	r3, r2
 8006274:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800627e:	2b3e      	cmp	r3, #62	; 0x3e
 8006280:	d91c      	bls.n	80062bc <USB_EPStartXfer+0x43e>
 8006282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800628c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006290:	f003 031f 	and.w	r3, r3, #31
 8006294:	2b00      	cmp	r3, #0
 8006296:	d104      	bne.n	80062a2 <USB_EPStartXfer+0x424>
 8006298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800629c:	3b01      	subs	r3, #1
 800629e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80062a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	029b      	lsls	r3, r3, #10
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	801a      	strh	r2, [r3, #0]
 80062ba:	e059      	b.n	8006370 <USB_EPStartXfer+0x4f2>
 80062bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d112      	bne.n	80062ea <USB_EPStartXfer+0x46c>
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	801a      	strh	r2, [r3, #0]
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	801a      	strh	r2, [r3, #0]
 80062e8:	e042      	b.n	8006370 <USB_EPStartXfer+0x4f2>
 80062ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ee:	085b      	lsrs	r3, r3, #1
 80062f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80062f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d004      	beq.n	800630a <USB_EPStartXfer+0x48c>
 8006300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006304:	3301      	adds	r3, #1
 8006306:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800630a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800630e:	b29b      	uxth	r3, r3
 8006310:	029b      	lsls	r3, r3, #10
 8006312:	b29a      	uxth	r2, r3
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	801a      	strh	r2, [r3, #0]
 8006318:	e02a      	b.n	8006370 <USB_EPStartXfer+0x4f2>
 800631a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	785b      	ldrb	r3, [r3, #1]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d122      	bne.n	8006370 <USB_EPStartXfer+0x4f2>
 800632a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	623b      	str	r3, [r7, #32]
 8006336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006344:	b29b      	uxth	r3, r3
 8006346:	461a      	mov	r2, r3
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	4413      	add	r3, r2
 800634c:	623b      	str	r3, [r7, #32]
 800634e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	00da      	lsls	r2, r3, #3
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	4413      	add	r3, r2
 8006360:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800636a:	b29a      	uxth	r2, r3
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	891b      	ldrh	r3, [r3, #8]
 800637c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6959      	ldr	r1, [r3, #20]
 800638c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006390:	b29b      	uxth	r3, r3
 8006392:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006396:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800639a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800639e:	6800      	ldr	r0, [r0, #0]
 80063a0:	f001 f9dd 	bl	800775e <USB_WritePMA>
 80063a4:	e3c6      	b.n	8006b34 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	785b      	ldrb	r3, [r3, #1]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d16d      	bne.n	8006492 <USB_EPStartXfer+0x614>
 80063b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80063c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	461a      	mov	r2, r3
 80063d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d6:	4413      	add	r3, r2
 80063d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80063da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	00da      	lsls	r2, r3, #3
 80063e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ea:	4413      	add	r3, r2
 80063ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063f0:	647b      	str	r3, [r7, #68]	; 0x44
 80063f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f6:	2b3e      	cmp	r3, #62	; 0x3e
 80063f8:	d91c      	bls.n	8006434 <USB_EPStartXfer+0x5b6>
 80063fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063fe:	095b      	lsrs	r3, r3, #5
 8006400:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006408:	f003 031f 	and.w	r3, r3, #31
 800640c:	2b00      	cmp	r3, #0
 800640e:	d104      	bne.n	800641a <USB_EPStartXfer+0x59c>
 8006410:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006414:	3b01      	subs	r3, #1
 8006416:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800641a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800641e:	b29b      	uxth	r3, r3
 8006420:	029b      	lsls	r3, r3, #10
 8006422:	b29b      	uxth	r3, r3
 8006424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800642c:	b29a      	uxth	r2, r3
 800642e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006430:	801a      	strh	r2, [r3, #0]
 8006432:	e059      	b.n	80064e8 <USB_EPStartXfer+0x66a>
 8006434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006438:	2b00      	cmp	r3, #0
 800643a:	d112      	bne.n	8006462 <USB_EPStartXfer+0x5e4>
 800643c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	b29b      	uxth	r3, r3
 8006442:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006446:	b29a      	uxth	r2, r3
 8006448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800644a:	801a      	strh	r2, [r3, #0]
 800644c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800645a:	b29a      	uxth	r2, r3
 800645c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800645e:	801a      	strh	r2, [r3, #0]
 8006460:	e042      	b.n	80064e8 <USB_EPStartXfer+0x66a>
 8006462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006466:	085b      	lsrs	r3, r3, #1
 8006468:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800646c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d004      	beq.n	8006482 <USB_EPStartXfer+0x604>
 8006478:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800647c:	3301      	adds	r3, #1
 800647e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006482:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006486:	b29b      	uxth	r3, r3
 8006488:	029b      	lsls	r3, r3, #10
 800648a:	b29a      	uxth	r2, r3
 800648c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800648e:	801a      	strh	r2, [r3, #0]
 8006490:	e02a      	b.n	80064e8 <USB_EPStartXfer+0x66a>
 8006492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	785b      	ldrb	r3, [r3, #1]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d122      	bne.n	80064e8 <USB_EPStartXfer+0x66a>
 80064a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	653b      	str	r3, [r7, #80]	; 0x50
 80064ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064bc:	b29b      	uxth	r3, r3
 80064be:	461a      	mov	r2, r3
 80064c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064c2:	4413      	add	r3, r2
 80064c4:	653b      	str	r3, [r7, #80]	; 0x50
 80064c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	00da      	lsls	r2, r3, #3
 80064d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064d6:	4413      	add	r3, r2
 80064d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	891b      	ldrh	r3, [r3, #8]
 80064f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6959      	ldr	r1, [r3, #20]
 8006504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006508:	b29b      	uxth	r3, r3
 800650a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800650e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006512:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006516:	6800      	ldr	r0, [r0, #0]
 8006518:	f001 f921 	bl	800775e <USB_WritePMA>
            ep->xfer_buff += len;
 800651c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695a      	ldr	r2, [r3, #20]
 8006528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800652c:	441a      	add	r2, r3
 800652e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800653a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6a1a      	ldr	r2, [r3, #32]
 8006546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	429a      	cmp	r2, r3
 8006554:	d90f      	bls.n	8006576 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6a1a      	ldr	r2, [r3, #32]
 8006562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006566:	1ad2      	subs	r2, r2, r3
 8006568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	621a      	str	r2, [r3, #32]
 8006574:	e00e      	b.n	8006594 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2200      	movs	r2, #0
 8006592:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006598:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	643b      	str	r3, [r7, #64]	; 0x40
 80065a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	785b      	ldrb	r3, [r3, #1]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d16d      	bne.n	800668c <USB_EPStartXfer+0x80e>
 80065b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80065bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	461a      	mov	r2, r3
 80065ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d0:	4413      	add	r3, r2
 80065d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80065d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	00da      	lsls	r2, r3, #3
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	4413      	add	r3, r2
 80065e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065ea:	637b      	str	r3, [r7, #52]	; 0x34
 80065ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f0:	2b3e      	cmp	r3, #62	; 0x3e
 80065f2:	d91c      	bls.n	800662e <USB_EPStartXfer+0x7b0>
 80065f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80065fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006602:	f003 031f 	and.w	r3, r3, #31
 8006606:	2b00      	cmp	r3, #0
 8006608:	d104      	bne.n	8006614 <USB_EPStartXfer+0x796>
 800660a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660e:	3b01      	subs	r3, #1
 8006610:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006618:	b29b      	uxth	r3, r3
 800661a:	029b      	lsls	r3, r3, #10
 800661c:	b29b      	uxth	r3, r3
 800661e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006626:	b29a      	uxth	r2, r3
 8006628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662a:	801a      	strh	r2, [r3, #0]
 800662c:	e053      	b.n	80066d6 <USB_EPStartXfer+0x858>
 800662e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006632:	2b00      	cmp	r3, #0
 8006634:	d112      	bne.n	800665c <USB_EPStartXfer+0x7de>
 8006636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29b      	uxth	r3, r3
 800663c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006640:	b29a      	uxth	r2, r3
 8006642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006644:	801a      	strh	r2, [r3, #0]
 8006646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	b29b      	uxth	r3, r3
 800664c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006654:	b29a      	uxth	r2, r3
 8006656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006658:	801a      	strh	r2, [r3, #0]
 800665a:	e03c      	b.n	80066d6 <USB_EPStartXfer+0x858>
 800665c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006660:	085b      	lsrs	r3, r3, #1
 8006662:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d004      	beq.n	800667c <USB_EPStartXfer+0x7fe>
 8006672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006676:	3301      	adds	r3, #1
 8006678:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006680:	b29b      	uxth	r3, r3
 8006682:	029b      	lsls	r3, r3, #10
 8006684:	b29a      	uxth	r2, r3
 8006686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	e024      	b.n	80066d6 <USB_EPStartXfer+0x858>
 800668c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	785b      	ldrb	r3, [r3, #1]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d11c      	bne.n	80066d6 <USB_EPStartXfer+0x858>
 800669c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b0:	4413      	add	r3, r2
 80066b2:	643b      	str	r3, [r7, #64]	; 0x40
 80066b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	00da      	lsls	r2, r3, #3
 80066c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c4:	4413      	add	r3, r2
 80066c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80066d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	895b      	ldrh	r3, [r3, #10]
 80066e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6959      	ldr	r1, [r3, #20]
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80066fc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006700:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006704:	6800      	ldr	r0, [r0, #0]
 8006706:	f001 f82a 	bl	800775e <USB_WritePMA>
 800670a:	e213      	b.n	8006b34 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800670c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800671c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006720:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	b29b      	uxth	r3, r3
 800673a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800673e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006742:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	441a      	add	r2, r3
 8006760:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800676c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006774:	b29b      	uxth	r3, r3
 8006776:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006792:	b29b      	uxth	r3, r3
 8006794:	461a      	mov	r2, r3
 8006796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006798:	4413      	add	r3, r2
 800679a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800679c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	00da      	lsls	r2, r3, #3
 80067aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067ac:	4413      	add	r3, r2
 80067ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80067b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80067be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	891b      	ldrh	r3, [r3, #8]
 80067ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6959      	ldr	r1, [r3, #20]
 80067da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067de:	b29b      	uxth	r3, r3
 80067e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80067e4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80067e8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80067ec:	6800      	ldr	r0, [r0, #0]
 80067ee:	f000 ffb6 	bl	800775e <USB_WritePMA>
 80067f2:	e19f      	b.n	8006b34 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80067f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6a1a      	ldr	r2, [r3, #32]
 8006800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006804:	1ad2      	subs	r2, r2, r3
 8006806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800680a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	b29b      	uxth	r3, r3
 8006830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80bc 	beq.w	80069b2 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800683a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800683e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	673b      	str	r3, [r7, #112]	; 0x70
 8006846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800684a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	785b      	ldrb	r3, [r3, #1]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d16d      	bne.n	8006932 <USB_EPStartXfer+0xab4>
 8006856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	66bb      	str	r3, [r7, #104]	; 0x68
 8006862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006870:	b29b      	uxth	r3, r3
 8006872:	461a      	mov	r2, r3
 8006874:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006876:	4413      	add	r3, r2
 8006878:	66bb      	str	r3, [r7, #104]	; 0x68
 800687a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	00da      	lsls	r2, r3, #3
 8006888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800688a:	4413      	add	r3, r2
 800688c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006890:	667b      	str	r3, [r7, #100]	; 0x64
 8006892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006896:	2b3e      	cmp	r3, #62	; 0x3e
 8006898:	d91c      	bls.n	80068d4 <USB_EPStartXfer+0xa56>
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689e:	095b      	lsrs	r3, r3, #5
 80068a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80068a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068a8:	f003 031f 	and.w	r3, r3, #31
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d104      	bne.n	80068ba <USB_EPStartXfer+0xa3c>
 80068b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80068b4:	3b01      	subs	r3, #1
 80068b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80068ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80068be:	b29b      	uxth	r3, r3
 80068c0:	029b      	lsls	r3, r3, #10
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068d0:	801a      	strh	r2, [r3, #0]
 80068d2:	e053      	b.n	800697c <USB_EPStartXfer+0xafe>
 80068d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d112      	bne.n	8006902 <USB_EPStartXfer+0xa84>
 80068dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ea:	801a      	strh	r2, [r3, #0]
 80068ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068fe:	801a      	strh	r2, [r3, #0]
 8006900:	e03c      	b.n	800697c <USB_EPStartXfer+0xafe>
 8006902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006906:	085b      	lsrs	r3, r3, #1
 8006908:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800690c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	d004      	beq.n	8006922 <USB_EPStartXfer+0xaa4>
 8006918:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800691c:	3301      	adds	r3, #1
 800691e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006922:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006926:	b29b      	uxth	r3, r3
 8006928:	029b      	lsls	r3, r3, #10
 800692a:	b29a      	uxth	r2, r3
 800692c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800692e:	801a      	strh	r2, [r3, #0]
 8006930:	e024      	b.n	800697c <USB_EPStartXfer+0xafe>
 8006932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	785b      	ldrb	r3, [r3, #1]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d11c      	bne.n	800697c <USB_EPStartXfer+0xafe>
 8006942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006950:	b29b      	uxth	r3, r3
 8006952:	461a      	mov	r2, r3
 8006954:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006956:	4413      	add	r3, r2
 8006958:	673b      	str	r3, [r7, #112]	; 0x70
 800695a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	00da      	lsls	r2, r3, #3
 8006968:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800696a:	4413      	add	r3, r2
 800696c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006970:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006976:	b29a      	uxth	r2, r3
 8006978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800697a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800697c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	895b      	ldrh	r3, [r3, #10]
 8006988:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800698c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6959      	ldr	r1, [r3, #20]
 8006998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800699c:	b29b      	uxth	r3, r3
 800699e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80069a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80069a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80069aa:	6800      	ldr	r0, [r0, #0]
 80069ac:	f000 fed7 	bl	800775e <USB_WritePMA>
 80069b0:	e0c0      	b.n	8006b34 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	785b      	ldrb	r3, [r3, #1]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d16d      	bne.n	8006a9e <USB_EPStartXfer+0xc20>
 80069c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069dc:	b29b      	uxth	r3, r3
 80069de:	461a      	mov	r2, r3
 80069e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069e2:	4413      	add	r3, r2
 80069e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	00da      	lsls	r2, r3, #3
 80069f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069f6:	4413      	add	r3, r2
 80069f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80069fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a02:	2b3e      	cmp	r3, #62	; 0x3e
 8006a04:	d91c      	bls.n	8006a40 <USB_EPStartXfer+0xbc2>
 8006a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a14:	f003 031f 	and.w	r3, r3, #31
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d104      	bne.n	8006a26 <USB_EPStartXfer+0xba8>
 8006a1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a20:	3b01      	subs	r3, #1
 8006a22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	029b      	lsls	r3, r3, #10
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a3c:	801a      	strh	r2, [r3, #0]
 8006a3e:	e05f      	b.n	8006b00 <USB_EPStartXfer+0xc82>
 8006a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d112      	bne.n	8006a6e <USB_EPStartXfer+0xbf0>
 8006a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a56:	801a      	strh	r2, [r3, #0]
 8006a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a6a:	801a      	strh	r2, [r3, #0]
 8006a6c:	e048      	b.n	8006b00 <USB_EPStartXfer+0xc82>
 8006a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a72:	085b      	lsrs	r3, r3, #1
 8006a74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d004      	beq.n	8006a8e <USB_EPStartXfer+0xc10>
 8006a84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a88:	3301      	adds	r3, #1
 8006a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	029b      	lsls	r3, r3, #10
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a9a:	801a      	strh	r2, [r3, #0]
 8006a9c:	e030      	b.n	8006b00 <USB_EPStartXfer+0xc82>
 8006a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	785b      	ldrb	r3, [r3, #1]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d128      	bne.n	8006b00 <USB_EPStartXfer+0xc82>
 8006aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	00da      	lsls	r2, r3, #3
 8006ae6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006aea:	4413      	add	r3, r2
 8006aec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006af0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006afe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	891b      	ldrh	r3, [r3, #8]
 8006b0c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6959      	ldr	r1, [r3, #20]
 8006b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b26:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b2a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b2e:	6800      	ldr	r0, [r0, #0]
 8006b30:	f000 fe15 	bl	800775e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b5a:	817b      	strh	r3, [r7, #10]
 8006b5c:	897b      	ldrh	r3, [r7, #10]
 8006b5e:	f083 0310 	eor.w	r3, r3, #16
 8006b62:	817b      	strh	r3, [r7, #10]
 8006b64:	897b      	ldrh	r3, [r7, #10]
 8006b66:	f083 0320 	eor.w	r3, r3, #32
 8006b6a:	817b      	strh	r3, [r7, #10]
 8006b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	441a      	add	r2, r3
 8006b86:	897b      	ldrh	r3, [r7, #10]
 8006b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	8013      	strh	r3, [r2, #0]
 8006b9c:	f000 bc9f 	b.w	80074de <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	7b1b      	ldrb	r3, [r3, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f040 80ae 	bne.w	8006d0e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699a      	ldr	r2, [r3, #24]
 8006bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d917      	bls.n	8006bfe <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8006bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699a      	ldr	r2, [r3, #24]
 8006bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bee:	1ad2      	subs	r2, r2, r3
 8006bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	619a      	str	r2, [r3, #24]
 8006bfc:	e00e      	b.n	8006c1c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8006bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c40:	4413      	add	r3, r2
 8006c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	00da      	lsls	r2, r3, #3
 8006c54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c58:	4413      	add	r3, r2
 8006c5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c66:	2b3e      	cmp	r3, #62	; 0x3e
 8006c68:	d91d      	bls.n	8006ca6 <USB_EPStartXfer+0xe28>
 8006c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c6e:	095b      	lsrs	r3, r3, #5
 8006c70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c78:	f003 031f 	and.w	r3, r3, #31
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d104      	bne.n	8006c8a <USB_EPStartXfer+0xe0c>
 8006c80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c84:	3b01      	subs	r3, #1
 8006c86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	029b      	lsls	r3, r3, #10
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ca2:	801a      	strh	r2, [r3, #0]
 8006ca4:	e3e1      	b.n	800746a <USB_EPStartXfer+0x15ec>
 8006ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d116      	bne.n	8006cdc <USB_EPStartXfer+0xe5e>
 8006cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cc0:	801a      	strh	r2, [r3, #0]
 8006cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cd8:	801a      	strh	r2, [r3, #0]
 8006cda:	e3c6      	b.n	800746a <USB_EPStartXfer+0x15ec>
 8006cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce0:	085b      	lsrs	r3, r3, #1
 8006ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d004      	beq.n	8006cfc <USB_EPStartXfer+0xe7e>
 8006cf2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	029b      	lsls	r3, r3, #10
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d0a:	801a      	strh	r2, [r3, #0]
 8006d0c:	e3ad      	b.n	800746a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	78db      	ldrb	r3, [r3, #3]
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	f040 8200 	bne.w	8007120 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	785b      	ldrb	r3, [r3, #1]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f040 8091 	bne.w	8006e54 <USB_EPStartXfer+0xfd6>
 8006d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d56:	4413      	add	r3, r2
 8006d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	00da      	lsls	r2, r3, #3
 8006d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d6e:	4413      	add	r3, r2
 8006d70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2b3e      	cmp	r3, #62	; 0x3e
 8006d86:	d925      	bls.n	8006dd4 <USB_EPStartXfer+0xf56>
 8006d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	095b      	lsrs	r3, r3, #5
 8006d96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 031f 	and.w	r3, r3, #31
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d104      	bne.n	8006db8 <USB_EPStartXfer+0xf3a>
 8006dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db2:	3b01      	subs	r3, #1
 8006db4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	029b      	lsls	r3, r3, #10
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006dd0:	801a      	strh	r2, [r3, #0]
 8006dd2:	e074      	b.n	8006ebe <USB_EPStartXfer+0x1040>
 8006dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d116      	bne.n	8006e12 <USB_EPStartXfer+0xf94>
 8006de4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006df6:	801a      	strh	r2, [r3, #0]
 8006df8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e0e:	801a      	strh	r2, [r3, #0]
 8006e10:	e055      	b.n	8006ebe <USB_EPStartXfer+0x1040>
 8006e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	085b      	lsrs	r3, r3, #1
 8006e20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d004      	beq.n	8006e42 <USB_EPStartXfer+0xfc4>
 8006e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	029b      	lsls	r3, r3, #10
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e50:	801a      	strh	r2, [r3, #0]
 8006e52:	e034      	b.n	8006ebe <USB_EPStartXfer+0x1040>
 8006e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	785b      	ldrb	r3, [r3, #1]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d12c      	bne.n	8006ebe <USB_EPStartXfer+0x1040>
 8006e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	461a      	mov	r2, r3
 8006e84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e88:	4413      	add	r3, r2
 8006e8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	00da      	lsls	r2, r3, #3
 8006e9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ebc:	801a      	strh	r2, [r3, #0]
 8006ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	785b      	ldrb	r3, [r3, #1]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f040 8091 	bne.w	8007000 <USB_EPStartXfer+0x1182>
 8006ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	461a      	mov	r2, r3
 8006efe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f02:	4413      	add	r3, r2
 8006f04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	00da      	lsls	r2, r3, #3
 8006f16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	2b3e      	cmp	r3, #62	; 0x3e
 8006f32:	d925      	bls.n	8006f80 <USB_EPStartXfer+0x1102>
 8006f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	095b      	lsrs	r3, r3, #5
 8006f42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d104      	bne.n	8006f64 <USB_EPStartXfer+0x10e6>
 8006f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	029b      	lsls	r3, r3, #10
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f7c:	801a      	strh	r2, [r3, #0]
 8006f7e:	e06d      	b.n	800705c <USB_EPStartXfer+0x11de>
 8006f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d116      	bne.n	8006fbe <USB_EPStartXfer+0x1140>
 8006f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fa2:	801a      	strh	r2, [r3, #0]
 8006fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fba:	801a      	strh	r2, [r3, #0]
 8006fbc:	e04e      	b.n	800705c <USB_EPStartXfer+0x11de>
 8006fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	085b      	lsrs	r3, r3, #1
 8006fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <USB_EPStartXfer+0x1170>
 8006fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe8:	3301      	adds	r3, #1
 8006fea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	029b      	lsls	r3, r3, #10
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ffc:	801a      	strh	r2, [r3, #0]
 8006ffe:	e02d      	b.n	800705c <USB_EPStartXfer+0x11de>
 8007000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	785b      	ldrb	r3, [r3, #1]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d125      	bne.n	800705c <USB_EPStartXfer+0x11de>
 8007010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800701e:	b29b      	uxth	r3, r3
 8007020:	461a      	mov	r2, r3
 8007022:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007026:	4413      	add	r3, r2
 8007028:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800702c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	00da      	lsls	r2, r3, #3
 800703a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800703e:	4413      	add	r3, r2
 8007040:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007044:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800704c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	b29a      	uxth	r2, r3
 8007056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800705a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800705c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 81fe 	beq.w	800746a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800706e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007072:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800708e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d005      	beq.n	80070a6 <USB_EPStartXfer+0x1228>
 800709a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800709e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10d      	bne.n	80070c2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80070aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f040 81db 	bne.w	800746a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80070b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f040 81d4 	bne.w	800746a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80070c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80070ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	441a      	add	r2, r3
 8007106:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800710a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800710e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007116:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800711a:	b29b      	uxth	r3, r3
 800711c:	8013      	strh	r3, [r2, #0]
 800711e:	e1a4      	b.n	800746a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	78db      	ldrb	r3, [r3, #3]
 800712c:	2b01      	cmp	r3, #1
 800712e:	f040 819a 	bne.w	8007466 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699a      	ldr	r2, [r3, #24]
 800713e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	429a      	cmp	r2, r3
 800714c:	d917      	bls.n	800717e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800714e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800715e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	699a      	ldr	r2, [r3, #24]
 800716a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800716e:	1ad2      	subs	r2, r2, r3
 8007170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	619a      	str	r2, [r3, #24]
 800717c:	e00e      	b.n	800719c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800717e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800718e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2200      	movs	r2, #0
 800719a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800719c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	785b      	ldrb	r3, [r3, #1]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d178      	bne.n	800729e <USB_EPStartXfer+0x1420>
 80071ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80071ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	461a      	mov	r2, r3
 80071cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071d0:	4413      	add	r3, r2
 80071d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80071d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	00da      	lsls	r2, r3, #3
 80071e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071e8:	4413      	add	r3, r2
 80071ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f6:	2b3e      	cmp	r3, #62	; 0x3e
 80071f8:	d91d      	bls.n	8007236 <USB_EPStartXfer+0x13b8>
 80071fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071fe:	095b      	lsrs	r3, r3, #5
 8007200:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007208:	f003 031f 	and.w	r3, r3, #31
 800720c:	2b00      	cmp	r3, #0
 800720e:	d104      	bne.n	800721a <USB_EPStartXfer+0x139c>
 8007210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007214:	3b01      	subs	r3, #1
 8007216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800721a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800721e:	b29b      	uxth	r3, r3
 8007220:	029b      	lsls	r3, r3, #10
 8007222:	b29b      	uxth	r3, r3
 8007224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800722c:	b29a      	uxth	r2, r3
 800722e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007232:	801a      	strh	r2, [r3, #0]
 8007234:	e064      	b.n	8007300 <USB_EPStartXfer+0x1482>
 8007236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800723a:	2b00      	cmp	r3, #0
 800723c:	d116      	bne.n	800726c <USB_EPStartXfer+0x13ee>
 800723e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29b      	uxth	r3, r3
 8007246:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800724a:	b29a      	uxth	r2, r3
 800724c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007250:	801a      	strh	r2, [r3, #0]
 8007252:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	b29b      	uxth	r3, r3
 800725a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800725e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007262:	b29a      	uxth	r2, r3
 8007264:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007268:	801a      	strh	r2, [r3, #0]
 800726a:	e049      	b.n	8007300 <USB_EPStartXfer+0x1482>
 800726c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007270:	085b      	lsrs	r3, r3, #1
 8007272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d004      	beq.n	800728c <USB_EPStartXfer+0x140e>
 8007282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007286:	3301      	adds	r3, #1
 8007288:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800728c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007290:	b29b      	uxth	r3, r3
 8007292:	029b      	lsls	r3, r3, #10
 8007294:	b29a      	uxth	r2, r3
 8007296:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800729a:	801a      	strh	r2, [r3, #0]
 800729c:	e030      	b.n	8007300 <USB_EPStartXfer+0x1482>
 800729e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	785b      	ldrb	r3, [r3, #1]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d128      	bne.n	8007300 <USB_EPStartXfer+0x1482>
 80072ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80072bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072d2:	4413      	add	r3, r2
 80072d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80072d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	00da      	lsls	r2, r3, #3
 80072e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072ea:	4413      	add	r3, r2
 80072ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072fe:	801a      	strh	r2, [r3, #0]
 8007300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800730e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	785b      	ldrb	r3, [r3, #1]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d178      	bne.n	8007410 <USB_EPStartXfer+0x1592>
 800731e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007322:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800732c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007330:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800733a:	b29b      	uxth	r3, r3
 800733c:	461a      	mov	r2, r3
 800733e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007342:	4413      	add	r3, r2
 8007344:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	00da      	lsls	r2, r3, #3
 8007356:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800735a:	4413      	add	r3, r2
 800735c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007368:	2b3e      	cmp	r3, #62	; 0x3e
 800736a:	d91d      	bls.n	80073a8 <USB_EPStartXfer+0x152a>
 800736c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007370:	095b      	lsrs	r3, r3, #5
 8007372:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800737a:	f003 031f 	and.w	r3, r3, #31
 800737e:	2b00      	cmp	r3, #0
 8007380:	d104      	bne.n	800738c <USB_EPStartXfer+0x150e>
 8007382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007386:	3b01      	subs	r3, #1
 8007388:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800738c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007390:	b29b      	uxth	r3, r3
 8007392:	029b      	lsls	r3, r3, #10
 8007394:	b29b      	uxth	r3, r3
 8007396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800739a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800739e:	b29a      	uxth	r2, r3
 80073a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073a4:	801a      	strh	r2, [r3, #0]
 80073a6:	e060      	b.n	800746a <USB_EPStartXfer+0x15ec>
 80073a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d116      	bne.n	80073de <USB_EPStartXfer+0x1560>
 80073b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073bc:	b29a      	uxth	r2, r3
 80073be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073c2:	801a      	strh	r2, [r3, #0]
 80073c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073da:	801a      	strh	r2, [r3, #0]
 80073dc:	e045      	b.n	800746a <USB_EPStartXfer+0x15ec>
 80073de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073e2:	085b      	lsrs	r3, r3, #1
 80073e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d004      	beq.n	80073fe <USB_EPStartXfer+0x1580>
 80073f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073f8:	3301      	adds	r3, #1
 80073fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007402:	b29b      	uxth	r3, r3
 8007404:	029b      	lsls	r3, r3, #10
 8007406:	b29a      	uxth	r2, r3
 8007408:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800740c:	801a      	strh	r2, [r3, #0]
 800740e:	e02c      	b.n	800746a <USB_EPStartXfer+0x15ec>
 8007410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	785b      	ldrb	r3, [r3, #1]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d124      	bne.n	800746a <USB_EPStartXfer+0x15ec>
 8007420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007424:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800742e:	b29b      	uxth	r3, r3
 8007430:	461a      	mov	r2, r3
 8007432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007436:	4413      	add	r3, r2
 8007438:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800743c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	00da      	lsls	r2, r3, #3
 800744a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800744e:	4413      	add	r3, r2
 8007450:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007454:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800745c:	b29a      	uxth	r2, r3
 800745e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007462:	801a      	strh	r2, [r3, #0]
 8007464:	e001      	b.n	800746a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e03a      	b.n	80074e0 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800746a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800746e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	b29b      	uxth	r3, r3
 8007488:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800748c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007490:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007494:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007498:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800749c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80074a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80074a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80074ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	441a      	add	r2, r3
 80074c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80074ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074da:	b29b      	uxth	r3, r3
 80074dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b085      	sub	sp, #20
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	785b      	ldrb	r3, [r3, #1]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d020      	beq.n	800753e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	b29b      	uxth	r3, r3
 800750a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800750e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007512:	81bb      	strh	r3, [r7, #12]
 8007514:	89bb      	ldrh	r3, [r7, #12]
 8007516:	f083 0310 	eor.w	r3, r3, #16
 800751a:	81bb      	strh	r3, [r7, #12]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	441a      	add	r2, r3
 8007526:	89bb      	ldrh	r3, [r7, #12]
 8007528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800752c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007538:	b29b      	uxth	r3, r3
 800753a:	8013      	strh	r3, [r2, #0]
 800753c:	e01f      	b.n	800757e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	b29b      	uxth	r3, r3
 800754c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007554:	81fb      	strh	r3, [r7, #14]
 8007556:	89fb      	ldrh	r3, [r7, #14]
 8007558:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800755c:	81fb      	strh	r3, [r7, #14]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	441a      	add	r2, r3
 8007568:	89fb      	ldrh	r3, [r7, #14]
 800756a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800756e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800757a:	b29b      	uxth	r3, r3
 800757c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800758c:	b480      	push	{r7}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	7b1b      	ldrb	r3, [r3, #12]
 800759a:	2b00      	cmp	r3, #0
 800759c:	f040 809d 	bne.w	80076da <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	785b      	ldrb	r3, [r3, #1]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d04c      	beq.n	8007642 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	823b      	strh	r3, [r7, #16]
 80075b6:	8a3b      	ldrh	r3, [r7, #16]
 80075b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d01b      	beq.n	80075f8 <USB_EPClearStall+0x6c>
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	881b      	ldrh	r3, [r3, #0]
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d6:	81fb      	strh	r3, [r7, #14]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	441a      	add	r2, r3
 80075e2:	89fb      	ldrh	r3, [r7, #14]
 80075e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	78db      	ldrb	r3, [r3, #3]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d06c      	beq.n	80076da <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	b29b      	uxth	r3, r3
 800760e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007616:	81bb      	strh	r3, [r7, #12]
 8007618:	89bb      	ldrh	r3, [r7, #12]
 800761a:	f083 0320 	eor.w	r3, r3, #32
 800761e:	81bb      	strh	r3, [r7, #12]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	441a      	add	r2, r3
 800762a:	89bb      	ldrh	r3, [r7, #12]
 800762c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800763c:	b29b      	uxth	r3, r3
 800763e:	8013      	strh	r3, [r2, #0]
 8007640:	e04b      	b.n	80076da <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	82fb      	strh	r3, [r7, #22]
 8007650:	8afb      	ldrh	r3, [r7, #22]
 8007652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d01b      	beq.n	8007692 <USB_EPClearStall+0x106>
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	b29b      	uxth	r3, r3
 8007668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007670:	82bb      	strh	r3, [r7, #20]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	441a      	add	r2, r3
 800767c:	8abb      	ldrh	r3, [r7, #20]
 800767e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800768a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768e:	b29b      	uxth	r3, r3
 8007690:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a8:	827b      	strh	r3, [r7, #18]
 80076aa:	8a7b      	ldrh	r3, [r7, #18]
 80076ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076b0:	827b      	strh	r3, [r7, #18]
 80076b2:	8a7b      	ldrh	r3, [r7, #18]
 80076b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076b8:	827b      	strh	r3, [r7, #18]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	441a      	add	r2, r3
 80076c4:	8a7b      	ldrh	r3, [r7, #18]
 80076c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	371c      	adds	r7, #28
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80076f4:	78fb      	ldrb	r3, [r7, #3]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d103      	bne.n	8007702 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2280      	movs	r2, #128	; 0x80
 80076fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800771e:	b29b      	uxth	r3, r3
 8007720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007728:	b29a      	uxth	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800773e:	b480      	push	{r7}
 8007740:	b085      	sub	sp, #20
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800774c:	b29b      	uxth	r3, r3
 800774e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007750:	68fb      	ldr	r3, [r7, #12]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800775e:	b480      	push	{r7}
 8007760:	b08d      	sub	sp, #52	; 0x34
 8007762:	af00      	add	r7, sp, #0
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	4611      	mov	r1, r2
 800776a:	461a      	mov	r2, r3
 800776c:	460b      	mov	r3, r1
 800776e:	80fb      	strh	r3, [r7, #6]
 8007770:	4613      	mov	r3, r2
 8007772:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007774:	88bb      	ldrh	r3, [r7, #4]
 8007776:	3301      	adds	r3, #1
 8007778:	085b      	lsrs	r3, r3, #1
 800777a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007784:	88fa      	ldrh	r2, [r7, #6]
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	4413      	add	r3, r2
 800778a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800778e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007794:	e01b      	b.n	80077ce <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	3301      	adds	r3, #1
 80077a0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	021b      	lsls	r3, r3, #8
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	461a      	mov	r2, r3
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80077bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077be:	3302      	adds	r3, #2
 80077c0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	3301      	adds	r3, #1
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	3b01      	subs	r3, #1
 80077cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e0      	bne.n	8007796 <USB_WritePMA+0x38>
  }
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop
 80077d8:	3734      	adds	r7, #52	; 0x34
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b08b      	sub	sp, #44	; 0x2c
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	4611      	mov	r1, r2
 80077ee:	461a      	mov	r2, r3
 80077f0:	460b      	mov	r3, r1
 80077f2:	80fb      	strh	r3, [r7, #6]
 80077f4:	4613      	mov	r3, r2
 80077f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80077f8:	88bb      	ldrh	r3, [r7, #4]
 80077fa:	085b      	lsrs	r3, r3, #1
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007808:	88fa      	ldrh	r2, [r7, #6]
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007812:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
 8007818:	e018      	b.n	800784c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	b29b      	uxth	r3, r3
 8007820:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	3302      	adds	r3, #2
 8007826:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	b2da      	uxtb	r2, r3
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	3301      	adds	r3, #1
 8007834:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	0a1b      	lsrs	r3, r3, #8
 800783a:	b2da      	uxtb	r2, r3
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	3301      	adds	r3, #1
 8007844:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	3b01      	subs	r3, #1
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e3      	bne.n	800781a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007852:	88bb      	ldrh	r3, [r7, #4]
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d007      	beq.n	800786e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	b29b      	uxth	r3, r3
 8007864:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	b2da      	uxtb	r2, r3
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	701a      	strb	r2, [r3, #0]
  }
}
 800786e:	bf00      	nop
 8007870:	372c      	adds	r7, #44	; 0x2c
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	460b      	mov	r3, r1
 8007884:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007886:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800788a:	f002 fb8b 	bl	8009fa4 <USBD_static_malloc>
 800788e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d105      	bne.n	80078a2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800789e:	2302      	movs	r3, #2
 80078a0:	e066      	b.n	8007970 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	7c1b      	ldrb	r3, [r3, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d119      	bne.n	80078e6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078b6:	2202      	movs	r2, #2
 80078b8:	2181      	movs	r1, #129	; 0x81
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f002 fa17 	bl	8009cee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ca:	2202      	movs	r2, #2
 80078cc:	2101      	movs	r1, #1
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f002 fa0d 	bl	8009cee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2210      	movs	r2, #16
 80078e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80078e4:	e016      	b.n	8007914 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078e6:	2340      	movs	r3, #64	; 0x40
 80078e8:	2202      	movs	r2, #2
 80078ea:	2181      	movs	r1, #129	; 0x81
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f002 f9fe 	bl	8009cee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078f8:	2340      	movs	r3, #64	; 0x40
 80078fa:	2202      	movs	r2, #2
 80078fc:	2101      	movs	r1, #1
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f002 f9f5 	bl	8009cee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2210      	movs	r2, #16
 8007910:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007914:	2308      	movs	r3, #8
 8007916:	2203      	movs	r2, #3
 8007918:	2182      	movs	r1, #130	; 0x82
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f002 f9e7 	bl	8009cee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	7c1b      	ldrb	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d109      	bne.n	800795e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007950:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007954:	2101      	movs	r1, #1
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f002 fab9 	bl	8009ece <USBD_LL_PrepareReceive>
 800795c:	e007      	b.n	800796e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007964:	2340      	movs	r3, #64	; 0x40
 8007966:	2101      	movs	r1, #1
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f002 fab0 	bl	8009ece <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007984:	2181      	movs	r1, #129	; 0x81
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f002 f9d7 	bl	8009d3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007992:	2101      	movs	r1, #1
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f002 f9d0 	bl	8009d3a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80079a2:	2182      	movs	r1, #130	; 0x82
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f002 f9c8 	bl	8009d3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00e      	beq.n	80079e2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079d4:	4618      	mov	r0, r3
 80079d6:	f002 faf3 	bl	8009fc0 <USBD_static_free>
    pdev->pClassData = NULL;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e0af      	b.n	8007b74 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d03f      	beq.n	8007aa0 <USBD_CDC_Setup+0xb4>
 8007a20:	2b20      	cmp	r3, #32
 8007a22:	f040 809f 	bne.w	8007b64 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	88db      	ldrh	r3, [r3, #6]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d02e      	beq.n	8007a8c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	b25b      	sxtb	r3, r3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	da16      	bge.n	8007a66 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007a44:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	88d2      	ldrh	r2, [r2, #6]
 8007a4a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	88db      	ldrh	r3, [r3, #6]
 8007a50:	2b07      	cmp	r3, #7
 8007a52:	bf28      	it	cs
 8007a54:	2307      	movcs	r3, #7
 8007a56:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	89fa      	ldrh	r2, [r7, #14]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 fa9f 	bl	8008fa2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007a64:	e085      	b.n	8007b72 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	785a      	ldrb	r2, [r3, #1]
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	88db      	ldrh	r3, [r3, #6]
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a7c:	6939      	ldr	r1, [r7, #16]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	88db      	ldrh	r3, [r3, #6]
 8007a82:	461a      	mov	r2, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 fab8 	bl	8008ffa <USBD_CtlPrepareRx>
      break;
 8007a8a:	e072      	b.n	8007b72 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	7850      	ldrb	r0, [r2, #1]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	4798      	blx	r3
      break;
 8007a9e:	e068      	b.n	8007b72 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	785b      	ldrb	r3, [r3, #1]
 8007aa4:	2b0b      	cmp	r3, #11
 8007aa6:	d852      	bhi.n	8007b4e <USBD_CDC_Setup+0x162>
 8007aa8:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <USBD_CDC_Setup+0xc4>)
 8007aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aae:	bf00      	nop
 8007ab0:	08007ae1 	.word	0x08007ae1
 8007ab4:	08007b5d 	.word	0x08007b5d
 8007ab8:	08007b4f 	.word	0x08007b4f
 8007abc:	08007b4f 	.word	0x08007b4f
 8007ac0:	08007b4f 	.word	0x08007b4f
 8007ac4:	08007b4f 	.word	0x08007b4f
 8007ac8:	08007b4f 	.word	0x08007b4f
 8007acc:	08007b4f 	.word	0x08007b4f
 8007ad0:	08007b4f 	.word	0x08007b4f
 8007ad4:	08007b4f 	.word	0x08007b4f
 8007ad8:	08007b0b 	.word	0x08007b0b
 8007adc:	08007b35 	.word	0x08007b35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d107      	bne.n	8007afc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007aec:	f107 030a 	add.w	r3, r7, #10
 8007af0:	2202      	movs	r2, #2
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f001 fa54 	bl	8008fa2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007afa:	e032      	b.n	8007b62 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f001 f9de 	bl	8008ec0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b04:	2303      	movs	r3, #3
 8007b06:	75fb      	strb	r3, [r7, #23]
          break;
 8007b08:	e02b      	b.n	8007b62 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d107      	bne.n	8007b26 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b16:	f107 030d 	add.w	r3, r7, #13
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 fa3f 	bl	8008fa2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b24:	e01d      	b.n	8007b62 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007b26:	6839      	ldr	r1, [r7, #0]
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f001 f9c9 	bl	8008ec0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	75fb      	strb	r3, [r7, #23]
          break;
 8007b32:	e016      	b.n	8007b62 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d00f      	beq.n	8007b60 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f001 f9bc 	bl	8008ec0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b4c:	e008      	b.n	8007b60 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 f9b5 	bl	8008ec0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b56:	2303      	movs	r3, #3
 8007b58:	75fb      	strb	r3, [r7, #23]
          break;
 8007b5a:	e002      	b.n	8007b62 <USBD_CDC_Setup+0x176>
          break;
 8007b5c:	bf00      	nop
 8007b5e:	e008      	b.n	8007b72 <USBD_CDC_Setup+0x186>
          break;
 8007b60:	bf00      	nop
      }
      break;
 8007b62:	e006      	b.n	8007b72 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f001 f9aa 	bl	8008ec0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b70:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e04f      	b.n	8007c3e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ba4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007ba6:	78fa      	ldrb	r2, [r7, #3]
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	4613      	mov	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	440b      	add	r3, r1
 8007bb4:	3318      	adds	r3, #24
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d029      	beq.n	8007c10 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007bbc:	78fa      	ldrb	r2, [r7, #3]
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	440b      	add	r3, r1
 8007bca:	3318      	adds	r3, #24
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	78f9      	ldrb	r1, [r7, #3]
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	440b      	add	r3, r1
 8007bd8:	00db      	lsls	r3, r3, #3
 8007bda:	4403      	add	r3, r0
 8007bdc:	3338      	adds	r3, #56	; 0x38
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007be4:	fb01 f303 	mul.w	r3, r1, r3
 8007be8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d110      	bne.n	8007c10 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007bee:	78fa      	ldrb	r2, [r7, #3]
 8007bf0:	6879      	ldr	r1, [r7, #4]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	440b      	add	r3, r1
 8007bfc:	3318      	adds	r3, #24
 8007bfe:	2200      	movs	r2, #0
 8007c00:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c02:	78f9      	ldrb	r1, [r7, #3]
 8007c04:	2300      	movs	r3, #0
 8007c06:	2200      	movs	r2, #0
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f002 f93f 	bl	8009e8c <USBD_LL_Transmit>
 8007c0e:	e015      	b.n	8007c3c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00b      	beq.n	8007c3c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007c38:	78fa      	ldrb	r2, [r7, #3]
 8007c3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	460b      	mov	r3, r1
 8007c50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e015      	b.n	8007c94 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c68:	78fb      	ldrb	r3, [r7, #3]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f002 f94f 	bl	8009f10 <USBD_LL_GetRxDataSize>
 8007c72:	4602      	mov	r2, r0
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c8e:	4611      	mov	r1, r2
 8007c90:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007caa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e01b      	b.n	8007cee <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d015      	beq.n	8007cec <USBD_CDC_EP0_RxReady+0x50>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007cc6:	2bff      	cmp	r3, #255	; 0xff
 8007cc8:	d010      	beq.n	8007cec <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007cd8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ce0:	b292      	uxth	r2, r2
 8007ce2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	22ff      	movs	r2, #255	; 0xff
 8007ce8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
	...

08007cf8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2243      	movs	r2, #67	; 0x43
 8007d04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007d06:	4b03      	ldr	r3, [pc, #12]	; (8007d14 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	20000098 	.word	0x20000098

08007d18 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2243      	movs	r2, #67	; 0x43
 8007d24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007d26:	4b03      	ldr	r3, [pc, #12]	; (8007d34 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	20000054 	.word	0x20000054

08007d38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2243      	movs	r2, #67	; 0x43
 8007d44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007d46:	4b03      	ldr	r3, [pc, #12]	; (8007d54 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	200000dc 	.word	0x200000dc

08007d58 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	220a      	movs	r2, #10
 8007d64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d66:	4b03      	ldr	r3, [pc, #12]	; (8007d74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	20000010 	.word	0x20000010

08007d78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d101      	bne.n	8007d8c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e004      	b.n	8007d96 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b087      	sub	sp, #28
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007db4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e008      	b.n	8007dd2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	371c      	adds	r7, #28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b085      	sub	sp, #20
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e004      	b.n	8007e04 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e016      	b.n	8007e5c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	7c1b      	ldrb	r3, [r3, #16]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d109      	bne.n	8007e4a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e40:	2101      	movs	r1, #1
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f002 f843 	bl	8009ece <USBD_LL_PrepareReceive>
 8007e48:	e007      	b.n	8007e5a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e50:	2340      	movs	r3, #64	; 0x40
 8007e52:	2101      	movs	r1, #1
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f002 f83a 	bl	8009ece <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e01f      	b.n	8007ebc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	79fa      	ldrb	r2, [r7, #7]
 8007eae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f001 fe9f 	bl	8009bf4 <USBD_LL_Init>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e016      	b.n	8007f0a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00b      	beq.n	8007f08 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef8:	f107 020e 	add.w	r2, r7, #14
 8007efc:	4610      	mov	r0, r2
 8007efe:	4798      	blx	r3
 8007f00:	4602      	mov	r2, r0
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b082      	sub	sp, #8
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 fecc 	bl	8009cb8 <USBD_LL_Start>
 8007f20:	4603      	mov	r3, r0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d009      	beq.n	8007f6e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	78fa      	ldrb	r2, [r7, #3]
 8007f64:	4611      	mov	r1, r2
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	4798      	blx	r3
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d007      	beq.n	8007f9e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	78fa      	ldrb	r2, [r7, #3]
 8007f98:	4611      	mov	r1, r2
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	4798      	blx	r3
  }

  return USBD_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 ff46 	bl	8008e4c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007fce:	461a      	mov	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fdc:	f003 031f 	and.w	r3, r3, #31
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d01a      	beq.n	800801a <USBD_LL_SetupStage+0x72>
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d822      	bhi.n	800802e <USBD_LL_SetupStage+0x86>
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <USBD_LL_SetupStage+0x4a>
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d00a      	beq.n	8008006 <USBD_LL_SetupStage+0x5e>
 8007ff0:	e01d      	b.n	800802e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f9ee 	bl	80083dc <USBD_StdDevReq>
 8008000:	4603      	mov	r3, r0
 8008002:	73fb      	strb	r3, [r7, #15]
      break;
 8008004:	e020      	b.n	8008048 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fa52 	bl	80084b8 <USBD_StdItfReq>
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]
      break;
 8008018:	e016      	b.n	8008048 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fa91 	bl	800854a <USBD_StdEPReq>
 8008028:	4603      	mov	r3, r0
 800802a:	73fb      	strb	r3, [r7, #15]
      break;
 800802c:	e00c      	b.n	8008048 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008034:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008038:	b2db      	uxtb	r3, r3
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 fe9b 	bl	8009d78 <USBD_LL_StallEP>
 8008042:	4603      	mov	r3, r0
 8008044:	73fb      	strb	r3, [r7, #15]
      break;
 8008046:	bf00      	nop
  }

  return ret;
 8008048:	7bfb      	ldrb	r3, [r7, #15]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b086      	sub	sp, #24
 8008056:	af00      	add	r7, sp, #0
 8008058:	60f8      	str	r0, [r7, #12]
 800805a:	460b      	mov	r3, r1
 800805c:	607a      	str	r2, [r7, #4]
 800805e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008060:	7afb      	ldrb	r3, [r7, #11]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d138      	bne.n	80080d8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800806c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008074:	2b03      	cmp	r3, #3
 8008076:	d14a      	bne.n	800810e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	429a      	cmp	r2, r3
 8008082:	d913      	bls.n	80080ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	689a      	ldr	r2, [r3, #8]
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	1ad2      	subs	r2, r2, r3
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	68da      	ldr	r2, [r3, #12]
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	4293      	cmp	r3, r2
 800809c:	bf28      	it	cs
 800809e:	4613      	movcs	r3, r2
 80080a0:	461a      	mov	r2, r3
 80080a2:	6879      	ldr	r1, [r7, #4]
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 ffc5 	bl	8009034 <USBD_CtlContinueRx>
 80080aa:	e030      	b.n	800810e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	2b03      	cmp	r3, #3
 80080b6:	d10b      	bne.n	80080d0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d005      	beq.n	80080d0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 ffc0 	bl	8009056 <USBD_CtlSendStatus>
 80080d6:	e01a      	b.n	800810e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b03      	cmp	r3, #3
 80080e2:	d114      	bne.n	800810e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00e      	beq.n	800810e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	7afa      	ldrb	r2, [r7, #11]
 80080fa:	4611      	mov	r1, r2
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	4798      	blx	r3
 8008100:	4603      	mov	r3, r0
 8008102:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008104:	7dfb      	ldrb	r3, [r7, #23]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800810a:	7dfb      	ldrb	r3, [r7, #23]
 800810c:	e000      	b.n	8008110 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	460b      	mov	r3, r1
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008126:	7afb      	ldrb	r3, [r7, #11]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d16b      	bne.n	8008204 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	3314      	adds	r3, #20
 8008130:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008138:	2b02      	cmp	r3, #2
 800813a:	d156      	bne.n	80081ea <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	689a      	ldr	r2, [r3, #8]
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	429a      	cmp	r2, r3
 8008146:	d914      	bls.n	8008172 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	689a      	ldr	r2, [r3, #8]
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	1ad2      	subs	r2, r2, r3
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	461a      	mov	r2, r3
 800815c:	6879      	ldr	r1, [r7, #4]
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 ff3a 	bl	8008fd8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008164:	2300      	movs	r3, #0
 8008166:	2200      	movs	r2, #0
 8008168:	2100      	movs	r1, #0
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f001 feaf 	bl	8009ece <USBD_LL_PrepareReceive>
 8008170:	e03b      	b.n	80081ea <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	429a      	cmp	r2, r3
 800817c:	d11c      	bne.n	80081b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	685a      	ldr	r2, [r3, #4]
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008186:	429a      	cmp	r2, r3
 8008188:	d316      	bcc.n	80081b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008194:	429a      	cmp	r2, r3
 8008196:	d20f      	bcs.n	80081b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008198:	2200      	movs	r2, #0
 800819a:	2100      	movs	r1, #0
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 ff1b 	bl	8008fd8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081aa:	2300      	movs	r3, #0
 80081ac:	2200      	movs	r2, #0
 80081ae:	2100      	movs	r1, #0
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f001 fe8c 	bl	8009ece <USBD_LL_PrepareReceive>
 80081b6:	e018      	b.n	80081ea <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d10b      	bne.n	80081dc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d005      	beq.n	80081dc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80081dc:	2180      	movs	r1, #128	; 0x80
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f001 fdca 	bl	8009d78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 ff49 	bl	800907c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d122      	bne.n	800823a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f7ff fe98 	bl	8007f2a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008202:	e01a      	b.n	800823a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b03      	cmp	r3, #3
 800820e:	d114      	bne.n	800823a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00e      	beq.n	800823a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	7afa      	ldrb	r2, [r7, #11]
 8008226:	4611      	mov	r1, r2
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	4798      	blx	r3
 800822c:	4603      	mov	r3, r0
 800822e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008236:	7dfb      	ldrb	r3, [r7, #23]
 8008238:	e000      	b.n	800823c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008274:	2303      	movs	r3, #3
 8008276:	e02f      	b.n	80082d8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00f      	beq.n	80082a2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d009      	beq.n	80082a2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	6852      	ldr	r2, [r2, #4]
 800829a:	b2d2      	uxtb	r2, r2
 800829c:	4611      	mov	r1, r2
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082a2:	2340      	movs	r3, #64	; 0x40
 80082a4:	2200      	movs	r2, #0
 80082a6:	2100      	movs	r1, #0
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 fd20 	bl	8009cee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2240      	movs	r2, #64	; 0x40
 80082ba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082be:	2340      	movs	r3, #64	; 0x40
 80082c0:	2200      	movs	r2, #0
 80082c2:	2180      	movs	r1, #128	; 0x80
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f001 fd12 	bl	8009cee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2240      	movs	r2, #64	; 0x40
 80082d4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	78fa      	ldrb	r2, [r7, #3]
 80082f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800830e:	b2da      	uxtb	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2204      	movs	r2, #4
 800831a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b04      	cmp	r3, #4
 800833e:	d106      	bne.n	800834e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008346:	b2da      	uxtb	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800836e:	2303      	movs	r3, #3
 8008370:	e012      	b.n	8008398 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b03      	cmp	r3, #3
 800837c:	d10b      	bne.n	8008396 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d005      	beq.n	8008396 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008390:	69db      	ldr	r3, [r3, #28]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	3301      	adds	r3, #1
 80083b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083be:	8a3b      	ldrh	r3, [r7, #16]
 80083c0:	021b      	lsls	r3, r3, #8
 80083c2:	b21a      	sxth	r2, r3
 80083c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	b21b      	sxth	r3, r3
 80083cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083ce:	89fb      	ldrh	r3, [r7, #14]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	371c      	adds	r7, #28
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083f2:	2b40      	cmp	r3, #64	; 0x40
 80083f4:	d005      	beq.n	8008402 <USBD_StdDevReq+0x26>
 80083f6:	2b40      	cmp	r3, #64	; 0x40
 80083f8:	d853      	bhi.n	80084a2 <USBD_StdDevReq+0xc6>
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00b      	beq.n	8008416 <USBD_StdDevReq+0x3a>
 80083fe:	2b20      	cmp	r3, #32
 8008400:	d14f      	bne.n	80084a2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	4798      	blx	r3
 8008410:	4603      	mov	r3, r0
 8008412:	73fb      	strb	r3, [r7, #15]
      break;
 8008414:	e04a      	b.n	80084ac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	785b      	ldrb	r3, [r3, #1]
 800841a:	2b09      	cmp	r3, #9
 800841c:	d83b      	bhi.n	8008496 <USBD_StdDevReq+0xba>
 800841e:	a201      	add	r2, pc, #4	; (adr r2, 8008424 <USBD_StdDevReq+0x48>)
 8008420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008424:	08008479 	.word	0x08008479
 8008428:	0800848d 	.word	0x0800848d
 800842c:	08008497 	.word	0x08008497
 8008430:	08008483 	.word	0x08008483
 8008434:	08008497 	.word	0x08008497
 8008438:	08008457 	.word	0x08008457
 800843c:	0800844d 	.word	0x0800844d
 8008440:	08008497 	.word	0x08008497
 8008444:	0800846f 	.word	0x0800846f
 8008448:	08008461 	.word	0x08008461
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f9de 	bl	8008810 <USBD_GetDescriptor>
          break;
 8008454:	e024      	b.n	80084a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fb6d 	bl	8008b38 <USBD_SetAddress>
          break;
 800845e:	e01f      	b.n	80084a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fbac 	bl	8008bc0 <USBD_SetConfig>
 8008468:	4603      	mov	r3, r0
 800846a:	73fb      	strb	r3, [r7, #15]
          break;
 800846c:	e018      	b.n	80084a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fc4b 	bl	8008d0c <USBD_GetConfig>
          break;
 8008476:	e013      	b.n	80084a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fc7c 	bl	8008d78 <USBD_GetStatus>
          break;
 8008480:	e00e      	b.n	80084a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fcab 	bl	8008de0 <USBD_SetFeature>
          break;
 800848a:	e009      	b.n	80084a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fcba 	bl	8008e08 <USBD_ClrFeature>
          break;
 8008494:	e004      	b.n	80084a0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fd11 	bl	8008ec0 <USBD_CtlError>
          break;
 800849e:	bf00      	nop
      }
      break;
 80084a0:	e004      	b.n	80084ac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fd0b 	bl	8008ec0 <USBD_CtlError>
      break;
 80084aa:	bf00      	nop
  }

  return ret;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop

080084b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084ce:	2b40      	cmp	r3, #64	; 0x40
 80084d0:	d005      	beq.n	80084de <USBD_StdItfReq+0x26>
 80084d2:	2b40      	cmp	r3, #64	; 0x40
 80084d4:	d82f      	bhi.n	8008536 <USBD_StdItfReq+0x7e>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <USBD_StdItfReq+0x26>
 80084da:	2b20      	cmp	r3, #32
 80084dc:	d12b      	bne.n	8008536 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	3b01      	subs	r3, #1
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d81d      	bhi.n	8008528 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	889b      	ldrh	r3, [r3, #4]
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d813      	bhi.n	800851e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	4798      	blx	r3
 8008504:	4603      	mov	r3, r0
 8008506:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	88db      	ldrh	r3, [r3, #6]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d110      	bne.n	8008532 <USBD_StdItfReq+0x7a>
 8008510:	7bfb      	ldrb	r3, [r7, #15]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10d      	bne.n	8008532 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fd9d 	bl	8009056 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800851c:	e009      	b.n	8008532 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fccd 	bl	8008ec0 <USBD_CtlError>
          break;
 8008526:	e004      	b.n	8008532 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fcc8 	bl	8008ec0 <USBD_CtlError>
          break;
 8008530:	e000      	b.n	8008534 <USBD_StdItfReq+0x7c>
          break;
 8008532:	bf00      	nop
      }
      break;
 8008534:	e004      	b.n	8008540 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fcc1 	bl	8008ec0 <USBD_CtlError>
      break;
 800853e:	bf00      	nop
  }

  return ret;
 8008540:	7bfb      	ldrb	r3, [r7, #15]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b084      	sub	sp, #16
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008554:	2300      	movs	r3, #0
 8008556:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	889b      	ldrh	r3, [r3, #4]
 800855c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008566:	2b40      	cmp	r3, #64	; 0x40
 8008568:	d007      	beq.n	800857a <USBD_StdEPReq+0x30>
 800856a:	2b40      	cmp	r3, #64	; 0x40
 800856c:	f200 8145 	bhi.w	80087fa <USBD_StdEPReq+0x2b0>
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00c      	beq.n	800858e <USBD_StdEPReq+0x44>
 8008574:	2b20      	cmp	r3, #32
 8008576:	f040 8140 	bne.w	80087fa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	4798      	blx	r3
 8008588:	4603      	mov	r3, r0
 800858a:	73fb      	strb	r3, [r7, #15]
      break;
 800858c:	e13a      	b.n	8008804 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	785b      	ldrb	r3, [r3, #1]
 8008592:	2b03      	cmp	r3, #3
 8008594:	d007      	beq.n	80085a6 <USBD_StdEPReq+0x5c>
 8008596:	2b03      	cmp	r3, #3
 8008598:	f300 8129 	bgt.w	80087ee <USBD_StdEPReq+0x2a4>
 800859c:	2b00      	cmp	r3, #0
 800859e:	d07f      	beq.n	80086a0 <USBD_StdEPReq+0x156>
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d03c      	beq.n	800861e <USBD_StdEPReq+0xd4>
 80085a4:	e123      	b.n	80087ee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d002      	beq.n	80085b8 <USBD_StdEPReq+0x6e>
 80085b2:	2b03      	cmp	r3, #3
 80085b4:	d016      	beq.n	80085e4 <USBD_StdEPReq+0x9a>
 80085b6:	e02c      	b.n	8008612 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00d      	beq.n	80085da <USBD_StdEPReq+0x90>
 80085be:	7bbb      	ldrb	r3, [r7, #14]
 80085c0:	2b80      	cmp	r3, #128	; 0x80
 80085c2:	d00a      	beq.n	80085da <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f001 fbd5 	bl	8009d78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085ce:	2180      	movs	r1, #128	; 0x80
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 fbd1 	bl	8009d78 <USBD_LL_StallEP>
 80085d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085d8:	e020      	b.n	800861c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fc6f 	bl	8008ec0 <USBD_CtlError>
              break;
 80085e2:	e01b      	b.n	800861c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	885b      	ldrh	r3, [r3, #2]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10e      	bne.n	800860a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00b      	beq.n	800860a <USBD_StdEPReq+0xc0>
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	2b80      	cmp	r3, #128	; 0x80
 80085f6:	d008      	beq.n	800860a <USBD_StdEPReq+0xc0>
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	88db      	ldrh	r3, [r3, #6]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d104      	bne.n	800860a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f001 fbb7 	bl	8009d78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fd23 	bl	8009056 <USBD_CtlSendStatus>

              break;
 8008610:	e004      	b.n	800861c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008612:	6839      	ldr	r1, [r7, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fc53 	bl	8008ec0 <USBD_CtlError>
              break;
 800861a:	bf00      	nop
          }
          break;
 800861c:	e0ec      	b.n	80087f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b02      	cmp	r3, #2
 8008628:	d002      	beq.n	8008630 <USBD_StdEPReq+0xe6>
 800862a:	2b03      	cmp	r3, #3
 800862c:	d016      	beq.n	800865c <USBD_StdEPReq+0x112>
 800862e:	e030      	b.n	8008692 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008630:	7bbb      	ldrb	r3, [r7, #14]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00d      	beq.n	8008652 <USBD_StdEPReq+0x108>
 8008636:	7bbb      	ldrb	r3, [r7, #14]
 8008638:	2b80      	cmp	r3, #128	; 0x80
 800863a:	d00a      	beq.n	8008652 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 fb99 	bl	8009d78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008646:	2180      	movs	r1, #128	; 0x80
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f001 fb95 	bl	8009d78 <USBD_LL_StallEP>
 800864e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008650:	e025      	b.n	800869e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fc33 	bl	8008ec0 <USBD_CtlError>
              break;
 800865a:	e020      	b.n	800869e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	885b      	ldrh	r3, [r3, #2]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d11b      	bne.n	800869c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800866a:	2b00      	cmp	r3, #0
 800866c:	d004      	beq.n	8008678 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800866e:	7bbb      	ldrb	r3, [r7, #14]
 8008670:	4619      	mov	r1, r3
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f001 fb9f 	bl	8009db6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fcec 	bl	8009056 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	4798      	blx	r3
 800868c:	4603      	mov	r3, r0
 800868e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008690:	e004      	b.n	800869c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fc13 	bl	8008ec0 <USBD_CtlError>
              break;
 800869a:	e000      	b.n	800869e <USBD_StdEPReq+0x154>
              break;
 800869c:	bf00      	nop
          }
          break;
 800869e:	e0ab      	b.n	80087f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d002      	beq.n	80086b2 <USBD_StdEPReq+0x168>
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d032      	beq.n	8008716 <USBD_StdEPReq+0x1cc>
 80086b0:	e097      	b.n	80087e2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d007      	beq.n	80086c8 <USBD_StdEPReq+0x17e>
 80086b8:	7bbb      	ldrb	r3, [r7, #14]
 80086ba:	2b80      	cmp	r3, #128	; 0x80
 80086bc:	d004      	beq.n	80086c8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fbfd 	bl	8008ec0 <USBD_CtlError>
                break;
 80086c6:	e091      	b.n	80087ec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	da0b      	bge.n	80086e8 <USBD_StdEPReq+0x19e>
 80086d0:	7bbb      	ldrb	r3, [r7, #14]
 80086d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086d6:	4613      	mov	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	3310      	adds	r3, #16
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	4413      	add	r3, r2
 80086e4:	3304      	adds	r3, #4
 80086e6:	e00b      	b.n	8008700 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
 80086ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086ee:	4613      	mov	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	4413      	add	r3, r2
 80086fe:	3304      	adds	r3, #4
 8008700:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	2200      	movs	r2, #0
 8008706:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2202      	movs	r2, #2
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fc47 	bl	8008fa2 <USBD_CtlSendData>
              break;
 8008714:	e06a      	b.n	80087ec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008716:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800871a:	2b00      	cmp	r3, #0
 800871c:	da11      	bge.n	8008742 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	f003 020f 	and.w	r2, r3, #15
 8008724:	6879      	ldr	r1, [r7, #4]
 8008726:	4613      	mov	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	440b      	add	r3, r1
 8008730:	3324      	adds	r3, #36	; 0x24
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d117      	bne.n	8008768 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fbc0 	bl	8008ec0 <USBD_CtlError>
                  break;
 8008740:	e054      	b.n	80087ec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	f003 020f 	and.w	r2, r3, #15
 8008748:	6879      	ldr	r1, [r7, #4]
 800874a:	4613      	mov	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	440b      	add	r3, r1
 8008754:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d104      	bne.n	8008768 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800875e:	6839      	ldr	r1, [r7, #0]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fbad 	bl	8008ec0 <USBD_CtlError>
                  break;
 8008766:	e041      	b.n	80087ec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800876c:	2b00      	cmp	r3, #0
 800876e:	da0b      	bge.n	8008788 <USBD_StdEPReq+0x23e>
 8008770:	7bbb      	ldrb	r3, [r7, #14]
 8008772:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008776:	4613      	mov	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	3310      	adds	r3, #16
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	4413      	add	r3, r2
 8008784:	3304      	adds	r3, #4
 8008786:	e00b      	b.n	80087a0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800878e:	4613      	mov	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	4413      	add	r3, r2
 800879e:	3304      	adds	r3, #4
 80087a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087a2:	7bbb      	ldrb	r3, [r7, #14]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d002      	beq.n	80087ae <USBD_StdEPReq+0x264>
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
 80087aa:	2b80      	cmp	r3, #128	; 0x80
 80087ac:	d103      	bne.n	80087b6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	2200      	movs	r2, #0
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	e00e      	b.n	80087d4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087b6:	7bbb      	ldrb	r3, [r7, #14]
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f001 fb1a 	bl	8009df4 <USBD_LL_IsStallEP>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	2201      	movs	r2, #1
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	e002      	b.n	80087d4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2200      	movs	r2, #0
 80087d2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	2202      	movs	r2, #2
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fbe1 	bl	8008fa2 <USBD_CtlSendData>
              break;
 80087e0:	e004      	b.n	80087ec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fb6b 	bl	8008ec0 <USBD_CtlError>
              break;
 80087ea:	bf00      	nop
          }
          break;
 80087ec:	e004      	b.n	80087f8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fb65 	bl	8008ec0 <USBD_CtlError>
          break;
 80087f6:	bf00      	nop
      }
      break;
 80087f8:	e004      	b.n	8008804 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fb5f 	bl	8008ec0 <USBD_CtlError>
      break;
 8008802:	bf00      	nop
  }

  return ret;
 8008804:	7bfb      	ldrb	r3, [r7, #15]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
	...

08008810 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800881e:	2300      	movs	r3, #0
 8008820:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	885b      	ldrh	r3, [r3, #2]
 800882a:	0a1b      	lsrs	r3, r3, #8
 800882c:	b29b      	uxth	r3, r3
 800882e:	3b01      	subs	r3, #1
 8008830:	2b0e      	cmp	r3, #14
 8008832:	f200 8152 	bhi.w	8008ada <USBD_GetDescriptor+0x2ca>
 8008836:	a201      	add	r2, pc, #4	; (adr r2, 800883c <USBD_GetDescriptor+0x2c>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	080088ad 	.word	0x080088ad
 8008840:	080088c5 	.word	0x080088c5
 8008844:	08008905 	.word	0x08008905
 8008848:	08008adb 	.word	0x08008adb
 800884c:	08008adb 	.word	0x08008adb
 8008850:	08008a7b 	.word	0x08008a7b
 8008854:	08008aa7 	.word	0x08008aa7
 8008858:	08008adb 	.word	0x08008adb
 800885c:	08008adb 	.word	0x08008adb
 8008860:	08008adb 	.word	0x08008adb
 8008864:	08008adb 	.word	0x08008adb
 8008868:	08008adb 	.word	0x08008adb
 800886c:	08008adb 	.word	0x08008adb
 8008870:	08008adb 	.word	0x08008adb
 8008874:	08008879 	.word	0x08008879
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887e:	69db      	ldr	r3, [r3, #28]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00b      	beq.n	800889c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888a:	69db      	ldr	r3, [r3, #28]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	7c12      	ldrb	r2, [r2, #16]
 8008890:	f107 0108 	add.w	r1, r7, #8
 8008894:	4610      	mov	r0, r2
 8008896:	4798      	blx	r3
 8008898:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800889a:	e126      	b.n	8008aea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fb0e 	bl	8008ec0 <USBD_CtlError>
        err++;
 80088a4:	7afb      	ldrb	r3, [r7, #11]
 80088a6:	3301      	adds	r3, #1
 80088a8:	72fb      	strb	r3, [r7, #11]
      break;
 80088aa:	e11e      	b.n	8008aea <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	7c12      	ldrb	r2, [r2, #16]
 80088b8:	f107 0108 	add.w	r1, r7, #8
 80088bc:	4610      	mov	r0, r2
 80088be:	4798      	blx	r3
 80088c0:	60f8      	str	r0, [r7, #12]
      break;
 80088c2:	e112      	b.n	8008aea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	7c1b      	ldrb	r3, [r3, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10d      	bne.n	80088e8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d4:	f107 0208 	add.w	r2, r7, #8
 80088d8:	4610      	mov	r0, r2
 80088da:	4798      	blx	r3
 80088dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3301      	adds	r3, #1
 80088e2:	2202      	movs	r2, #2
 80088e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088e6:	e100      	b.n	8008aea <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f0:	f107 0208 	add.w	r2, r7, #8
 80088f4:	4610      	mov	r0, r2
 80088f6:	4798      	blx	r3
 80088f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3301      	adds	r3, #1
 80088fe:	2202      	movs	r2, #2
 8008900:	701a      	strb	r2, [r3, #0]
      break;
 8008902:	e0f2      	b.n	8008aea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	885b      	ldrh	r3, [r3, #2]
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b05      	cmp	r3, #5
 800890c:	f200 80ac 	bhi.w	8008a68 <USBD_GetDescriptor+0x258>
 8008910:	a201      	add	r2, pc, #4	; (adr r2, 8008918 <USBD_GetDescriptor+0x108>)
 8008912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008916:	bf00      	nop
 8008918:	08008931 	.word	0x08008931
 800891c:	08008965 	.word	0x08008965
 8008920:	08008999 	.word	0x08008999
 8008924:	080089cd 	.word	0x080089cd
 8008928:	08008a01 	.word	0x08008a01
 800892c:	08008a35 	.word	0x08008a35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00b      	beq.n	8008954 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	7c12      	ldrb	r2, [r2, #16]
 8008948:	f107 0108 	add.w	r1, r7, #8
 800894c:	4610      	mov	r0, r2
 800894e:	4798      	blx	r3
 8008950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008952:	e091      	b.n	8008a78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fab2 	bl	8008ec0 <USBD_CtlError>
            err++;
 800895c:	7afb      	ldrb	r3, [r7, #11]
 800895e:	3301      	adds	r3, #1
 8008960:	72fb      	strb	r3, [r7, #11]
          break;
 8008962:	e089      	b.n	8008a78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00b      	beq.n	8008988 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	7c12      	ldrb	r2, [r2, #16]
 800897c:	f107 0108 	add.w	r1, r7, #8
 8008980:	4610      	mov	r0, r2
 8008982:	4798      	blx	r3
 8008984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008986:	e077      	b.n	8008a78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa98 	bl	8008ec0 <USBD_CtlError>
            err++;
 8008990:	7afb      	ldrb	r3, [r7, #11]
 8008992:	3301      	adds	r3, #1
 8008994:	72fb      	strb	r3, [r7, #11]
          break;
 8008996:	e06f      	b.n	8008a78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00b      	beq.n	80089bc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	7c12      	ldrb	r2, [r2, #16]
 80089b0:	f107 0108 	add.w	r1, r7, #8
 80089b4:	4610      	mov	r0, r2
 80089b6:	4798      	blx	r3
 80089b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ba:	e05d      	b.n	8008a78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fa7e 	bl	8008ec0 <USBD_CtlError>
            err++;
 80089c4:	7afb      	ldrb	r3, [r7, #11]
 80089c6:	3301      	adds	r3, #1
 80089c8:	72fb      	strb	r3, [r7, #11]
          break;
 80089ca:	e055      	b.n	8008a78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00b      	beq.n	80089f0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	7c12      	ldrb	r2, [r2, #16]
 80089e4:	f107 0108 	add.w	r1, r7, #8
 80089e8:	4610      	mov	r0, r2
 80089ea:	4798      	blx	r3
 80089ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ee:	e043      	b.n	8008a78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fa64 	bl	8008ec0 <USBD_CtlError>
            err++;
 80089f8:	7afb      	ldrb	r3, [r7, #11]
 80089fa:	3301      	adds	r3, #1
 80089fc:	72fb      	strb	r3, [r7, #11]
          break;
 80089fe:	e03b      	b.n	8008a78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00b      	beq.n	8008a24 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	7c12      	ldrb	r2, [r2, #16]
 8008a18:	f107 0108 	add.w	r1, r7, #8
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	4798      	blx	r3
 8008a20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a22:	e029      	b.n	8008a78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fa4a 	bl	8008ec0 <USBD_CtlError>
            err++;
 8008a2c:	7afb      	ldrb	r3, [r7, #11]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	72fb      	strb	r3, [r7, #11]
          break;
 8008a32:	e021      	b.n	8008a78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00b      	beq.n	8008a58 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	7c12      	ldrb	r2, [r2, #16]
 8008a4c:	f107 0108 	add.w	r1, r7, #8
 8008a50:	4610      	mov	r0, r2
 8008a52:	4798      	blx	r3
 8008a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a56:	e00f      	b.n	8008a78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fa30 	bl	8008ec0 <USBD_CtlError>
            err++;
 8008a60:	7afb      	ldrb	r3, [r7, #11]
 8008a62:	3301      	adds	r3, #1
 8008a64:	72fb      	strb	r3, [r7, #11]
          break;
 8008a66:	e007      	b.n	8008a78 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fa28 	bl	8008ec0 <USBD_CtlError>
          err++;
 8008a70:	7afb      	ldrb	r3, [r7, #11]
 8008a72:	3301      	adds	r3, #1
 8008a74:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008a76:	bf00      	nop
      }
      break;
 8008a78:	e037      	b.n	8008aea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	7c1b      	ldrb	r3, [r3, #16]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d109      	bne.n	8008a96 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a8a:	f107 0208 	add.w	r2, r7, #8
 8008a8e:	4610      	mov	r0, r2
 8008a90:	4798      	blx	r3
 8008a92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a94:	e029      	b.n	8008aea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fa11 	bl	8008ec0 <USBD_CtlError>
        err++;
 8008a9e:	7afb      	ldrb	r3, [r7, #11]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	72fb      	strb	r3, [r7, #11]
      break;
 8008aa4:	e021      	b.n	8008aea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	7c1b      	ldrb	r3, [r3, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10d      	bne.n	8008aca <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab6:	f107 0208 	add.w	r2, r7, #8
 8008aba:	4610      	mov	r0, r2
 8008abc:	4798      	blx	r3
 8008abe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	2207      	movs	r2, #7
 8008ac6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ac8:	e00f      	b.n	8008aea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f9f7 	bl	8008ec0 <USBD_CtlError>
        err++;
 8008ad2:	7afb      	ldrb	r3, [r7, #11]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ad8:	e007      	b.n	8008aea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f9ef 	bl	8008ec0 <USBD_CtlError>
      err++;
 8008ae2:	7afb      	ldrb	r3, [r7, #11]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ae8:	bf00      	nop
  }

  if (err != 0U)
 8008aea:	7afb      	ldrb	r3, [r7, #11]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d11e      	bne.n	8008b2e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	88db      	ldrh	r3, [r3, #6]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d016      	beq.n	8008b26 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008af8:	893b      	ldrh	r3, [r7, #8]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00e      	beq.n	8008b1c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	88da      	ldrh	r2, [r3, #6]
 8008b02:	893b      	ldrh	r3, [r7, #8]
 8008b04:	4293      	cmp	r3, r2
 8008b06:	bf28      	it	cs
 8008b08:	4613      	movcs	r3, r2
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b0e:	893b      	ldrh	r3, [r7, #8]
 8008b10:	461a      	mov	r2, r3
 8008b12:	68f9      	ldr	r1, [r7, #12]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fa44 	bl	8008fa2 <USBD_CtlSendData>
 8008b1a:	e009      	b.n	8008b30 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f9ce 	bl	8008ec0 <USBD_CtlError>
 8008b24:	e004      	b.n	8008b30 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fa95 	bl	8009056 <USBD_CtlSendStatus>
 8008b2c:	e000      	b.n	8008b30 <USBD_GetDescriptor+0x320>
    return;
 8008b2e:	bf00      	nop
  }
}
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop

08008b38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	889b      	ldrh	r3, [r3, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d131      	bne.n	8008bae <USBD_SetAddress+0x76>
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	88db      	ldrh	r3, [r3, #6]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d12d      	bne.n	8008bae <USBD_SetAddress+0x76>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	885b      	ldrh	r3, [r3, #2]
 8008b56:	2b7f      	cmp	r3, #127	; 0x7f
 8008b58:	d829      	bhi.n	8008bae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	885b      	ldrh	r3, [r3, #2]
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d104      	bne.n	8008b7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f9a3 	bl	8008ec0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b7a:	e01d      	b.n	8008bb8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	7bfa      	ldrb	r2, [r7, #15]
 8008b80:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f001 f960 	bl	8009e4e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fa61 	bl	8009056 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d004      	beq.n	8008ba4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba2:	e009      	b.n	8008bb8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bac:	e004      	b.n	8008bb8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f985 	bl	8008ec0 <USBD_CtlError>
  }
}
 8008bb6:	bf00      	nop
 8008bb8:	bf00      	nop
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	885b      	ldrh	r3, [r3, #2]
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	4b4c      	ldr	r3, [pc, #304]	; (8008d08 <USBD_SetConfig+0x148>)
 8008bd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bd8:	4b4b      	ldr	r3, [pc, #300]	; (8008d08 <USBD_SetConfig+0x148>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d905      	bls.n	8008bec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f96c 	bl	8008ec0 <USBD_CtlError>
    return USBD_FAIL;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e088      	b.n	8008cfe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d002      	beq.n	8008bfe <USBD_SetConfig+0x3e>
 8008bf8:	2b03      	cmp	r3, #3
 8008bfa:	d025      	beq.n	8008c48 <USBD_SetConfig+0x88>
 8008bfc:	e071      	b.n	8008ce2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008bfe:	4b42      	ldr	r3, [pc, #264]	; (8008d08 <USBD_SetConfig+0x148>)
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d01c      	beq.n	8008c40 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008c06:	4b40      	ldr	r3, [pc, #256]	; (8008d08 <USBD_SetConfig+0x148>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c10:	4b3d      	ldr	r3, [pc, #244]	; (8008d08 <USBD_SetConfig+0x148>)
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7ff f992 	bl	8007f40 <USBD_SetClassConfig>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d004      	beq.n	8008c30 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f949 	bl	8008ec0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c2e:	e065      	b.n	8008cfc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fa10 	bl	8009056 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2203      	movs	r2, #3
 8008c3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c3e:	e05d      	b.n	8008cfc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fa08 	bl	8009056 <USBD_CtlSendStatus>
      break;
 8008c46:	e059      	b.n	8008cfc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c48:	4b2f      	ldr	r3, [pc, #188]	; (8008d08 <USBD_SetConfig+0x148>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d112      	bne.n	8008c76 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2202      	movs	r2, #2
 8008c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c58:	4b2b      	ldr	r3, [pc, #172]	; (8008d08 <USBD_SetConfig+0x148>)
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c62:	4b29      	ldr	r3, [pc, #164]	; (8008d08 <USBD_SetConfig+0x148>)
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff f985 	bl	8007f78 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f9f1 	bl	8009056 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c74:	e042      	b.n	8008cfc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008c76:	4b24      	ldr	r3, [pc, #144]	; (8008d08 <USBD_SetConfig+0x148>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d02a      	beq.n	8008cda <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7ff f973 	bl	8007f78 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c92:	4b1d      	ldr	r3, [pc, #116]	; (8008d08 <USBD_SetConfig+0x148>)
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c9c:	4b1a      	ldr	r3, [pc, #104]	; (8008d08 <USBD_SetConfig+0x148>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7ff f94c 	bl	8007f40 <USBD_SetClassConfig>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00f      	beq.n	8008cd2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f903 	bl	8008ec0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff f958 	bl	8007f78 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2202      	movs	r2, #2
 8008ccc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008cd0:	e014      	b.n	8008cfc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f9bf 	bl	8009056 <USBD_CtlSendStatus>
      break;
 8008cd8:	e010      	b.n	8008cfc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f9bb 	bl	8009056 <USBD_CtlSendStatus>
      break;
 8008ce0:	e00c      	b.n	8008cfc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f8eb 	bl	8008ec0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cea:	4b07      	ldr	r3, [pc, #28]	; (8008d08 <USBD_SetConfig+0x148>)
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f7ff f941 	bl	8007f78 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cfa:	bf00      	nop
  }

  return ret;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	20000280 	.word	0x20000280

08008d0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	88db      	ldrh	r3, [r3, #6]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d004      	beq.n	8008d28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f8cd 	bl	8008ec0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d26:	e023      	b.n	8008d70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	dc02      	bgt.n	8008d3a <USBD_GetConfig+0x2e>
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	dc03      	bgt.n	8008d40 <USBD_GetConfig+0x34>
 8008d38:	e015      	b.n	8008d66 <USBD_GetConfig+0x5a>
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d00b      	beq.n	8008d56 <USBD_GetConfig+0x4a>
 8008d3e:	e012      	b.n	8008d66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	3308      	adds	r3, #8
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f927 	bl	8008fa2 <USBD_CtlSendData>
        break;
 8008d54:	e00c      	b.n	8008d70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	3304      	adds	r3, #4
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f91f 	bl	8008fa2 <USBD_CtlSendData>
        break;
 8008d64:	e004      	b.n	8008d70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f8a9 	bl	8008ec0 <USBD_CtlError>
        break;
 8008d6e:	bf00      	nop
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d81e      	bhi.n	8008dce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	88db      	ldrh	r3, [r3, #6]
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d004      	beq.n	8008da2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f890 	bl	8008ec0 <USBD_CtlError>
        break;
 8008da0:	e01a      	b.n	8008dd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d005      	beq.n	8008dbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	f043 0202 	orr.w	r2, r3, #2
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	330c      	adds	r3, #12
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f8eb 	bl	8008fa2 <USBD_CtlSendData>
      break;
 8008dcc:	e004      	b.n	8008dd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f875 	bl	8008ec0 <USBD_CtlError>
      break;
 8008dd6:	bf00      	nop
  }
}
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	885b      	ldrh	r3, [r3, #2]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d106      	bne.n	8008e00 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f92b 	bl	8009056 <USBD_CtlSendStatus>
  }
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d80b      	bhi.n	8008e38 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	885b      	ldrh	r3, [r3, #2]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d10c      	bne.n	8008e42 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f910 	bl	8009056 <USBD_CtlSendStatus>
      }
      break;
 8008e36:	e004      	b.n	8008e42 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f840 	bl	8008ec0 <USBD_CtlError>
      break;
 8008e40:	e000      	b.n	8008e44 <USBD_ClrFeature+0x3c>
      break;
 8008e42:	bf00      	nop
  }
}
 8008e44:	bf00      	nop
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	781a      	ldrb	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3301      	adds	r3, #1
 8008e66:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	781a      	ldrb	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	3301      	adds	r3, #1
 8008e74:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f7ff fa92 	bl	80083a0 <SWAPBYTE>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	461a      	mov	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	3301      	adds	r3, #1
 8008e88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f7ff fa85 	bl	80083a0 <SWAPBYTE>
 8008e96:	4603      	mov	r3, r0
 8008e98:	461a      	mov	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f7ff fa78 	bl	80083a0 <SWAPBYTE>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	80da      	strh	r2, [r3, #6]
}
 8008eb8:	bf00      	nop
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eca:	2180      	movs	r1, #128	; 0x80
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 ff53 	bl	8009d78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 ff4f 	bl	8009d78 <USBD_LL_StallEP>
}
 8008eda:	bf00      	nop
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b086      	sub	sp, #24
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	60f8      	str	r0, [r7, #12]
 8008eea:	60b9      	str	r1, [r7, #8]
 8008eec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d036      	beq.n	8008f66 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008efc:	6938      	ldr	r0, [r7, #16]
 8008efe:	f000 f836 	bl	8008f6e <USBD_GetLen>
 8008f02:	4603      	mov	r3, r0
 8008f04:	3301      	adds	r3, #1
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	005b      	lsls	r3, r3, #1
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f10:	7dfb      	ldrb	r3, [r7, #23]
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	4413      	add	r3, r2
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	7812      	ldrb	r2, [r2, #0]
 8008f1a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	4413      	add	r3, r2
 8008f28:	2203      	movs	r2, #3
 8008f2a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f2c:	7dfb      	ldrb	r3, [r7, #23]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f32:	e013      	b.n	8008f5c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	4413      	add	r3, r2
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	7812      	ldrb	r2, [r2, #0]
 8008f3e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	3301      	adds	r3, #1
 8008f44:	613b      	str	r3, [r7, #16]
    idx++;
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	4413      	add	r3, r2
 8008f52:	2200      	movs	r2, #0
 8008f54:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1e7      	bne.n	8008f34 <USBD_GetString+0x52>
 8008f64:	e000      	b.n	8008f68 <USBD_GetString+0x86>
    return;
 8008f66:	bf00      	nop
  }
}
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b085      	sub	sp, #20
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f7e:	e005      	b.n	8008f8c <USBD_GetLen+0x1e>
  {
    len++;
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
 8008f82:	3301      	adds	r3, #1
 8008f84:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1f5      	bne.n	8008f80 <USBD_GetLen+0x12>
  }

  return len;
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	60f8      	str	r0, [r7, #12]
 8008faa:	60b9      	str	r1, [r7, #8]
 8008fac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f000 ff5f 	bl	8009e8c <USBD_LL_Transmit>

  return USBD_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	2100      	movs	r1, #0
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f000 ff4e 	bl	8009e8c <USBD_LL_Transmit>

  return USBD_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	60f8      	str	r0, [r7, #12]
 8009002:	60b9      	str	r1, [r7, #8]
 8009004:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2203      	movs	r2, #3
 800900a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	2100      	movs	r1, #0
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f000 ff52 	bl	8009ece <USBD_LL_PrepareReceive>

  return USBD_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	2100      	movs	r1, #0
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f000 ff41 	bl	8009ece <USBD_LL_PrepareReceive>

  return USBD_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b082      	sub	sp, #8
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2204      	movs	r2, #4
 8009062:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009066:	2300      	movs	r3, #0
 8009068:	2200      	movs	r2, #0
 800906a:	2100      	movs	r1, #0
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 ff0d 	bl	8009e8c <USBD_LL_Transmit>

  return USBD_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2205      	movs	r2, #5
 8009088:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800908c:	2300      	movs	r3, #0
 800908e:	2200      	movs	r2, #0
 8009090:	2100      	movs	r1, #0
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 ff1b 	bl	8009ece <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
	...

080090a4 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80090aa:	e01c      	b.n	80090e6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80090ac:	1d3b      	adds	r3, r7, #4
 80090ae:	4619      	mov	r1, r3
 80090b0:	4812      	ldr	r0, [pc, #72]	; (80090fc <HW_IPCC_BLE_RxEvtNot+0x58>)
 80090b2:	f000 f94e 	bl	8009352 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	7a5b      	ldrb	r3, [r3, #9]
 80090ba:	2b0f      	cmp	r3, #15
 80090bc:	d003      	beq.n	80090c6 <HW_IPCC_BLE_RxEvtNot+0x22>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	7a5b      	ldrb	r3, [r3, #9]
 80090c2:	2b0e      	cmp	r3, #14
 80090c4:	d105      	bne.n	80090d2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4619      	mov	r1, r3
 80090ca:	2002      	movs	r0, #2
 80090cc:	f000 f880 	bl	80091d0 <OutputDbgTrace>
 80090d0:	e004      	b.n	80090dc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4619      	mov	r1, r3
 80090d6:	2003      	movs	r0, #3
 80090d8:	f000 f87a 	bl	80091d0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80090dc:	4b08      	ldr	r3, [pc, #32]	; (8009100 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	4610      	mov	r0, r2
 80090e4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80090e6:	4805      	ldr	r0, [pc, #20]	; (80090fc <HW_IPCC_BLE_RxEvtNot+0x58>)
 80090e8:	f000 f8f0 	bl	80092cc <LST_is_empty>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d0dc      	beq.n	80090ac <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80090f2:	bf00      	nop
}
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	200300c4 	.word	0x200300c4
 8009100:	20000284 	.word	0x20000284

08009104 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009108:	4b02      	ldr	r3, [pc, #8]	; (8009114 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4798      	blx	r3

  return;
 800910e:	bf00      	nop
}
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	20000288 	.word	0x20000288

08009118 <HW_IPCC_SYS_CmdEvtNot>:

  return 0;
}

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800911c:	4b07      	ldr	r3, [pc, #28]	; (800913c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4619      	mov	r1, r3
 8009124:	2005      	movs	r0, #5
 8009126:	f000 f853 	bl	80091d0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800912a:	4b05      	ldr	r3, [pc, #20]	; (8009140 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a03      	ldr	r2, [pc, #12]	; (800913c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009130:	68d2      	ldr	r2, [r2, #12]
 8009132:	6812      	ldr	r2, [r2, #0]
 8009134:	4610      	mov	r0, r2
 8009136:	4798      	blx	r3

  return;
 8009138:	bf00      	nop
}
 800913a:	bd80      	pop	{r7, pc}
 800913c:	20030000 	.word	0x20030000
 8009140:	2000028c 	.word	0x2000028c

08009144 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800914a:	e00e      	b.n	800916a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800914c:	1d3b      	adds	r3, r7, #4
 800914e:	4619      	mov	r1, r3
 8009150:	480b      	ldr	r0, [pc, #44]	; (8009180 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009152:	f000 f8fe 	bl	8009352 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4619      	mov	r1, r3
 800915a:	2006      	movs	r0, #6
 800915c:	f000 f838 	bl	80091d0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009160:	4b08      	ldr	r3, [pc, #32]	; (8009184 <HW_IPCC_SYS_EvtNot+0x40>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	4610      	mov	r0, r2
 8009168:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800916a:	4805      	ldr	r0, [pc, #20]	; (8009180 <HW_IPCC_SYS_EvtNot+0x3c>)
 800916c:	f000 f8ae 	bl	80092cc <LST_is_empty>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0ea      	beq.n	800914c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009176:	bf00      	nop
}
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	200300cc 	.word	0x200300cc
 8009184:	20000290 	.word	0x20000290

08009188 <HW_IPCC_TRACES_EvtNot>:

  return;
}

void HW_IPCC_TRACES_EvtNot(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800918e:	e008      	b.n	80091a2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009190:	1d3b      	adds	r3, r7, #4
 8009192:	4619      	mov	r1, r3
 8009194:	4808      	ldr	r0, [pc, #32]	; (80091b8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009196:	f000 f8dc 	bl	8009352 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4618      	mov	r0, r3
 800919e:	f000 f80d 	bl	80091bc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80091a2:	4805      	ldr	r0, [pc, #20]	; (80091b8 <HW_IPCC_TRACES_EvtNot+0x30>)
 80091a4:	f000 f892 	bl	80092cc <LST_is_empty>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0f0      	beq.n	8009190 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80091ae:	bf00      	nop
}
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	200300bc 	.word	0x200300bc

080091bc <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	4603      	mov	r3, r0
 80091d8:	6039      	str	r1, [r7, #0]
 80091da:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80091dc:	79fb      	ldrb	r3, [r7, #7]
 80091de:	2b06      	cmp	r3, #6
 80091e0:	d845      	bhi.n	800926e <OutputDbgTrace+0x9e>
 80091e2:	a201      	add	r2, pc, #4	; (adr r2, 80091e8 <OutputDbgTrace+0x18>)
 80091e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e8:	08009205 	.word	0x08009205
 80091ec:	08009229 	.word	0x08009229
 80091f0:	0800922f 	.word	0x0800922f
 80091f4:	08009243 	.word	0x08009243
 80091f8:	0800924f 	.word	0x0800924f
 80091fc:	08009255 	.word	0x08009255
 8009200:	08009263 	.word	0x08009263
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	7a5b      	ldrb	r3, [r3, #9]
 800920c:	2bff      	cmp	r3, #255	; 0xff
 800920e:	d005      	beq.n	800921c <OutputDbgTrace+0x4c>
 8009210:	2bff      	cmp	r3, #255	; 0xff
 8009212:	dc05      	bgt.n	8009220 <OutputDbgTrace+0x50>
 8009214:	2b0e      	cmp	r3, #14
 8009216:	d005      	beq.n	8009224 <OutputDbgTrace+0x54>
 8009218:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800921a:	e001      	b.n	8009220 <OutputDbgTrace+0x50>
          break;
 800921c:	bf00      	nop
 800921e:	e027      	b.n	8009270 <OutputDbgTrace+0xa0>
          break;
 8009220:	bf00      	nop
 8009222:	e025      	b.n	8009270 <OutputDbgTrace+0xa0>
          break;
 8009224:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009226:	e023      	b.n	8009270 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800922c:	e020      	b.n	8009270 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	7a5b      	ldrb	r3, [r3, #9]
 8009236:	2b0e      	cmp	r3, #14
 8009238:	d001      	beq.n	800923e <OutputDbgTrace+0x6e>
 800923a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800923c:	e000      	b.n	8009240 <OutputDbgTrace+0x70>
          break;
 800923e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009240:	e016      	b.n	8009270 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	7a5b      	ldrb	r3, [r3, #9]
 800924a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800924c:	e010      	b.n	8009270 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009252:	e00d      	b.n	8009270 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	7a5b      	ldrb	r3, [r3, #9]
 800925c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800925e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009260:	e006      	b.n	8009270 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	7a5b      	ldrb	r3, [r3, #9]
 800926a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800926c:	e000      	b.n	8009270 <OutputDbgTrace+0xa0>

    default:
      break;
 800926e:	bf00      	nop
  }

  return;
 8009270:	bf00      	nop
}
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800927c:	b480      	push	{r7}
 800927e:	b085      	sub	sp, #20
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009286:	4b0f      	ldr	r3, [pc, #60]	; (80092c4 <OTP_Read+0x48>)
 8009288:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800928a:	e002      	b.n	8009292 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	3b08      	subs	r3, #8
 8009290:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	3307      	adds	r3, #7
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	79fa      	ldrb	r2, [r7, #7]
 800929a:	429a      	cmp	r2, r3
 800929c:	d003      	beq.n	80092a6 <OTP_Read+0x2a>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	4a09      	ldr	r2, [pc, #36]	; (80092c8 <OTP_Read+0x4c>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d1f2      	bne.n	800928c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	3307      	adds	r3, #7
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	79fa      	ldrb	r2, [r7, #7]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d001      	beq.n	80092b6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80092b6:	68fb      	ldr	r3, [r7, #12]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	1fff73f8 	.word	0x1fff73f8
 80092c8:	1fff7000 	.word	0x1fff7000

080092cc <LST_is_empty>:
  listHead->next = listHead;
  listHead->prev = listHead;
}

uint8_t LST_is_empty (tListNode * listHead)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b087      	sub	sp, #28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092d4:	f3ef 8310 	mrs	r3, PRIMASK
 80092d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80092da:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80092dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80092de:	b672      	cpsid	i
}
 80092e0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d102      	bne.n	80092f2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80092ec:	2301      	movs	r3, #1
 80092ee:	75fb      	strb	r3, [r7, #23]
 80092f0:	e001      	b.n	80092f6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80092f2:	2300      	movs	r3, #0
 80092f4:	75fb      	strb	r3, [r7, #23]
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	f383 8810 	msr	PRIMASK, r3
}
 8009300:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009302:	7dfb      	ldrb	r3, [r7, #23]
}
 8009304:	4618      	mov	r0, r3
 8009306:	371c      	adds	r7, #28
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <LST_remove_node>:
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}


void LST_remove_node (tListNode * node)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009318:	f3ef 8310 	mrs	r3, PRIMASK
 800931c:	60fb      	str	r3, [r7, #12]
  return(result);
 800931e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009320:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009322:	b672      	cpsid	i
}
 8009324:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	6812      	ldr	r2, [r2, #0]
 800932e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	6852      	ldr	r2, [r2, #4]
 8009338:	605a      	str	r2, [r3, #4]
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	f383 8810 	msr	PRIMASK, r3
}
 8009344:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009346:	bf00      	nop
 8009348:	371c      	adds	r7, #28
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b086      	sub	sp, #24
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800935c:	f3ef 8310 	mrs	r3, PRIMASK
 8009360:	60fb      	str	r3, [r7, #12]
  return(result);
 8009362:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009364:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009366:	b672      	cpsid	i
}
 8009368:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4618      	mov	r0, r3
 8009378:	f7ff ffca 	bl	8009310 <LST_remove_node>
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	f383 8810 	msr	PRIMASK, r3
}
 8009386:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009388:	bf00      	nop
 800938a:	3718      	adds	r7, #24
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	685a      	ldr	r2, [r3, #4]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	041b      	lsls	r3, r3, #16
 80093a2:	431a      	orrs	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	605a      	str	r2, [r3, #4]
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	683a      	ldr	r2, [r7, #0]
 80093c2:	609a      	str	r2, [r3, #8]
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <LL_C1_IPCC_SetFlag_CHx>:
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	041a      	lsls	r2, r3, #16
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	609a      	str	r2, [r3, #8]
}
 80093e2:	bf00      	nop
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80093ee:	b480      	push	{r7}
 80093f0:	b083      	sub	sp, #12
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	68da      	ldr	r2, [r3, #12]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	4013      	ands	r3, r2
 8009400:	683a      	ldr	r2, [r7, #0]
 8009402:	429a      	cmp	r2, r3
 8009404:	d101      	bne.n	800940a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009406:	2301      	movs	r3, #1
 8009408:	e000      	b.n	800940c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	69da      	ldr	r2, [r3, #28]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	4013      	ands	r3, r2
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	429a      	cmp	r2, r3
 800942e:	d101      	bne.n	8009434 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009430:	2301      	movs	r3, #1
 8009432:	e000      	b.n	8009436 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
	...

08009444 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8009448:	2102      	movs	r1, #2
 800944a:	4819      	ldr	r0, [pc, #100]	; (80094b0 <HW_IPCC_Rx_Handler+0x6c>)
 800944c:	f7ff ffe4 	bl	8009418 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d009      	beq.n	800946a <HW_IPCC_Rx_Handler+0x26>
 8009456:	4b16      	ldr	r3, [pc, #88]	; (80094b0 <HW_IPCC_Rx_Handler+0x6c>)
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	43db      	mvns	r3, r3
 800945c:	f003 0302 	and.w	r3, r3, #2
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8009464:	f000 f884 	bl	8009570 <HW_IPCC_SYS_EvtHandler>
 8009468:	e01f      	b.n	80094aa <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800946a:	2101      	movs	r1, #1
 800946c:	4810      	ldr	r0, [pc, #64]	; (80094b0 <HW_IPCC_Rx_Handler+0x6c>)
 800946e:	f7ff ffd3 	bl	8009418 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d008      	beq.n	800948a <HW_IPCC_Rx_Handler+0x46>
 8009478:	4b0d      	ldr	r3, [pc, #52]	; (80094b0 <HW_IPCC_Rx_Handler+0x6c>)
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	2b00      	cmp	r3, #0
 8009482:	d102      	bne.n	800948a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8009484:	f000 f850 	bl	8009528 <HW_IPCC_BLE_EvtHandler>
 8009488:	e00f      	b.n	80094aa <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800948a:	2108      	movs	r1, #8
 800948c:	4808      	ldr	r0, [pc, #32]	; (80094b0 <HW_IPCC_Rx_Handler+0x6c>)
 800948e:	f7ff ffc3 	bl	8009418 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d009      	beq.n	80094ac <HW_IPCC_Rx_Handler+0x68>
 8009498:	4b05      	ldr	r3, [pc, #20]	; (80094b0 <HW_IPCC_Rx_Handler+0x6c>)
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	43db      	mvns	r3, r3
 800949e:	f003 0308 	and.w	r3, r3, #8
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d002      	beq.n	80094ac <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80094a6:	f000 f883 	bl	80095b0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80094aa:	bf00      	nop
 80094ac:	bf00      	nop
}
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	58000c00 	.word	0x58000c00

080094b4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80094b8:	2102      	movs	r1, #2
 80094ba:	481a      	ldr	r0, [pc, #104]	; (8009524 <HW_IPCC_Tx_Handler+0x70>)
 80094bc:	f7ff ff97 	bl	80093ee <LL_C1_IPCC_IsActiveFlag_CHx>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d109      	bne.n	80094da <HW_IPCC_Tx_Handler+0x26>
 80094c6:	4b17      	ldr	r3, [pc, #92]	; (8009524 <HW_IPCC_Tx_Handler+0x70>)
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	43db      	mvns	r3, r3
 80094cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d002      	beq.n	80094da <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80094d4:	f000 f840 	bl	8009558 <HW_IPCC_SYS_CmdEvtHandler>
 80094d8:	e020      	b.n	800951c <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80094da:	2108      	movs	r1, #8
 80094dc:	4811      	ldr	r0, [pc, #68]	; (8009524 <HW_IPCC_Tx_Handler+0x70>)
 80094de:	f7ff ff86 	bl	80093ee <LL_C1_IPCC_IsActiveFlag_CHx>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d109      	bne.n	80094fc <HW_IPCC_Tx_Handler+0x48>
 80094e8:	4b0e      	ldr	r3, [pc, #56]	; (8009524 <HW_IPCC_Tx_Handler+0x70>)
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	43db      	mvns	r3, r3
 80094ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 80094f6:	f000 f847 	bl	8009588 <HW_IPCC_MM_FreeBufHandler>
 80094fa:	e00f      	b.n	800951c <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80094fc:	2120      	movs	r1, #32
 80094fe:	4809      	ldr	r0, [pc, #36]	; (8009524 <HW_IPCC_Tx_Handler+0x70>)
 8009500:	f7ff ff75 	bl	80093ee <LL_C1_IPCC_IsActiveFlag_CHx>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d109      	bne.n	800951e <HW_IPCC_Tx_Handler+0x6a>
 800950a:	4b06      	ldr	r3, [pc, #24]	; (8009524 <HW_IPCC_Tx_Handler+0x70>)
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	43db      	mvns	r3, r3
 8009510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d002      	beq.n	800951e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009518:	f000 f812 	bl	8009540 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800951c:	bf00      	nop
 800951e:	bf00      	nop
}
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	58000c00 	.word	0x58000c00

08009528 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800952c:	f7ff fdba 	bl	80090a4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009530:	2101      	movs	r1, #1
 8009532:	4802      	ldr	r0, [pc, #8]	; (800953c <HW_IPCC_BLE_EvtHandler+0x14>)
 8009534:	f7ff ff3e 	bl	80093b4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009538:	bf00      	nop
}
 800953a:	bd80      	pop	{r7, pc}
 800953c:	58000c00 	.word	0x58000c00

08009540 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009544:	2120      	movs	r1, #32
 8009546:	4803      	ldr	r0, [pc, #12]	; (8009554 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009548:	f7ff ff22 	bl	8009390 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800954c:	f7ff fdda 	bl	8009104 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009550:	bf00      	nop
}
 8009552:	bd80      	pop	{r7, pc}
 8009554:	58000c00 	.word	0x58000c00

08009558 <HW_IPCC_SYS_CmdEvtHandler>:

  return;
}

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800955c:	2102      	movs	r1, #2
 800955e:	4803      	ldr	r0, [pc, #12]	; (800956c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009560:	f7ff ff16 	bl	8009390 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009564:	f7ff fdd8 	bl	8009118 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009568:	bf00      	nop
}
 800956a:	bd80      	pop	{r7, pc}
 800956c:	58000c00 	.word	0x58000c00

08009570 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009574:	f7ff fde6 	bl	8009144 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009578:	2102      	movs	r1, #2
 800957a:	4802      	ldr	r0, [pc, #8]	; (8009584 <HW_IPCC_SYS_EvtHandler+0x14>)
 800957c:	f7ff ff1a 	bl	80093b4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009580:	bf00      	nop
}
 8009582:	bd80      	pop	{r7, pc}
 8009584:	58000c00 	.word	0x58000c00

08009588 <HW_IPCC_MM_FreeBufHandler>:

  return;
}

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800958c:	2108      	movs	r1, #8
 800958e:	4806      	ldr	r0, [pc, #24]	; (80095a8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009590:	f7ff fefe 	bl	8009390 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8009594:	4b05      	ldr	r3, [pc, #20]	; (80095ac <HW_IPCC_MM_FreeBufHandler+0x24>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800959a:	2108      	movs	r1, #8
 800959c:	4802      	ldr	r0, [pc, #8]	; (80095a8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800959e:	f7ff ff17 	bl	80093d0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80095a2:	bf00      	nop
}
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	58000c00 	.word	0x58000c00
 80095ac:	20000294 	.word	0x20000294

080095b0 <HW_IPCC_TRACES_EvtHandler>:

  return;
}

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80095b4:	f7ff fde8 	bl	8009188 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80095b8:	2108      	movs	r1, #8
 80095ba:	4802      	ldr	r0, [pc, #8]	; (80095c4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80095bc:	f7ff fefa 	bl	80093b4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80095c0:	bf00      	nop
}
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	58000c00 	.word	0x58000c00

080095c8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80095cc:	2200      	movs	r2, #0
 80095ce:	4912      	ldr	r1, [pc, #72]	; (8009618 <MX_USB_Device_Init+0x50>)
 80095d0:	4812      	ldr	r0, [pc, #72]	; (800961c <MX_USB_Device_Init+0x54>)
 80095d2:	f7fe fc47 	bl	8007e64 <USBD_Init>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80095dc:	f7f7 fd80 	bl	80010e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80095e0:	490f      	ldr	r1, [pc, #60]	; (8009620 <MX_USB_Device_Init+0x58>)
 80095e2:	480e      	ldr	r0, [pc, #56]	; (800961c <MX_USB_Device_Init+0x54>)
 80095e4:	f7fe fc6e 	bl	8007ec4 <USBD_RegisterClass>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80095ee:	f7f7 fd77 	bl	80010e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80095f2:	490c      	ldr	r1, [pc, #48]	; (8009624 <MX_USB_Device_Init+0x5c>)
 80095f4:	4809      	ldr	r0, [pc, #36]	; (800961c <MX_USB_Device_Init+0x54>)
 80095f6:	f7fe fbbf 	bl	8007d78 <USBD_CDC_RegisterInterface>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009600:	f7f7 fd6e 	bl	80010e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009604:	4805      	ldr	r0, [pc, #20]	; (800961c <MX_USB_Device_Init+0x54>)
 8009606:	f7fe fc84 	bl	8007f12 <USBD_Start>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009610:	f7f7 fd66 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009614:	bf00      	nop
 8009616:	bd80      	pop	{r7, pc}
 8009618:	20000134 	.word	0x20000134
 800961c:	20000298 	.word	0x20000298
 8009620:	2000001c 	.word	0x2000001c
 8009624:	20000120 	.word	0x20000120

08009628 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800962c:	2200      	movs	r2, #0
 800962e:	4905      	ldr	r1, [pc, #20]	; (8009644 <CDC_Init_FS+0x1c>)
 8009630:	4805      	ldr	r0, [pc, #20]	; (8009648 <CDC_Init_FS+0x20>)
 8009632:	f7fe fbb6 	bl	8007da2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009636:	4905      	ldr	r1, [pc, #20]	; (800964c <CDC_Init_FS+0x24>)
 8009638:	4803      	ldr	r0, [pc, #12]	; (8009648 <CDC_Init_FS+0x20>)
 800963a:	f7fe fbd0 	bl	8007dde <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800963e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009640:	4618      	mov	r0, r3
 8009642:	bd80      	pop	{r7, pc}
 8009644:	20000d68 	.word	0x20000d68
 8009648:	20000298 	.word	0x20000298
 800964c:	20000568 	.word	0x20000568

08009650 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009650:	b480      	push	{r7}
 8009652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009654:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009656:	4618      	mov	r0, r3
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	4603      	mov	r3, r0
 8009668:	6039      	str	r1, [r7, #0]
 800966a:	71fb      	strb	r3, [r7, #7]
 800966c:	4613      	mov	r3, r2
 800966e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009670:	79fb      	ldrb	r3, [r7, #7]
 8009672:	2b23      	cmp	r3, #35	; 0x23
 8009674:	d84a      	bhi.n	800970c <CDC_Control_FS+0xac>
 8009676:	a201      	add	r2, pc, #4	; (adr r2, 800967c <CDC_Control_FS+0x1c>)
 8009678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967c:	0800970d 	.word	0x0800970d
 8009680:	0800970d 	.word	0x0800970d
 8009684:	0800970d 	.word	0x0800970d
 8009688:	0800970d 	.word	0x0800970d
 800968c:	0800970d 	.word	0x0800970d
 8009690:	0800970d 	.word	0x0800970d
 8009694:	0800970d 	.word	0x0800970d
 8009698:	0800970d 	.word	0x0800970d
 800969c:	0800970d 	.word	0x0800970d
 80096a0:	0800970d 	.word	0x0800970d
 80096a4:	0800970d 	.word	0x0800970d
 80096a8:	0800970d 	.word	0x0800970d
 80096ac:	0800970d 	.word	0x0800970d
 80096b0:	0800970d 	.word	0x0800970d
 80096b4:	0800970d 	.word	0x0800970d
 80096b8:	0800970d 	.word	0x0800970d
 80096bc:	0800970d 	.word	0x0800970d
 80096c0:	0800970d 	.word	0x0800970d
 80096c4:	0800970d 	.word	0x0800970d
 80096c8:	0800970d 	.word	0x0800970d
 80096cc:	0800970d 	.word	0x0800970d
 80096d0:	0800970d 	.word	0x0800970d
 80096d4:	0800970d 	.word	0x0800970d
 80096d8:	0800970d 	.word	0x0800970d
 80096dc:	0800970d 	.word	0x0800970d
 80096e0:	0800970d 	.word	0x0800970d
 80096e4:	0800970d 	.word	0x0800970d
 80096e8:	0800970d 	.word	0x0800970d
 80096ec:	0800970d 	.word	0x0800970d
 80096f0:	0800970d 	.word	0x0800970d
 80096f4:	0800970d 	.word	0x0800970d
 80096f8:	0800970d 	.word	0x0800970d
 80096fc:	0800970d 	.word	0x0800970d
 8009700:	0800970d 	.word	0x0800970d
 8009704:	0800970d 	.word	0x0800970d
 8009708:	0800970d 	.word	0x0800970d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800970c:	bf00      	nop
  }

  return (USBD_OK);
 800970e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	480a      	ldr	r0, [pc, #40]	; (8009754 <CDC_Receive_FS+0x38>)
 800972a:	f7fe fb58 	bl	8007dde <USBD_CDC_SetRxBuffer>
  rxUart[0]=Buf[0];
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	781a      	ldrb	r2, [r3, #0]
 8009732:	4b09      	ldr	r3, [pc, #36]	; (8009758 <CDC_Receive_FS+0x3c>)
 8009734:	701a      	strb	r2, [r3, #0]
  rxUart[1]=0;
 8009736:	4b08      	ldr	r3, [pc, #32]	; (8009758 <CDC_Receive_FS+0x3c>)
 8009738:	2200      	movs	r2, #0
 800973a:	705a      	strb	r2, [r3, #1]
  UTIL_SEQ_SetTask(1<<CFG_TASK_RECEIVE_UART_ID, CFG_SCH_PRIO_0);
 800973c:	2100      	movs	r1, #0
 800973e:	2004      	movs	r0, #4
 8009740:	f000 fd64 	bl	800a20c <UTIL_SEQ_SetTask>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009744:	4803      	ldr	r0, [pc, #12]	; (8009754 <CDC_Receive_FS+0x38>)
 8009746:	f7fe fb63 	bl	8007e10 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800974a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800974c:	4618      	mov	r0, r3
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	20000298 	.word	0x20000298
 8009758:	20000278 	.word	0x20000278

0800975c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800975c:	b480      	push	{r7}
 800975e:	b087      	sub	sp, #28
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	4613      	mov	r3, r2
 8009768:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800976a:	2300      	movs	r3, #0
 800976c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800976e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009772:	4618      	mov	r0, r3
 8009774:	371c      	adds	r7, #28
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
	...

08009780 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	6039      	str	r1, [r7, #0]
 800978a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	2212      	movs	r2, #18
 8009790:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009792:	4b03      	ldr	r3, [pc, #12]	; (80097a0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009794:	4618      	mov	r0, r3
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	20000154 	.word	0x20000154

080097a4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	6039      	str	r1, [r7, #0]
 80097ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	2204      	movs	r2, #4
 80097b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80097b6:	4b03      	ldr	r3, [pc, #12]	; (80097c4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	20000168 	.word	0x20000168

080097c8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	4603      	mov	r3, r0
 80097d0:	6039      	str	r1, [r7, #0]
 80097d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097d4:	79fb      	ldrb	r3, [r7, #7]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d105      	bne.n	80097e6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	4907      	ldr	r1, [pc, #28]	; (80097fc <USBD_CDC_ProductStrDescriptor+0x34>)
 80097de:	4808      	ldr	r0, [pc, #32]	; (8009800 <USBD_CDC_ProductStrDescriptor+0x38>)
 80097e0:	f7ff fb7f 	bl	8008ee2 <USBD_GetString>
 80097e4:	e004      	b.n	80097f0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	4904      	ldr	r1, [pc, #16]	; (80097fc <USBD_CDC_ProductStrDescriptor+0x34>)
 80097ea:	4805      	ldr	r0, [pc, #20]	; (8009800 <USBD_CDC_ProductStrDescriptor+0x38>)
 80097ec:	f7ff fb79 	bl	8008ee2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097f0:	4b02      	ldr	r3, [pc, #8]	; (80097fc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	20001568 	.word	0x20001568
 8009800:	0800a390 	.word	0x0800a390

08009804 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	4603      	mov	r3, r0
 800980c:	6039      	str	r1, [r7, #0]
 800980e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	4904      	ldr	r1, [pc, #16]	; (8009824 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009814:	4804      	ldr	r0, [pc, #16]	; (8009828 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009816:	f7ff fb64 	bl	8008ee2 <USBD_GetString>
  return USBD_StrDesc;
 800981a:	4b02      	ldr	r3, [pc, #8]	; (8009824 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800981c:	4618      	mov	r0, r3
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	20001568 	.word	0x20001568
 8009828:	0800a3a8 	.word	0x0800a3a8

0800982c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	4603      	mov	r3, r0
 8009834:	6039      	str	r1, [r7, #0]
 8009836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	221a      	movs	r2, #26
 800983c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800983e:	f000 f843 	bl	80098c8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009842:	4b02      	ldr	r3, [pc, #8]	; (800984c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009844:	4618      	mov	r0, r3
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	2000016c 	.word	0x2000016c

08009850 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	4603      	mov	r3, r0
 8009858:	6039      	str	r1, [r7, #0]
 800985a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800985c:	79fb      	ldrb	r3, [r7, #7]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d105      	bne.n	800986e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	4907      	ldr	r1, [pc, #28]	; (8009884 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009866:	4808      	ldr	r0, [pc, #32]	; (8009888 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009868:	f7ff fb3b 	bl	8008ee2 <USBD_GetString>
 800986c:	e004      	b.n	8009878 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	4904      	ldr	r1, [pc, #16]	; (8009884 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009872:	4805      	ldr	r0, [pc, #20]	; (8009888 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009874:	f7ff fb35 	bl	8008ee2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009878:	4b02      	ldr	r3, [pc, #8]	; (8009884 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	20001568 	.word	0x20001568
 8009888:	0800a3bc 	.word	0x0800a3bc

0800988c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	4603      	mov	r3, r0
 8009894:	6039      	str	r1, [r7, #0]
 8009896:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009898:	79fb      	ldrb	r3, [r7, #7]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d105      	bne.n	80098aa <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	4907      	ldr	r1, [pc, #28]	; (80098c0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80098a2:	4808      	ldr	r0, [pc, #32]	; (80098c4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80098a4:	f7ff fb1d 	bl	8008ee2 <USBD_GetString>
 80098a8:	e004      	b.n	80098b4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	4904      	ldr	r1, [pc, #16]	; (80098c0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80098ae:	4805      	ldr	r0, [pc, #20]	; (80098c4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80098b0:	f7ff fb17 	bl	8008ee2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098b4:	4b02      	ldr	r3, [pc, #8]	; (80098c0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	20001568 	.word	0x20001568
 80098c4:	0800a3c8 	.word	0x0800a3c8

080098c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80098ce:	4b0f      	ldr	r3, [pc, #60]	; (800990c <Get_SerialNum+0x44>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80098d4:	4b0e      	ldr	r3, [pc, #56]	; (8009910 <Get_SerialNum+0x48>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80098da:	4b0e      	ldr	r3, [pc, #56]	; (8009914 <Get_SerialNum+0x4c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4413      	add	r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d009      	beq.n	8009902 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098ee:	2208      	movs	r2, #8
 80098f0:	4909      	ldr	r1, [pc, #36]	; (8009918 <Get_SerialNum+0x50>)
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f000 f814 	bl	8009920 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098f8:	2204      	movs	r2, #4
 80098fa:	4908      	ldr	r1, [pc, #32]	; (800991c <Get_SerialNum+0x54>)
 80098fc:	68b8      	ldr	r0, [r7, #8]
 80098fe:	f000 f80f 	bl	8009920 <IntToUnicode>
  }
}
 8009902:	bf00      	nop
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	1fff7590 	.word	0x1fff7590
 8009910:	1fff7594 	.word	0x1fff7594
 8009914:	1fff7598 	.word	0x1fff7598
 8009918:	2000016e 	.word	0x2000016e
 800991c:	2000017e 	.word	0x2000017e

08009920 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009920:	b480      	push	{r7}
 8009922:	b087      	sub	sp, #28
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	4613      	mov	r3, r2
 800992c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009932:	2300      	movs	r3, #0
 8009934:	75fb      	strb	r3, [r7, #23]
 8009936:	e027      	b.n	8009988 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	0f1b      	lsrs	r3, r3, #28
 800993c:	2b09      	cmp	r3, #9
 800993e:	d80b      	bhi.n	8009958 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	0f1b      	lsrs	r3, r3, #28
 8009944:	b2da      	uxtb	r2, r3
 8009946:	7dfb      	ldrb	r3, [r7, #23]
 8009948:	005b      	lsls	r3, r3, #1
 800994a:	4619      	mov	r1, r3
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	440b      	add	r3, r1
 8009950:	3230      	adds	r2, #48	; 0x30
 8009952:	b2d2      	uxtb	r2, r2
 8009954:	701a      	strb	r2, [r3, #0]
 8009956:	e00a      	b.n	800996e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	0f1b      	lsrs	r3, r3, #28
 800995c:	b2da      	uxtb	r2, r3
 800995e:	7dfb      	ldrb	r3, [r7, #23]
 8009960:	005b      	lsls	r3, r3, #1
 8009962:	4619      	mov	r1, r3
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	440b      	add	r3, r1
 8009968:	3237      	adds	r2, #55	; 0x37
 800996a:	b2d2      	uxtb	r2, r2
 800996c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	011b      	lsls	r3, r3, #4
 8009972:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009974:	7dfb      	ldrb	r3, [r7, #23]
 8009976:	005b      	lsls	r3, r3, #1
 8009978:	3301      	adds	r3, #1
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	4413      	add	r3, r2
 800997e:	2200      	movs	r2, #0
 8009980:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009982:	7dfb      	ldrb	r3, [r7, #23]
 8009984:	3301      	adds	r3, #1
 8009986:	75fb      	strb	r3, [r7, #23]
 8009988:	7dfa      	ldrb	r2, [r7, #23]
 800998a:	79fb      	ldrb	r3, [r7, #7]
 800998c:	429a      	cmp	r2, r3
 800998e:	d3d3      	bcc.n	8009938 <IntToUnicode+0x18>
  }
}
 8009990:	bf00      	nop
 8009992:	bf00      	nop
 8009994:	371c      	adds	r7, #28
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <LL_AHB2_GRP1_EnableClock>:
{
 800999e:	b480      	push	{r7}
 80099a0:	b085      	sub	sp, #20
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80099a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80099b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4013      	ands	r3, r2
 80099c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80099c2:	68fb      	ldr	r3, [r7, #12]
}
 80099c4:	bf00      	nop
 80099c6:	3714      	adds	r7, #20
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <LL_APB1_GRP1_EnableClock>:
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80099d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80099de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80099e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4013      	ands	r3, r2
 80099f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80099f4:	68fb      	ldr	r3, [r7, #12]
}
 80099f6:	bf00      	nop
 80099f8:	3714      	adds	r7, #20
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
	...

08009a04 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b09c      	sub	sp, #112	; 0x70
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a0c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]
 8009a14:	605a      	str	r2, [r3, #4]
 8009a16:	609a      	str	r2, [r3, #8]
 8009a18:	60da      	str	r2, [r3, #12]
 8009a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009a1c:	f107 030c 	add.w	r3, r7, #12
 8009a20:	2250      	movs	r2, #80	; 0x50
 8009a22:	2100      	movs	r1, #0
 8009a24:	4618      	mov	r0, r3
 8009a26:	f000 fc89 	bl	800a33c <memset>
  if(pcdHandle->Instance==USB)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a1b      	ldr	r2, [pc, #108]	; (8009a9c <HAL_PCD_MspInit+0x98>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d12f      	bne.n	8009a94 <HAL_PCD_MspInit+0x90>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a38:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009a3e:	f107 030c 	add.w	r3, r7, #12
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fb f8d1 	bl	8004bea <HAL_RCCEx_PeriphCLKConfig>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d001      	beq.n	8009a52 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8009a4e:	f7f7 fb47 	bl	80010e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a52:	2001      	movs	r0, #1
 8009a54:	f7ff ffa3 	bl	800999e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009a58:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a5e:	2302      	movs	r3, #2
 8009a60:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a62:	2300      	movs	r3, #0
 8009a64:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a66:	2300      	movs	r3, #0
 8009a68:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8009a6a:	230a      	movs	r3, #10
 8009a6c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a6e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009a72:	4619      	mov	r1, r3
 8009a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a78:	f7f7 feac 	bl	80017d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009a7c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8009a80:	f7ff ffa6 	bl	80099d0 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009a84:	2200      	movs	r2, #0
 8009a86:	2100      	movs	r1, #0
 8009a88:	2014      	movs	r0, #20
 8009a8a:	f7f7 fe44 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009a8e:	2014      	movs	r0, #20
 8009a90:	f7f7 fe5b 	bl	800174a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009a94:	bf00      	nop
 8009a96:	3770      	adds	r7, #112	; 0x70
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	40006800 	.word	0x40006800

08009aa0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	f7fe fa76 	bl	8007fa8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009abc:	bf00      	nop
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	460b      	mov	r3, r1
 8009ace:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009ad6:	78fa      	ldrb	r2, [r7, #3]
 8009ad8:	6879      	ldr	r1, [r7, #4]
 8009ada:	4613      	mov	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4413      	add	r3, r2
 8009ae0:	00db      	lsls	r3, r3, #3
 8009ae2:	440b      	add	r3, r1
 8009ae4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	78fb      	ldrb	r3, [r7, #3]
 8009aec:	4619      	mov	r1, r3
 8009aee:	f7fe fab0 	bl	8008052 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009af2:	bf00      	nop
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b082      	sub	sp, #8
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
 8009b02:	460b      	mov	r3, r1
 8009b04:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009b0c:	78fa      	ldrb	r2, [r7, #3]
 8009b0e:	6879      	ldr	r1, [r7, #4]
 8009b10:	4613      	mov	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	00db      	lsls	r3, r3, #3
 8009b18:	440b      	add	r3, r1
 8009b1a:	333c      	adds	r3, #60	; 0x3c
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	78fb      	ldrb	r3, [r7, #3]
 8009b20:	4619      	mov	r1, r3
 8009b22:	f7fe faf9 	bl	8008118 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009b26:	bf00      	nop
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b082      	sub	sp, #8
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fe fc0d 	bl	800835c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009b42:	bf00      	nop
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b084      	sub	sp, #16
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b52:	2301      	movs	r3, #1
 8009b54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d001      	beq.n	8009b62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b5e:	f7f7 fabf 	bl	80010e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b68:	7bfa      	ldrb	r2, [r7, #15]
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fe fbb7 	bl	80082e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fe fb63 	bl	8008244 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009b7e:	bf00      	nop
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fe fbb2 	bl	8008300 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d005      	beq.n	8009bb0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ba4:	4b04      	ldr	r3, [pc, #16]	; (8009bb8 <HAL_PCD_SuspendCallback+0x30>)
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	4a03      	ldr	r2, [pc, #12]	; (8009bb8 <HAL_PCD_SuspendCallback+0x30>)
 8009baa:	f043 0306 	orr.w	r3, r3, #6
 8009bae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009bb0:	bf00      	nop
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	e000ed00 	.word	0xe000ed00

08009bbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d007      	beq.n	8009bdc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bcc:	4b08      	ldr	r3, [pc, #32]	; (8009bf0 <HAL_PCD_ResumeCallback+0x34>)
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	4a07      	ldr	r2, [pc, #28]	; (8009bf0 <HAL_PCD_ResumeCallback+0x34>)
 8009bd2:	f023 0306 	bic.w	r3, r3, #6
 8009bd6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009bd8:	f000 f9fc 	bl	8009fd4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fe fba2 	bl	800832c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009be8:	bf00      	nop
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	e000ed00 	.word	0xe000ed00

08009bf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009bfc:	4a2c      	ldr	r2, [pc, #176]	; (8009cb0 <USBD_LL_Init+0xbc>)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a2a      	ldr	r2, [pc, #168]	; (8009cb0 <USBD_LL_Init+0xbc>)
 8009c08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009c0c:	f7f9 fce0 	bl	80035d0 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8009c10:	4b27      	ldr	r3, [pc, #156]	; (8009cb0 <USBD_LL_Init+0xbc>)
 8009c12:	4a28      	ldr	r2, [pc, #160]	; (8009cb4 <USBD_LL_Init+0xc0>)
 8009c14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009c16:	4b26      	ldr	r3, [pc, #152]	; (8009cb0 <USBD_LL_Init+0xbc>)
 8009c18:	2208      	movs	r2, #8
 8009c1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009c1c:	4b24      	ldr	r3, [pc, #144]	; (8009cb0 <USBD_LL_Init+0xbc>)
 8009c1e:	2202      	movs	r2, #2
 8009c20:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c22:	4b23      	ldr	r3, [pc, #140]	; (8009cb0 <USBD_LL_Init+0xbc>)
 8009c24:	2202      	movs	r2, #2
 8009c26:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009c28:	4b21      	ldr	r3, [pc, #132]	; (8009cb0 <USBD_LL_Init+0xbc>)
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009c2e:	4b20      	ldr	r3, [pc, #128]	; (8009cb0 <USBD_LL_Init+0xbc>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009c34:	4b1e      	ldr	r3, [pc, #120]	; (8009cb0 <USBD_LL_Init+0xbc>)
 8009c36:	2200      	movs	r2, #0
 8009c38:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009c3a:	4b1d      	ldr	r3, [pc, #116]	; (8009cb0 <USBD_LL_Init+0xbc>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009c40:	481b      	ldr	r0, [pc, #108]	; (8009cb0 <USBD_LL_Init+0xbc>)
 8009c42:	f7f7 ff73 	bl	8001b2c <HAL_PCD_Init>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d001      	beq.n	8009c50 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009c4c:	f7f7 fa48 	bl	80010e0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c56:	2318      	movs	r3, #24
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	f7f9 fc2c 	bl	80034b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c66:	2358      	movs	r3, #88	; 0x58
 8009c68:	2200      	movs	r2, #0
 8009c6a:	2180      	movs	r1, #128	; 0x80
 8009c6c:	f7f9 fc24 	bl	80034b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c76:	23c0      	movs	r3, #192	; 0xc0
 8009c78:	2200      	movs	r2, #0
 8009c7a:	2181      	movs	r1, #129	; 0x81
 8009c7c:	f7f9 fc1c 	bl	80034b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c86:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	2101      	movs	r1, #1
 8009c8e:	f7f9 fc13 	bl	80034b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	2182      	movs	r1, #130	; 0x82
 8009ca0:	f7f9 fc0a 	bl	80034b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20001768 	.word	0x20001768
 8009cb4:	40006800 	.word	0x40006800

08009cb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7f8 f811 	bl	8001cf6 <HAL_PCD_Start>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 f980 	bl	8009fe0 <USBD_Get_USB_Status>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ce4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	4608      	mov	r0, r1
 8009cf8:	4611      	mov	r1, r2
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	70fb      	strb	r3, [r7, #3]
 8009d00:	460b      	mov	r3, r1
 8009d02:	70bb      	strb	r3, [r7, #2]
 8009d04:	4613      	mov	r3, r2
 8009d06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d16:	78bb      	ldrb	r3, [r7, #2]
 8009d18:	883a      	ldrh	r2, [r7, #0]
 8009d1a:	78f9      	ldrb	r1, [r7, #3]
 8009d1c:	f7f8 f959 	bl	8001fd2 <HAL_PCD_EP_Open>
 8009d20:	4603      	mov	r3, r0
 8009d22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 f95a 	bl	8009fe0 <USBD_Get_USB_Status>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d30:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b084      	sub	sp, #16
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	460b      	mov	r3, r1
 8009d44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d54:	78fa      	ldrb	r2, [r7, #3]
 8009d56:	4611      	mov	r1, r2
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7f8 f9a0 	bl	800209e <HAL_PCD_EP_Close>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d62:	7bfb      	ldrb	r3, [r7, #15]
 8009d64:	4618      	mov	r0, r3
 8009d66:	f000 f93b 	bl	8009fe0 <USBD_Get_USB_Status>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	460b      	mov	r3, r1
 8009d82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d92:	78fa      	ldrb	r2, [r7, #3]
 8009d94:	4611      	mov	r1, r2
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7f8 fa61 	bl	800225e <HAL_PCD_EP_SetStall>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f000 f91c 	bl	8009fe0 <USBD_Get_USB_Status>
 8009da8:	4603      	mov	r3, r0
 8009daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b084      	sub	sp, #16
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dd0:	78fa      	ldrb	r2, [r7, #3]
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7f8 fa94 	bl	8002302 <HAL_PCD_EP_ClrStall>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f000 f8fd 	bl	8009fe0 <USBD_Get_USB_Status>
 8009de6:	4603      	mov	r3, r0
 8009de8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dea:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	da0c      	bge.n	8009e2a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e10:	78fb      	ldrb	r3, [r7, #3]
 8009e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e16:	68f9      	ldr	r1, [r7, #12]
 8009e18:	1c5a      	adds	r2, r3, #1
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	00db      	lsls	r3, r3, #3
 8009e22:	440b      	add	r3, r1
 8009e24:	3302      	adds	r3, #2
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	e00b      	b.n	8009e42 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e30:	68f9      	ldr	r1, [r7, #12]
 8009e32:	4613      	mov	r3, r2
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	4413      	add	r3, r2
 8009e38:	00db      	lsls	r3, r3, #3
 8009e3a:	440b      	add	r3, r1
 8009e3c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009e40:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b084      	sub	sp, #16
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	460b      	mov	r3, r1
 8009e58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e68:	78fa      	ldrb	r2, [r7, #3]
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7f8 f88b 	bl	8001f88 <HAL_PCD_SetAddress>
 8009e72:	4603      	mov	r3, r0
 8009e74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e76:	7bfb      	ldrb	r3, [r7, #15]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f000 f8b1 	bl	8009fe0 <USBD_Get_USB_Status>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e82:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	607a      	str	r2, [r7, #4]
 8009e96:	603b      	str	r3, [r7, #0]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009eaa:	7af9      	ldrb	r1, [r7, #11]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	f7f8 f992 	bl	80021d8 <HAL_PCD_EP_Transmit>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eb8:	7dfb      	ldrb	r3, [r7, #23]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 f890 	bl	8009fe0 <USBD_Get_USB_Status>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ec4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b086      	sub	sp, #24
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	60f8      	str	r0, [r7, #12]
 8009ed6:	607a      	str	r2, [r7, #4]
 8009ed8:	603b      	str	r3, [r7, #0]
 8009eda:	460b      	mov	r3, r1
 8009edc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009eec:	7af9      	ldrb	r1, [r7, #11]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	f7f8 f91c 	bl	800212e <HAL_PCD_EP_Receive>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f000 f86f 	bl	8009fe0 <USBD_Get_USB_Status>
 8009f02:	4603      	mov	r3, r0
 8009f04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f06:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3718      	adds	r7, #24
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f22:	78fa      	ldrb	r2, [r7, #3]
 8009f24:	4611      	mov	r1, r2
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7f8 f93e 	bl	80021a8 <HAL_PCD_EP_GetRxCount>
 8009f2c:	4603      	mov	r3, r0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
	...

08009f38 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d002      	beq.n	8009f50 <HAL_PCDEx_LPM_Callback+0x18>
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d013      	beq.n	8009f76 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009f4e:	e023      	b.n	8009f98 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d007      	beq.n	8009f68 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009f58:	f000 f83c 	bl	8009fd4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f5c:	4b10      	ldr	r3, [pc, #64]	; (8009fa0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	4a0f      	ldr	r2, [pc, #60]	; (8009fa0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009f62:	f023 0306 	bic.w	r3, r3, #6
 8009f66:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fe f9dc 	bl	800832c <USBD_LL_Resume>
    break;
 8009f74:	e010      	b.n	8009f98 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fe f9bf 	bl	8008300 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d005      	beq.n	8009f96 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f8a:	4b05      	ldr	r3, [pc, #20]	; (8009fa0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	4a04      	ldr	r2, [pc, #16]	; (8009fa0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009f90:	f043 0306 	orr.w	r3, r3, #6
 8009f94:	6113      	str	r3, [r2, #16]
    break;
 8009f96:	bf00      	nop
}
 8009f98:	bf00      	nop
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	e000ed00 	.word	0xe000ed00

08009fa4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009fac:	4b03      	ldr	r3, [pc, #12]	; (8009fbc <USBD_static_malloc+0x18>)
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	370c      	adds	r7, #12
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	20001a5c 	.word	0x20001a5c

08009fc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]

}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009fd8:	f7f6 ff8a 	bl	8000ef0 <SystemClock_Config>
}
 8009fdc:	bf00      	nop
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009fee:	79fb      	ldrb	r3, [r7, #7]
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	d817      	bhi.n	800a024 <USBD_Get_USB_Status+0x44>
 8009ff4:	a201      	add	r2, pc, #4	; (adr r2, 8009ffc <USBD_Get_USB_Status+0x1c>)
 8009ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffa:	bf00      	nop
 8009ffc:	0800a00d 	.word	0x0800a00d
 800a000:	0800a013 	.word	0x0800a013
 800a004:	0800a019 	.word	0x0800a019
 800a008:	0800a01f 	.word	0x0800a01f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	73fb      	strb	r3, [r7, #15]
    break;
 800a010:	e00b      	b.n	800a02a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a012:	2303      	movs	r3, #3
 800a014:	73fb      	strb	r3, [r7, #15]
    break;
 800a016:	e008      	b.n	800a02a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a018:	2301      	movs	r3, #1
 800a01a:	73fb      	strb	r3, [r7, #15]
    break;
 800a01c:	e005      	b.n	800a02a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a01e:	2303      	movs	r3, #3
 800a020:	73fb      	strb	r3, [r7, #15]
    break;
 800a022:	e002      	b.n	800a02a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a024:	2303      	movs	r3, #3
 800a026:	73fb      	strb	r3, [r7, #15]
    break;
 800a028:	bf00      	nop
  }
  return usb_status;
 800a02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3714      	adds	r7, #20
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b08c      	sub	sp, #48	; 0x30
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a040:	4b6a      	ldr	r3, [pc, #424]	; (800a1ec <UTIL_SEQ_Run+0x1b4>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 800a046:	4b69      	ldr	r3, [pc, #420]	; (800a1ec <UTIL_SEQ_Run+0x1b4>)
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4013      	ands	r3, r2
 800a04e:	4a67      	ldr	r2, [pc, #412]	; (800a1ec <UTIL_SEQ_Run+0x1b4>)
 800a050:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800a052:	4b67      	ldr	r3, [pc, #412]	; (800a1f0 <UTIL_SEQ_Run+0x1b8>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a058:	e086      	b.n	800a168 <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 800a05a:	2300      	movs	r3, #0
 800a05c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a05e:	e002      	b.n	800a066 <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 800a060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a062:	3301      	adds	r3, #1
 800a064:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a066:	4a63      	ldr	r2, [pc, #396]	; (800a1f4 <UTIL_SEQ_Run+0x1bc>)
 800a068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a06e:	4b62      	ldr	r3, [pc, #392]	; (800a1f8 <UTIL_SEQ_Run+0x1c0>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	401a      	ands	r2, r3
 800a074:	4b5d      	ldr	r3, [pc, #372]	; (800a1ec <UTIL_SEQ_Run+0x1b4>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4013      	ands	r3, r2
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d0f0      	beq.n	800a060 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800a07e:	4a5d      	ldr	r2, [pc, #372]	; (800a1f4 <UTIL_SEQ_Run+0x1bc>)
 800a080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a082:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a086:	4b5c      	ldr	r3, [pc, #368]	; (800a1f8 <UTIL_SEQ_Run+0x1c0>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	401a      	ands	r2, r3
 800a08c:	4b57      	ldr	r3, [pc, #348]	; (800a1ec <UTIL_SEQ_Run+0x1b4>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4013      	ands	r3, r2
 800a092:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a094:	4a57      	ldr	r2, [pc, #348]	; (800a1f4 <UTIL_SEQ_Run+0x1bc>)
 800a096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a098:	00db      	lsls	r3, r3, #3
 800a09a:	4413      	add	r3, r2
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	6a3b      	ldr	r3, [r7, #32]
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d106      	bne.n	800a0b4 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a0a6:	4a53      	ldr	r2, [pc, #332]	; (800a1f4 <UTIL_SEQ_Run+0x1bc>)
 800a0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0aa:	00db      	lsls	r3, r3, #3
 800a0ac:	4413      	add	r3, r2
 800a0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b2:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a0b4:	4a4f      	ldr	r2, [pc, #316]	; (800a1f4 <UTIL_SEQ_Run+0x1bc>)
 800a0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b8:	00db      	lsls	r3, r3, #3
 800a0ba:	4413      	add	r3, r2
 800a0bc:	685a      	ldr	r2, [r3, #4]
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f000 f8dc 	bl	800a280 <SEQ_BitPosition>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	4b4b      	ldr	r3, [pc, #300]	; (800a1fc <UTIL_SEQ_Run+0x1c4>)
 800a0ce:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a0d0:	4a48      	ldr	r2, [pc, #288]	; (800a1f4 <UTIL_SEQ_Run+0x1bc>)
 800a0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d4:	00db      	lsls	r3, r3, #3
 800a0d6:	4413      	add	r3, r2
 800a0d8:	685a      	ldr	r2, [r3, #4]
 800a0da:	4b48      	ldr	r3, [pc, #288]	; (800a1fc <UTIL_SEQ_Run+0x1c4>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2101      	movs	r1, #1
 800a0e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a0e4:	43db      	mvns	r3, r3
 800a0e6:	401a      	ands	r2, r3
 800a0e8:	4942      	ldr	r1, [pc, #264]	; (800a1f4 <UTIL_SEQ_Run+0x1bc>)
 800a0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ec:	00db      	lsls	r3, r3, #3
 800a0ee:	440b      	add	r3, r1
 800a0f0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0f2:	f3ef 8310 	mrs	r3, PRIMASK
 800a0f6:	617b      	str	r3, [r7, #20]
  return(result);
 800a0f8:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a0fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0fc:	b672      	cpsid	i
}
 800a0fe:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a100:	4b3e      	ldr	r3, [pc, #248]	; (800a1fc <UTIL_SEQ_Run+0x1c4>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2201      	movs	r2, #1
 800a106:	fa02 f303 	lsl.w	r3, r2, r3
 800a10a:	43da      	mvns	r2, r3
 800a10c:	4b38      	ldr	r3, [pc, #224]	; (800a1f0 <UTIL_SEQ_Run+0x1b8>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4013      	ands	r3, r2
 800a112:	4a37      	ldr	r2, [pc, #220]	; (800a1f0 <UTIL_SEQ_Run+0x1b8>)
 800a114:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a116:	2302      	movs	r3, #2
 800a118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a11a:	e013      	b.n	800a144 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11e:	3b01      	subs	r3, #1
 800a120:	4a34      	ldr	r2, [pc, #208]	; (800a1f4 <UTIL_SEQ_Run+0x1bc>)
 800a122:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a126:	4b35      	ldr	r3, [pc, #212]	; (800a1fc <UTIL_SEQ_Run+0x1c4>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2201      	movs	r2, #1
 800a12c:	fa02 f303 	lsl.w	r3, r2, r3
 800a130:	43da      	mvns	r2, r3
 800a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a134:	3b01      	subs	r3, #1
 800a136:	400a      	ands	r2, r1
 800a138:	492e      	ldr	r1, [pc, #184]	; (800a1f4 <UTIL_SEQ_Run+0x1bc>)
 800a13a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a140:	3b01      	subs	r3, #1
 800a142:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a146:	2b00      	cmp	r3, #0
 800a148:	d1e8      	bne.n	800a11c <UTIL_SEQ_Run+0xe4>
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	f383 8810 	msr	PRIMASK, r3
}
 800a154:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a156:	4b29      	ldr	r3, [pc, #164]	; (800a1fc <UTIL_SEQ_Run+0x1c4>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a29      	ldr	r2, [pc, #164]	; (800a200 <UTIL_SEQ_Run+0x1c8>)
 800a15c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a160:	4798      	blx	r3
    
    local_taskset = TaskSet;
 800a162:	4b23      	ldr	r3, [pc, #140]	; (800a1f0 <UTIL_SEQ_Run+0x1b8>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a168:	4b23      	ldr	r3, [pc, #140]	; (800a1f8 <UTIL_SEQ_Run+0x1c0>)
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16e:	401a      	ands	r2, r3
 800a170:	4b1e      	ldr	r3, [pc, #120]	; (800a1ec <UTIL_SEQ_Run+0x1b4>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4013      	ands	r3, r2
 800a176:	2b00      	cmp	r3, #0
 800a178:	d007      	beq.n	800a18a <UTIL_SEQ_Run+0x152>
 800a17a:	4b22      	ldr	r3, [pc, #136]	; (800a204 <UTIL_SEQ_Run+0x1cc>)
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	4b22      	ldr	r3, [pc, #136]	; (800a208 <UTIL_SEQ_Run+0x1d0>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4013      	ands	r3, r2
 800a184:	2b00      	cmp	r3, #0
 800a186:	f43f af68 	beq.w	800a05a <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a18a:	4b1c      	ldr	r3, [pc, #112]	; (800a1fc <UTIL_SEQ_Run+0x1c4>)
 800a18c:	f04f 32ff 	mov.w	r2, #4294967295
 800a190:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a192:	f000 f867 	bl	800a264 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a196:	f3ef 8310 	mrs	r3, PRIMASK
 800a19a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a19c:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a19e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1a0:	b672      	cpsid	i
}
 800a1a2:	bf00      	nop
  local_taskset = TaskSet;
 800a1a4:	4b12      	ldr	r3, [pc, #72]	; (800a1f0 <UTIL_SEQ_Run+0x1b8>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800a1aa:	4b13      	ldr	r3, [pc, #76]	; (800a1f8 <UTIL_SEQ_Run+0x1c0>)
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	401a      	ands	r2, r3
 800a1b2:	4b0e      	ldr	r3, [pc, #56]	; (800a1ec <UTIL_SEQ_Run+0x1b4>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d108      	bne.n	800a1ce <UTIL_SEQ_Run+0x196>
 800a1bc:	4b11      	ldr	r3, [pc, #68]	; (800a204 <UTIL_SEQ_Run+0x1cc>)
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	4b11      	ldr	r3, [pc, #68]	; (800a208 <UTIL_SEQ_Run+0x1d0>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 800a1ca:	f7f6 f91d 	bl	8000408 <UTIL_SEQ_Idle>
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	f383 8810 	msr	PRIMASK, r3
}
 800a1d8:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800a1da:	f000 f84a 	bl	800a272 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a1de:	4a03      	ldr	r2, [pc, #12]	; (800a1ec <UTIL_SEQ_Run+0x1b4>)
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	6013      	str	r3, [r2, #0]

  return;
 800a1e4:	bf00      	nop
}
 800a1e6:	3730      	adds	r7, #48	; 0x30
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	2000018c 	.word	0x2000018c
 800a1f0:	20001c7c 	.word	0x20001c7c
 800a1f4:	20001d0c 	.word	0x20001d0c
 800a1f8:	20000188 	.word	0x20000188
 800a1fc:	20001c88 	.word	0x20001c88
 800a200:	20001c8c 	.word	0x20001c8c
 800a204:	20001c80 	.word	0x20001c80
 800a208:	20001c84 	.word	0x20001c84

0800a20c <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a20c:	b480      	push	{r7}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a216:	f3ef 8310 	mrs	r3, PRIMASK
 800a21a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a21c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a21e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a220:	b672      	cpsid	i
}
 800a222:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a224:	4b0d      	ldr	r3, [pc, #52]	; (800a25c <UTIL_SEQ_SetTask+0x50>)
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	4a0b      	ldr	r2, [pc, #44]	; (800a25c <UTIL_SEQ_SetTask+0x50>)
 800a22e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a230:	4a0b      	ldr	r2, [pc, #44]	; (800a260 <UTIL_SEQ_SetTask+0x54>)
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	431a      	orrs	r2, r3
 800a23c:	4908      	ldr	r1, [pc, #32]	; (800a260 <UTIL_SEQ_SetTask+0x54>)
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	f383 8810 	msr	PRIMASK, r3
}
 800a24e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a250:	bf00      	nop
}
 800a252:	371c      	adds	r7, #28
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	20001c7c 	.word	0x20001c7c
 800a260:	20001d0c 	.word	0x20001d0c

0800a264 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a264:	b480      	push	{r7}
 800a266:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a268:	bf00      	nop
}
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a272:	b480      	push	{r7}
 800a274:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a276:	bf00      	nop
}
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800a288:	2300      	movs	r3, #0
 800a28a:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	0c1b      	lsrs	r3, r3, #16
 800a290:	041b      	lsls	r3, r3, #16
 800a292:	2b00      	cmp	r3, #0
 800a294:	d104      	bne.n	800a2a0 <SEQ_BitPosition+0x20>
 800a296:	2310      	movs	r3, #16
 800a298:	73fb      	strb	r3, [r7, #15]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	041b      	lsls	r3, r3, #16
 800a29e:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d105      	bne.n	800a2b6 <SEQ_BitPosition+0x36>
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
 800a2ac:	3308      	adds	r3, #8
 800a2ae:	73fb      	strb	r3, [r7, #15]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	021b      	lsls	r3, r3, #8
 800a2b4:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d105      	bne.n	800a2cc <SEQ_BitPosition+0x4c>
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	73fb      	strb	r3, [r7, #15]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	011b      	lsls	r3, r3, #4
 800a2ca:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	0f1b      	lsrs	r3, r3, #28
 800a2d0:	4a07      	ldr	r2, [pc, #28]	; (800a2f0 <SEQ_BitPosition+0x70>)
 800a2d2:	5cd2      	ldrb	r2, [r2, r3]
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
 800a2dc:	f1c3 031f 	rsb	r3, r3, #31
 800a2e0:	b2db      	uxtb	r3, r3
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3714      	adds	r7, #20
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	0800a458 	.word	0x0800a458

0800a2f4 <__libc_init_array>:
 800a2f4:	b570      	push	{r4, r5, r6, lr}
 800a2f6:	4d0d      	ldr	r5, [pc, #52]	; (800a32c <__libc_init_array+0x38>)
 800a2f8:	4c0d      	ldr	r4, [pc, #52]	; (800a330 <__libc_init_array+0x3c>)
 800a2fa:	1b64      	subs	r4, r4, r5
 800a2fc:	10a4      	asrs	r4, r4, #2
 800a2fe:	2600      	movs	r6, #0
 800a300:	42a6      	cmp	r6, r4
 800a302:	d109      	bne.n	800a318 <__libc_init_array+0x24>
 800a304:	4d0b      	ldr	r5, [pc, #44]	; (800a334 <__libc_init_array+0x40>)
 800a306:	4c0c      	ldr	r4, [pc, #48]	; (800a338 <__libc_init_array+0x44>)
 800a308:	f000 f820 	bl	800a34c <_init>
 800a30c:	1b64      	subs	r4, r4, r5
 800a30e:	10a4      	asrs	r4, r4, #2
 800a310:	2600      	movs	r6, #0
 800a312:	42a6      	cmp	r6, r4
 800a314:	d105      	bne.n	800a322 <__libc_init_array+0x2e>
 800a316:	bd70      	pop	{r4, r5, r6, pc}
 800a318:	f855 3b04 	ldr.w	r3, [r5], #4
 800a31c:	4798      	blx	r3
 800a31e:	3601      	adds	r6, #1
 800a320:	e7ee      	b.n	800a300 <__libc_init_array+0xc>
 800a322:	f855 3b04 	ldr.w	r3, [r5], #4
 800a326:	4798      	blx	r3
 800a328:	3601      	adds	r6, #1
 800a32a:	e7f2      	b.n	800a312 <__libc_init_array+0x1e>
 800a32c:	0800a468 	.word	0x0800a468
 800a330:	0800a468 	.word	0x0800a468
 800a334:	0800a468 	.word	0x0800a468
 800a338:	0800a46c 	.word	0x0800a46c

0800a33c <memset>:
 800a33c:	4402      	add	r2, r0
 800a33e:	4603      	mov	r3, r0
 800a340:	4293      	cmp	r3, r2
 800a342:	d100      	bne.n	800a346 <memset+0xa>
 800a344:	4770      	bx	lr
 800a346:	f803 1b01 	strb.w	r1, [r3], #1
 800a34a:	e7f9      	b.n	800a340 <memset+0x4>

0800a34c <_init>:
 800a34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34e:	bf00      	nop
 800a350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a352:	bc08      	pop	{r3}
 800a354:	469e      	mov	lr, r3
 800a356:	4770      	bx	lr

0800a358 <_fini>:
 800a358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35a:	bf00      	nop
 800a35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a35e:	bc08      	pop	{r3}
 800a360:	469e      	mov	lr, r3
 800a362:	4770      	bx	lr
